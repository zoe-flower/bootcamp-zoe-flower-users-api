// Package httpservice provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/flypay/go-kit/v4 version v4.114.0 DO NOT EDIT.
package httpservice

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add a user
	// (POST /user)
	AddUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AddUser converts echo context to params.
func (w *ServerInterfaceWrapper) AddUser(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/user", wrapper.AddUser)
}

type AddUserRequestObject struct {
	Body *AddUserJSONRequestBody
}

type AddUserResponseObject interface {
	VisitAddUserResponse(w http.ResponseWriter) error
}

type AddUser200JSONResponse User

func (response AddUser200JSONResponse) VisitAddUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Add a user
	// (POST /user)
	AddUser(ctx context.Context, request AddUserRequestObject) (AddUserResponseObject, error)
}

type (
	StrictHandlerFunc    = strictecho.StrictEchoHandlerFunc
	StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc
)

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// AddUser operation middleware
func (sh *strictHandler) AddUser(ctx echo.Context) error {
	var request AddUserRequestObject

	var body AddUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddUser(ctx.Request().Context(), request.(AddUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AddUserResponseObject); ok {
		return validResponse.VisitAddUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{
	"H4sIAAAAAAAC/7RUW2/UPBD9K9Z832MuC7zlbRFCqvqCVJCQqmrl2JPGxbGNPV4IVf47Gqe77fYiBIin",
	"JHM554znxLeg/BS8Q0cJultIasRJltdPCSM/Q/QBIxksUe17ftAcEDpIFI27hqWCwcREOycn5DR+l1Ow",
	"XFHiJVw9bbLy2R4Ov9SSrFRfdqN02v4OU04Yd0Y/I305Vvv+BhWVSEKVo6H5go9jHXwbzDnO20wjfxkH",
	"HYwoNUaoYB0BPtfv7Uz1Npj6HOd7GbK0wsLIxg2+nCMmFU0g4xmp956UnEL9w+NusP4bxpolp1oGw0CG",
	"yoy/qttjTCviptk0r3hyH9BxsoM3zabZQAVB0lhGavNhxT7RU1FbrYUUXCP6WZxpKGBRcvpMrwXFJBVE",
	"/Jox0VuvZ8ZR3hG6AilDsEaVnvYmMe7BZPz2f8QBOvivvXdhe2fBtkCXM3tRFnmh+zt6E1FDRzHjwoEU",
	"vEvr5l5vNv9c1EVWClMashXHM1qdlKdJxvlE9wpw8Bh0l6fuurxarjgdeZsle8r1IXqdFX8IdHsTvZt4",
	"rgpytOxKopC6tn3olfqxV5qBnRqspMHHqVF+gqV6THRB8tq4679lSSvMCyTvcI/WBwb/c6L6ln/BFKTC",
	"ZSXVuC+EFexlNLK3qxeOZavdB5ktQVeuh7ur41TdxxHFsUf4QdCIQj+QzGsyCiuRU5bWzmL2OYoDXsOr",
	"vlp+BgAA//89eS6LZgUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
