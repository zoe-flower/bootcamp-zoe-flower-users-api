# Code generated by dev-tool; DO NOT EDIT.
name: pr
on:
  pull_request:
    branches:
      - main

# Only allow one of these to run per branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Permissions for dependabot
permissions:
  pull-requests: write
  issues: write

  # For helper-login-to-amazon-ecr
  id-token: write
  contents: read

jobs:
  login-to-amazon-ecr:
    uses: flypay/actions-service-tool/.github/workflows/helper-login-to-amazon-ecr.yml@v1.0.8
  test-unit:
    uses: ./.github/workflows/helper-test-unit.yml
    secrets: inherit
  test-contract:
    uses: ./.github/workflows/helper-test-contract.yml
    secrets: inherit
  service-json-diff:
    needs: login-to-amazon-ecr
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.login-to-amazon-ecr.outputs.registry }}/go-kit:v4.117.0
      credentials:
        username: ${{ needs.login-to-amazon-ecr.outputs.docker_username }}
        password: ${{ needs.login-to-amazon-ecr.outputs.docker_password }}
    env:
      REPOSITORY: ${{ github.event.repository.name }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
      GITHUB_BRANCH: ${{ github.head_ref }}
    steps:
    - uses: actions/checkout@v4.1.0
      with:
        # need this to run git branch otherwise it complains about a detached head when running git branch
        ref: ${{ github.event.pull_request.head.ref }}
        fetch-depth: 0
    - name: Diff
      run: |-
        # go-kit runs "git config remote.origin.url" which fails if this isn't set
        git config --global --add safe.directory '*'
        
        base="remotes/origin/main"
        output=$(git diff $base $GITHUB_BRANCH -- service.json)
        if [[ ! -z "$output" ]]; then
          echo $output;
          echo -e 'diff is below. a = base branch, b = this branch' >> /tmp/gitcomment.txt;
          echo -e '```text' >> /tmp/gitcomment.txt;
          echo -e "$output" >> /tmp/gitcomment.txt;
          echo -e '```' >> /tmp/gitcomment.txt;
          /dev-tool ci pr-comment "service.json has been changed" --file=/tmp/gitcomment.txt --owner $GITHUB_REPOSITORY_OWNER --repo $REPOSITORY --branch $GITHUB_BRANCH --token $GITHUB_TOKEN
        fi
  go-kit-validate:
    needs: login-to-amazon-ecr
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.login-to-amazon-ecr.outputs.registry }}/go-kit:v4.117.0
      credentials:
        username: ${{ needs.login-to-amazon-ecr.outputs.docker_username }}
        password: ${{ needs.login-to-amazon-ecr.outputs.docker_password }}
    env:
      REPOSITORY: ${{ github.event.repository.name }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
      GITHUB_BRANCH: ${{ github.head_ref }}
    steps:
    - uses: actions/checkout@v4.1.0
    - name: Validate
      run: |-
        set +e
        /dev-tool validate --strict > comment.txt
        status=$?
        set -eo pipefail
        if [ ! -s comment.txt ]; then
            /dev-tool ci pr-comment "Service Validation" "No issues found :)" --owner $GITHUB_REPOSITORY_OWNER --repo $REPOSITORY --branch $GITHUB_BRANCH --token $GITHUB_TOKEN
            exit 0
        fi
        cat comment.txt
        /dev-tool ci pr-comment "Service Validation" --file=comment.txt --owner $GITHUB_REPOSITORY_OWNER --repo $REPOSITORY --branch $GITHUB_BRANCH --token $GITHUB_TOKEN
        exit $status
  go-kit-validate-openapi:
    needs: login-to-amazon-ecr
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.login-to-amazon-ecr.outputs.registry }}/go-kit:v4.117.0
      credentials:
        username: ${{ needs.login-to-amazon-ecr.outputs.docker_username }}
        password: ${{ needs.login-to-amazon-ecr.outputs.docker_password }}
    env:
      REPOSITORY: ${{ github.event.repository.name }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
      GITHUB_BRANCH: ${{ github.head_ref }}
    steps:
    - uses: actions/checkout@v4.1.0
    - name: Validate OpenAPI
      run: |-
        set +e
        /dev-tool validate openapi > comment.txt
        status=$?
        set -eo pipefail
        if $status == 0; then
            /dev-tool ci pr-comment "OpenAPI Validation" "No issues found :)" --owner $GITHUB_REPOSITORY_OWNER --repo $REPOSITORY --branch $GITHUB_BRANCH --token $GITHUB_TOKEN
            exit 0
        fi
        cat comment.txt
        /dev-tool ci pr-comment "OpenAPI Validation" --file=comment.txt --owner $GITHUB_REPOSITORY_OWNER --repo $REPOSITORY --branch $GITHUB_BRANCH --token $GITHUB_TOKEN
        exit $status
  service-compiles:
    needs: login-to-amazon-ecr
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.login-to-amazon-ecr.outputs.registry }}/go-kit:v4.117.0
      credentials:
        username: ${{ needs.login-to-amazon-ecr.outputs.docker_username }}
        password: ${{ needs.login-to-amazon-ecr.outputs.docker_password }}
    steps:
    - uses: actions/checkout@v4.1.0
    - name: Check Service Compiles
      run: |-
        # go-kit runs "git config remote.origin.url" which fails if this isn't set
        git config --global --add safe.directory '*'
        
        /dev-tool run --compile-only
  integration-tests:
    runs-on: ubuntu-latest
    env:
      GO111MODULE: 'on'
      GOFLAGS: "-mod=vendor"
      TEST_SERVICE_ADDR: http://localhost:8080
      CI: 'true'
      GOOS: linux
      CGO_ENABLED: '0'
      REPOSITORY: ${{ github.event.repository.name }}
      OPSGENIE_API_KEY: ${{ secrets.STAGING_OPSGENIE_API_KEY }}
    steps:
    - uses: actions/checkout@v4.1.0
    - name: Generate a token
      id: generate_token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ secrets.ASSETS_DOWNLOADER_APP_ID }}
        private-key: ${{ secrets.ASSETS_DOWNLOADER_PRIVATE_KEY }}
        repositories: go-kit
    - name: Install latest dev-tool
      env:
        GITHUB_ASSETS_DOWNLOADER_TOKEN: ${{ steps.generate_token.outputs.token }}
      run: |-
        ASSET_ID=$(curl --silent https://api.github.com/repos/flypay/go-kit/releases/latest --header "authorization: Bearer $GITHUB_ASSETS_DOWNLOADER_TOKEN" | jq -r ".assets | map(select(.name == \"dev-tool-linux-amd64.tar.gz\"))[0].id")
        if [[ "$ASSET_ID" == "null" ]]; then echo "Unable to get latest dev-tool release"; exit 1; fi
        curl --silent https://api.github.com/repos/flypay/go-kit/releases/assets/$ASSET_ID --header "authorization: Bearer $GITHUB_ASSETS_DOWNLOADER_TOKEN" -H "Accept: application/octet-stream" -L -O -J
        tar -xvf dev-tool-linux-amd64.tar.gz
    - uses: actions/setup-go@v4.1.0
      with:
        cache: false
        go-version: '1.22'
    - name: restore_cache
      uses: actions/cache/restore@v3.3.2
      with:
        key: v1-golang-build-cache-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('go.sum') }}
        path: "~/.cache/go-build"
    - name: Build Integration Image
      run: go test -tags=integration -c -o integration github.com/flypay/$REPOSITORY/cmd/app
    - name: Start docker resources
      run: "./dev-tool docker up"
    - name: Start Service
      # Should run in the background (also need to redirect all terminal output as this causes the process to get detached)
      run: "./dev-tool run &>/dev/null &"
    - name: save_cache
      uses: actions/cache/save@v3.3.2
      with:
        key: v1-golang-build-cache-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('go.sum') }}
        path: "~/.cache/go-build"
    - name: Wait for service to start
      run: until $(curl --output /dev/null --silent --fail $TEST_SERVICE_ADDR/ping); do sleep 5; done
      timeout-minutes: 2
    - name: Run Integration Tests
      run: if [ -f ./integration ]; then ./integration; fi
  monorepo-tests:
    uses: ./.github/workflows/helper-monorepo-tests.yml
    secrets: inherit
  dev-tool-drift-detect:
    needs: login-to-amazon-ecr
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.login-to-amazon-ecr.outputs.registry }}/go-kit:v4.117.0
      credentials:
        username: ${{ needs.login-to-amazon-ecr.outputs.docker_username }}
        password: ${{ needs.login-to-amazon-ecr.outputs.docker_password }}
    env:
      GOPRIVATE: github.com/flypay/*
      REPOSITORY: ${{ github.event.repository.name }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
      GITHUB_BRANCH: ${{ github.head_ref }}
    steps:
    - uses: actions/checkout@v4.1.0
    - name: Generate a token
      id: generate_token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ secrets.ASSETS_DOWNLOADER_APP_ID }}
        private-key: ${{ secrets.ASSETS_DOWNLOADER_PRIVATE_KEY }}
        owner: ${{ github.repository_owner }}
    - name: Drift Detect
      env:
        GITHUB_ASSETS_DOWNLOADER_TOKEN: ${{ steps.generate_token.outputs.token }}
      run: |-
        # go-kit runs "git config remote.origin.url" which fails if this isn't set
        git config --global --add safe.directory '*'
        
        git config --global url."https://git:${GITHUB_ASSETS_DOWNLOADER_TOKEN}@github.com/flypay".insteadOf "https://github.com/flypay" || true        
        
        /dev-tool update
        git checkout vendor go.mod go.sum
        git clean vendor -f
        if ! git diff --exit-code --quiet; then
          echo "Drift detected. Review flagged files and if safe run dev-tool update locally and commit changes." > /tmp/manualtemplating.txt
          git status >> /tmp/manualtemplating.txt
          echo -e 'Contents of changed files:' >> /tmp/manualtemplating.txt;
          echo -e '```text' >> /tmp/manualtemplating.txt;
          echo -e "$(git diff)" >> /tmp/manualtemplating.txt;
          echo -e '```' >> /tmp/manualtemplating.txt;
          /dev-tool ci pr-comment "Dev Tool Drift Detection" --file=/tmp/manualtemplating.txt --owner $GITHUB_REPOSITORY_OWNER --repo $REPOSITORY --branch $GITHUB_BRANCH --token $GITHUB_TOKEN
          echo "Drift detected, view PR comment for full details"
          exit 1
        else
          echo "No drift detect" > /tmp/manualtemplating.txt
          /dev-tool ci pr-comment "Dev Tool Drift Detection" --file=/tmp/manualtemplating.txt --owner $GITHUB_REPOSITORY_OWNER --repo $REPOSITORY --branch $GITHUB_BRANCH --token $GITHUB_TOKEN
        fi
  service-json-resource-deletion:
    needs: login-to-amazon-ecr
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.login-to-amazon-ecr.outputs.registry }}/go-kit:v4.117.0
      credentials:
        username: ${{ needs.login-to-amazon-ecr.outputs.docker_username }}
        password: ${{ needs.login-to-amazon-ecr.outputs.docker_password }}
    env:
      REPOSITORY: ${{ github.event.repository.name }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
      GITHUB_BRANCH: ${{ github.head_ref }}
    steps:
    - uses: actions/checkout@v4.1.0
      with:
        # need this to run git branch otherwise it complains about a detached head when running git branch
        ref: ${{ github.event.pull_request.head.ref }}
        fetch-depth: 0
    - name: Check for Deleted Resources
      run: |-
        # go-kit runs "git config remote.origin.url" which fails if this isn't set
        git config --global --add safe.directory '*'

        apk add --no-cache jq
        base="remotes/origin/main"
        is_new=$(git cat-file -e ${base}:service.json 2>&1 || true)
        if [ -n "$is_new" ]
        then
          echo "New repo, skipping check"
          exit 0
        fi

        cp service.json branch_service.json
        git checkout $base -- service.json
        cp service.json base_service.json
        touch /tmp/gitcomment.txt
        for resource in "databases" "composite_databases" "object_stores" "assets"
        do
          echo "Checking to see if $resource were deleted..."
          base=$(jq ".resources.$resource | length" base_service.json)
          branch=$(jq ".resources.$resource | length" branch_service.json)
          echo "base=$base branch=$branch"
          if [ $base -gt $branch ]; then
            echo "Removing ***$resource(s)*** not supported, please readd and mark the following as \`"deleted": true\` in service.json:" >> /tmp/gitcomment.txt
            jq ".resources.$resource[]?.name" base_service.json > base_resources.txt
            jq ".resources.$resource[]?.name" branch_service.json > branch_resources.txt
            echo -e '```text' >> /tmp/gitcomment.txt
            git diff --no-index base_resources.txt branch_resources.txt | egrep "^-\"" | cut -c2- | tr -d \" | awk '{print "- "$0}' >> /tmp/gitcomment.txt || true
            echo -e '```' >> /tmp/gitcomment.txt
          fi
        done
        cat /tmp/gitcomment.txt || echo "no resources deleted"
        if [ -s /tmp/gitcomment.txt ]; then
          /dev-tool ci pr-comment "resources deleted from service.json" --file=/tmp/gitcomment.txt --owner $GITHUB_REPOSITORY_OWNER --repo $REPOSITORY --branch $GITHUB_BRANCH --token $GITHUB_TOKEN
        fi
