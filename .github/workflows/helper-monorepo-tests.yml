# Code generated by dev-tool; DO NOT EDIT.
name: helper-monorepo-tests
on:
  workflow_call:
    secrets:
      TUNNEL_SERVICE_TOKEN_ID:
        required: true
      TUNNEL_SERVICE_TOKEN_SECRET:
        required: true
      ASSETS_DOWNLOADER_APP_ID:
        required: true
      ASSETS_DOWNLOADER_PRIVATE_KEY:
        required: true

jobs:
  monorepo-tests:
    runs-on: 
      labels: ubuntu-latest-8cores
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read
    container:
      image: cimg/go:1.22
      # Docker actions must be run as root.
      # This is so the UID of the docker container that runs generate_token has the correct permissions. 
      # Only effects larger runners for some reason. 
      # More info can be found here: https://github.com/actions/checkout/issues/1014
      options: --user root 
    services:
      # This originally had "/goaws -debug". "-debug" has been removed
      # Default image command can be found here:
      # https://hub.docker.com/layers/pafortin/goaws/v0.3.1/images/sha256-e2cdefaa005ac7ff706585399026f784b0306b09b941ddf2030230c4a844adbd?context=explore
      goaws:
        image: pafortin/goaws:v0.3.1
      aws-stepfunctions-local:
        image: amazon/aws-stepfunctions-local:1.7.9
        env:
          AWS_DEFAULT_REGION: eu-west-1
          AWS_ACCOUNT_ID: '000000000000'
          AWS_ACCESS_KEY_ID: flyt
          AWS_SECRET_ACCESS_KEY: flyt1234
          # Setting the the hostnames provided by GitHub Actions as socat isn't redirecting to localhost here
          DYNAMODB_ENDPOINT: http://dynamodb-local:8000
          SQS_ENDPOINT: http://goaws:4100
          SNS_ENDPOINT: http://goaws:4100
      # This originally had "-jar DynamoDBLocal.jar -sharedDb -inMemory". "-sharedDb" has been removed
      # Default image command can be found here:
      # https://hub.docker.com/layers/amazon/dynamodb-local/1.17.0/images/sha256-9d9253af53bfbf74df53715a36327a9b75881b6bde8d624614ae4e8f0ee8a73d?context=explore
      dynamodb-local:
        image: amazon/dynamodb-local:1.17.0
    env:
      GOPRIVATE: github.com/flypay/*
      CONFIG_EVENTBUS_ENDPOINT: http://localhost:4100
      CONFIG_EVENTBUS_SFN_ENDPOINT: http://localhost:8083
      CONFIG_EVENTBUS_LOCAL_CREATE: true
      CONFIG_RESOURCES_PROJECTIONS_ENDPOINT: http://localhost:8000
      CONFIG_RESOURCES_PROJECTIONS_LOCAL_CREATE: true
      CONFIG_RESOURCES_OBJECT_STORE_ENDPOINT: http://localhost:9000
      CONFIG_RESOURCES_OBJECT_STORE_LOCAL_CREATE: true
      TUNNEL_SERVICE_TOKEN_ID: ${{ secrets.TUNNEL_SERVICE_TOKEN_ID }}
      TUNNEL_SERVICE_TOKEN_SECRET: ${{ secrets.TUNNEL_SERVICE_TOKEN_SECRET }}
      # Just linking the run rather than the specific job as the job ID isn't available in the variables.
      # To get the specific job we would have to use the GH API to extract the job_id from the run.
      BUILD_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      REPOSITORY: ${{ github.event.repository.name }}
    steps:
      # Services do not allow commands to be passed in (only options) so this has to be in the steps section.
      - name: Start minio
        env:
          MINIO_IMAGE: minio/minio:RELEASE.2021-11-24T23-19-33Z
          DOCKER_CMD: "server /data"
          MINIO_ACCESS_KEY: flyt
          MINIO_SECRET_KEY: flyt1234
        run: |-
          # permissions for docker to run
          sudo chmod 666 /var/run/docker.sock

          # Need to extract the bridge network ID
          BRIDGE_NETWORK_ID=$(docker network ls --filter=name=github_network_ --format="{{ .Name }}")

          docker pull $MINIO_IMAGE
          docker_id=$(docker create --network "$BRIDGE_NETWORK_ID" --network-alias minio -e "MINIO_ACCESS_KEY=$MINIO_ACCESS_KEY" -e "MINIO_SECRET_KEY=$MINIO_SECRET_KEY" $MINIO_IMAGE $DOCKER_CMD)
          docker start $docker_id
          docker ps --all --filter id=$docker_id --filter status=running --no-trunc --format "{{.ID}} {{.Status}}"
          docker port $docker_id
          docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" $docker_id
      - name: Start Logging
        run: |-
          curl https://raw.githubusercontent.com/fluent/fluent-bit/master/install.sh | sh

          # Should run in the background (also need to redirect all terminal output as this causes the process to get detached)
          /opt/fluent-bit/bin/fluent-bit -f 1 -i tail -p path=/tmp/logs.txt -p read_from_head=true -p buffer_max_size=5mb -F record_modifier -p 'Record=ci_link ${BUILD_URL}' -m '*' -o http://monorepo-logging-staging.flyt-tools.com -p tls=On -p port=443 -p header="CF-Access-Client-Id ${TUNNEL_SERVICE_TOKEN_ID}" -p header="CF-Access-Client-Secret ${TUNNEL_SERVICE_TOKEN_SECRET}" -p format=json &>/dev/null &
      - name: Logging ci_link
        run: echo $BUILD_URL
      - name: Generate a token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.ASSETS_DOWNLOADER_APP_ID }}
          private-key: ${{ secrets.ASSETS_DOWNLOADER_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
      - name: Setup Tests
        env:
          GITHUB_ASSETS_DOWNLOADER_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |-
          # go-kit runs "git config remote.origin.url" which fails if this isn't set
          git config --global --add safe.directory '*'

          git config --global url."https://git:${GITHUB_ASSETS_DOWNLOADER_TOKEN}@github.com/flypay".insteadOf "https://github.com/flypay" || true
          curl -L https://api.github.com/repos/flypay/monorepo-store/tarball/main -H "Authorization: Bearer $GITHUB_ASSETS_DOWNLOADER_TOKEN" -H "Accept:application/vnd.github.v3.raw" | tar -xz --strip-components=1 -C .
          mkdir capability-testing
          curl -L https://api.github.com/repos/flypay/capability-testing/tarball/master -H "Authorization: Bearer $GITHUB_ASSETS_DOWNLOADER_TOKEN" -H "Accept:application/vnd.github.v3.raw" | tar -xz --strip-components=1 -C ./capability-testing
          rm -rf $REPOSITORY
      - uses: actions/checkout@v4.1.0
        with:
          path: "${{ github.event.repository.name }}"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # need to fetch from prod, this role shouldn't be able to modify anything
          role-to-assume: ${{ vars.PRODUCTION_GHA_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Setup Monorepo
        run: |-
          # NOTE: /home/circleci/ here is correct and comes from cimg/go:1.22

          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install
          aws s3 cp s3://production-monorepo-assets/latest.tar.gz /tmp/latest.tar.gz
          mkdir -p /home/circleci/.cache/go-build /home/circleci/go/pkg/mod /tmp/latest
          tar -xf /tmp/latest.tar.gz --strip-components=2 -C /tmp/latest
          mv /tmp/latest/go-build/* /home/circleci/.cache/go-build
          sudo mv /tmp/latest/mod/* /home/circleci/go/pkg/mod
          rm -rf /tmp/latest /tmp/latest.tar.gz
          curl -L https://github.com/FiloSottile/mkcert/releases/download/v1.4.3/mkcert-v1.4.3-linux-amd64 > ./mkcert
          chmod +x ./mkcert
          ./mkcert -install
          pushd ./cmd/generate
          go run main.go
          popd
        shell: bash
      - name: Setup tunneling
        run: |-
          # Backwards compatibility with CircleCI.
          # CicleCI uses localhost: https://circleci.com/docs/using-docker/#using-multiple-docker-images
          # "When using a multi-container job setup, all containers run in a common network and every exposed port will be available on localhost."
          # GHA uses named hosts when running from a container https://docs.github.com/en/actions/using-containerized-services/about-service-containers#running-jobs-in-a-container:
          # "The hostname of the service container is automatically mapped to the label name"

          # Install socat
          sudo apt-get update
          sudo apt-get install socat

          # Add tunneling, code from: https://unix.stackexchange.com/a/187038
          socat tcp-listen:9000,reuseaddr,fork tcp:minio:9000 &
          socat tcp-listen:8000,reuseaddr,fork tcp:dynamodb-local:8000 &
          socat tcp-listen:8083,reuseaddr,fork tcp:aws-stepfunctions-local:8083 &
          socat tcp-listen:4100,reuseaddr,fork tcp:goaws:4100 &
      - name: Start all services
        run: |-
          echo "Making cert..."
          mkcert_caroot=$(./mkcert -CAROOT)
          echo "Finished making cert, starting service"

          # Building separately
          go build -o main cmd/local/main.go

          # Should run in the background (also need to redirect all terminal output as this causes the process to get detached)
          CONFIG_APP_ENVIRONMENT=staging GOLANG_PROTOBUF_REGISTRATION_CONFLICT=ignore ./main -ca-key="$mkcert_caroot/rootCA-key.pem" -ca-cert="$mkcert_caroot/rootCA.pem" -workers=1 2>/tmp/logs_error.txt >/tmp/logs.txt &
        timeout-minutes: 20
      - name: Wait for service to start
        run: until $(curl --output /dev/null --silent --fail http://localhost:8080/ping); do sleep 1; done
        timeout-minutes: 2
      - name: Run capability tests
        run: |-
          pushd capability-testing/

          cp .env.local .env
          go test ./captests/justeat/... -v -count=1 -timeout 20m -failfast
          go test ./captests/takeaway/... -v -count=1 -timeout 20m -failfast
          go test ./captests/skipthedishes/... -v -count=1 -timeout 20m -failfast

          popd
        shell: bash
        timeout-minutes: 20
      - name: Shutdown
        run: sleep 5
