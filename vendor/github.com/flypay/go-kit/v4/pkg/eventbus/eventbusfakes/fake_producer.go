// Code generated by counterfeiter. DO NOT EDIT.
package eventbusfakes

import (
	"context"
	"sync"

	"github.com/flypay/go-kit/v4/pkg/eventbus"
	"google.golang.org/protobuf/reflect/protoreflect"
)

type FakeProducer struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	EmitStub        func(context.Context, protoreflect.ProtoMessage, ...eventbus.Header) error
	emitMutex       sync.RWMutex
	emitArgsForCall []struct {
		arg1 context.Context
		arg2 protoreflect.ProtoMessage
		arg3 []eventbus.Header
	}
	emitReturns struct {
		result1 error
	}
	emitReturnsOnCall map[int]struct {
		result1 error
	}
	UseStub        func(eventbus.ProducerMiddleware)
	useMutex       sync.RWMutex
	useArgsForCall []struct {
		arg1 eventbus.ProducerMiddleware
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProducer) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProducer) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeProducer) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeProducer) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProducer) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProducer) Emit(arg1 context.Context, arg2 protoreflect.ProtoMessage, arg3 ...eventbus.Header) error {
	fake.emitMutex.Lock()
	ret, specificReturn := fake.emitReturnsOnCall[len(fake.emitArgsForCall)]
	fake.emitArgsForCall = append(fake.emitArgsForCall, struct {
		arg1 context.Context
		arg2 protoreflect.ProtoMessage
		arg3 []eventbus.Header
	}{arg1, arg2, arg3})
	stub := fake.EmitStub
	fakeReturns := fake.emitReturns
	fake.recordInvocation("Emit", []interface{}{arg1, arg2, arg3})
	fake.emitMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProducer) EmitCallCount() int {
	fake.emitMutex.RLock()
	defer fake.emitMutex.RUnlock()
	return len(fake.emitArgsForCall)
}

func (fake *FakeProducer) EmitCalls(stub func(context.Context, protoreflect.ProtoMessage, ...eventbus.Header) error) {
	fake.emitMutex.Lock()
	defer fake.emitMutex.Unlock()
	fake.EmitStub = stub
}

func (fake *FakeProducer) EmitArgsForCall(i int) (context.Context, protoreflect.ProtoMessage, []eventbus.Header) {
	fake.emitMutex.RLock()
	defer fake.emitMutex.RUnlock()
	argsForCall := fake.emitArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProducer) EmitReturns(result1 error) {
	fake.emitMutex.Lock()
	defer fake.emitMutex.Unlock()
	fake.EmitStub = nil
	fake.emitReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProducer) EmitReturnsOnCall(i int, result1 error) {
	fake.emitMutex.Lock()
	defer fake.emitMutex.Unlock()
	fake.EmitStub = nil
	if fake.emitReturnsOnCall == nil {
		fake.emitReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.emitReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProducer) Use(arg1 eventbus.ProducerMiddleware) {
	fake.useMutex.Lock()
	fake.useArgsForCall = append(fake.useArgsForCall, struct {
		arg1 eventbus.ProducerMiddleware
	}{arg1})
	stub := fake.UseStub
	fake.recordInvocation("Use", []interface{}{arg1})
	fake.useMutex.Unlock()
	if stub != nil {
		fake.UseStub(arg1)
	}
}

func (fake *FakeProducer) UseCallCount() int {
	fake.useMutex.RLock()
	defer fake.useMutex.RUnlock()
	return len(fake.useArgsForCall)
}

func (fake *FakeProducer) UseCalls(stub func(eventbus.ProducerMiddleware)) {
	fake.useMutex.Lock()
	defer fake.useMutex.Unlock()
	fake.UseStub = stub
}

func (fake *FakeProducer) UseArgsForCall(i int) eventbus.ProducerMiddleware {
	fake.useMutex.RLock()
	defer fake.useMutex.RUnlock()
	argsForCall := fake.useArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeProducer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.emitMutex.RLock()
	defer fake.emitMutex.RUnlock()
	fake.useMutex.RLock()
	defer fake.useMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProducer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ eventbus.Producer = new(FakeProducer)
