// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: menutype/menutype.proto

package menutype

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnergyUnit int32

const (
	EnergyUnit_UNIT_UNKNOWN EnergyUnit = 0
	EnergyUnit_KCAL         EnergyUnit = 1
	EnergyUnit_KJ           EnergyUnit = 2
)

// Enum value maps for EnergyUnit.
var (
	EnergyUnit_name = map[int32]string{
		0: "UNIT_UNKNOWN",
		1: "KCAL",
		2: "KJ",
	}
	EnergyUnit_value = map[string]int32{
		"UNIT_UNKNOWN": 0,
		"KCAL":         1,
		"KJ":           2,
	}
)

func (x EnergyUnit) Enum() *EnergyUnit {
	p := new(EnergyUnit)
	*p = x
	return p
}

func (x EnergyUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnergyUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_menutype_menutype_proto_enumTypes[0].Descriptor()
}

func (EnergyUnit) Type() protoreflect.EnumType {
	return &file_menutype_menutype_proto_enumTypes[0]
}

func (x EnergyUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnergyUnit.Descriptor instead.
func (EnergyUnit) EnumDescriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{0}
}

type Allergen int32

const (
	Allergen_ALLERGEN_UNSPECIFIED               Allergen = 0
	Allergen_ALLERGEN_CEREAL_UNSPECIFIED        Allergen = 1
	Allergen_ALLERGEN_CEREAL_WHEAT              Allergen = 2
	Allergen_ALLERGEN_CEREAL_RYE                Allergen = 3
	Allergen_ALLERGEN_CEREAL_BARLEY             Allergen = 4
	Allergen_ALLERGEN_CEREAL_OATS               Allergen = 5
	Allergen_ALLERGEN_CEREAL_SPELT              Allergen = 6
	Allergen_ALLERGEN_CEREAL_KAMUT              Allergen = 7
	Allergen_ALLERGEN_CRUSTACEANS               Allergen = 8
	Allergen_ALLERGEN_EGGS                      Allergen = 9
	Allergen_ALLERGEN_FISH                      Allergen = 10
	Allergen_ALLERGEN_PEANUTS                   Allergen = 11
	Allergen_ALLERGEN_SOYBEANS                  Allergen = 12
	Allergen_ALLERGEN_MILK                      Allergen = 13
	Allergen_ALLERGEN_NUTS_UNSPECIFIED          Allergen = 14
	Allergen_ALLERGEN_NUTS_ALMONDS              Allergen = 15
	Allergen_ALLERGEN_NUTS_HAZELNUTS            Allergen = 16
	Allergen_ALLERGEN_NUTS_WALNUTS              Allergen = 17
	Allergen_ALLERGEN_NUTS_CASHEWS              Allergen = 18
	Allergen_ALLERGEN_NUTS_PECAN                Allergen = 19
	Allergen_ALLERGEN_NUTS_BRAZIL               Allergen = 20
	Allergen_ALLERGEN_NUTS_PISTACHIO            Allergen = 21
	Allergen_ALLERGEN_NUTS_MACADAMIA            Allergen = 22
	Allergen_ALLERGEN_NUTS_QUEENSLAND           Allergen = 23
	Allergen_ALLERGEN_CELERY                    Allergen = 24
	Allergen_ALLERGEN_MUSTARD                   Allergen = 25
	Allergen_ALLERGEN_SESAME_SEEDS              Allergen = 26
	Allergen_ALLERGEN_SULPHUR_DIOXIDE_SULPHITES Allergen = 27
	Allergen_ALLERGEN_LUPIN                     Allergen = 28
	Allergen_ALLERGEN_MOLLUSCS                  Allergen = 29
)

// Enum value maps for Allergen.
var (
	Allergen_name = map[int32]string{
		0:  "ALLERGEN_UNSPECIFIED",
		1:  "ALLERGEN_CEREAL_UNSPECIFIED",
		2:  "ALLERGEN_CEREAL_WHEAT",
		3:  "ALLERGEN_CEREAL_RYE",
		4:  "ALLERGEN_CEREAL_BARLEY",
		5:  "ALLERGEN_CEREAL_OATS",
		6:  "ALLERGEN_CEREAL_SPELT",
		7:  "ALLERGEN_CEREAL_KAMUT",
		8:  "ALLERGEN_CRUSTACEANS",
		9:  "ALLERGEN_EGGS",
		10: "ALLERGEN_FISH",
		11: "ALLERGEN_PEANUTS",
		12: "ALLERGEN_SOYBEANS",
		13: "ALLERGEN_MILK",
		14: "ALLERGEN_NUTS_UNSPECIFIED",
		15: "ALLERGEN_NUTS_ALMONDS",
		16: "ALLERGEN_NUTS_HAZELNUTS",
		17: "ALLERGEN_NUTS_WALNUTS",
		18: "ALLERGEN_NUTS_CASHEWS",
		19: "ALLERGEN_NUTS_PECAN",
		20: "ALLERGEN_NUTS_BRAZIL",
		21: "ALLERGEN_NUTS_PISTACHIO",
		22: "ALLERGEN_NUTS_MACADAMIA",
		23: "ALLERGEN_NUTS_QUEENSLAND",
		24: "ALLERGEN_CELERY",
		25: "ALLERGEN_MUSTARD",
		26: "ALLERGEN_SESAME_SEEDS",
		27: "ALLERGEN_SULPHUR_DIOXIDE_SULPHITES",
		28: "ALLERGEN_LUPIN",
		29: "ALLERGEN_MOLLUSCS",
	}
	Allergen_value = map[string]int32{
		"ALLERGEN_UNSPECIFIED":               0,
		"ALLERGEN_CEREAL_UNSPECIFIED":        1,
		"ALLERGEN_CEREAL_WHEAT":              2,
		"ALLERGEN_CEREAL_RYE":                3,
		"ALLERGEN_CEREAL_BARLEY":             4,
		"ALLERGEN_CEREAL_OATS":               5,
		"ALLERGEN_CEREAL_SPELT":              6,
		"ALLERGEN_CEREAL_KAMUT":              7,
		"ALLERGEN_CRUSTACEANS":               8,
		"ALLERGEN_EGGS":                      9,
		"ALLERGEN_FISH":                      10,
		"ALLERGEN_PEANUTS":                   11,
		"ALLERGEN_SOYBEANS":                  12,
		"ALLERGEN_MILK":                      13,
		"ALLERGEN_NUTS_UNSPECIFIED":          14,
		"ALLERGEN_NUTS_ALMONDS":              15,
		"ALLERGEN_NUTS_HAZELNUTS":            16,
		"ALLERGEN_NUTS_WALNUTS":              17,
		"ALLERGEN_NUTS_CASHEWS":              18,
		"ALLERGEN_NUTS_PECAN":                19,
		"ALLERGEN_NUTS_BRAZIL":               20,
		"ALLERGEN_NUTS_PISTACHIO":            21,
		"ALLERGEN_NUTS_MACADAMIA":            22,
		"ALLERGEN_NUTS_QUEENSLAND":           23,
		"ALLERGEN_CELERY":                    24,
		"ALLERGEN_MUSTARD":                   25,
		"ALLERGEN_SESAME_SEEDS":              26,
		"ALLERGEN_SULPHUR_DIOXIDE_SULPHITES": 27,
		"ALLERGEN_LUPIN":                     28,
		"ALLERGEN_MOLLUSCS":                  29,
	}
)

func (x Allergen) Enum() *Allergen {
	p := new(Allergen)
	*p = x
	return p
}

func (x Allergen) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Allergen) Descriptor() protoreflect.EnumDescriptor {
	return file_menutype_menutype_proto_enumTypes[1].Descriptor()
}

func (Allergen) Type() protoreflect.EnumType {
	return &file_menutype_menutype_proto_enumTypes[1]
}

func (x Allergen) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Allergen.Descriptor instead.
func (Allergen) EnumDescriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{1}
}

type Additive int32

const (
	Additive_ADDITIVE_UNSPECIFIED                                   Additive = 0
	Additive_ADDITIVE_COLORANT_UNSPECIFIED                          Additive = 1
	Additive_ADDITIVE_COLORANT_ADVERSE_EFFECT                       Additive = 2
	Additive_ADDITIVE_PRESERVATIVES_UNSPECIFIED                     Additive = 3
	Additive_ADDITIVE_PRESERVATIVES_NITRITE_CURING_SALT             Additive = 4
	Additive_ADDITIVE_PRESERVATIVES_NITRATE                         Additive = 5
	Additive_ADDITIVE_PRESERVATIVES_NITRATE_CURING_SALT_AND_NITRATE Additive = 6
	Additive_ADDITIVE_ANTIOXIDANT                                   Additive = 7
	Additive_ADDITIVE_FLAVOURE_ENHANCER                             Additive = 8
	Additive_ADDITIVE_SULFITES                                      Additive = 9
	Additive_ADDITIVE_BLACKENED                                     Additive = 10
	Additive_ADDITIVE_WAXED                                         Additive = 11
	Additive_ADDITIVE_PHOSPHATE                                     Additive = 12
	Additive_ADDITIVE_SWEETENER_UNSPECIFIED                         Additive = 13
	Additive_ADDITIVE_SWEETENER_PHENYLALANINE                       Additive = 14
	Additive_ADDITIVE_SWEETENER_LAXATIVE                            Additive = 15
	Additive_ADDITIVE_CAFFEINE_UNSPECIFIED                          Additive = 16
	Additive_ADDITIVE_CAFFEINE_HIGH_CAFFEINE                        Additive = 17
	Additive_ADDITIVE_CAFFEINE_CAFFEINE                             Additive = 18
	Additive_ADDITIVE_QUININE                                       Additive = 19
	Additive_ADDITIVE_GENETICALLY_MODIFIED                          Additive = 20
	Additive_ADDITIVE_ACIDIFIERS                                    Additive = 21
	Additive_ADDITIVE_STABILISERS                                   Additive = 22
	Additive_ADDITIVE_PROTEIN_UNSPECIFIED                           Additive = 23
	Additive_ADDITIVE_PROTEIN_MILK_PROTEIN                          Additive = 24
	Additive_ADDITIVE_PROTEIN_STARCH                                Additive = 25
	Additive_ADDITIVE_PROTEIN_EGG_WHITE                             Additive = 26
)

// Enum value maps for Additive.
var (
	Additive_name = map[int32]string{
		0:  "ADDITIVE_UNSPECIFIED",
		1:  "ADDITIVE_COLORANT_UNSPECIFIED",
		2:  "ADDITIVE_COLORANT_ADVERSE_EFFECT",
		3:  "ADDITIVE_PRESERVATIVES_UNSPECIFIED",
		4:  "ADDITIVE_PRESERVATIVES_NITRITE_CURING_SALT",
		5:  "ADDITIVE_PRESERVATIVES_NITRATE",
		6:  "ADDITIVE_PRESERVATIVES_NITRATE_CURING_SALT_AND_NITRATE",
		7:  "ADDITIVE_ANTIOXIDANT",
		8:  "ADDITIVE_FLAVOURE_ENHANCER",
		9:  "ADDITIVE_SULFITES",
		10: "ADDITIVE_BLACKENED",
		11: "ADDITIVE_WAXED",
		12: "ADDITIVE_PHOSPHATE",
		13: "ADDITIVE_SWEETENER_UNSPECIFIED",
		14: "ADDITIVE_SWEETENER_PHENYLALANINE",
		15: "ADDITIVE_SWEETENER_LAXATIVE",
		16: "ADDITIVE_CAFFEINE_UNSPECIFIED",
		17: "ADDITIVE_CAFFEINE_HIGH_CAFFEINE",
		18: "ADDITIVE_CAFFEINE_CAFFEINE",
		19: "ADDITIVE_QUININE",
		20: "ADDITIVE_GENETICALLY_MODIFIED",
		21: "ADDITIVE_ACIDIFIERS",
		22: "ADDITIVE_STABILISERS",
		23: "ADDITIVE_PROTEIN_UNSPECIFIED",
		24: "ADDITIVE_PROTEIN_MILK_PROTEIN",
		25: "ADDITIVE_PROTEIN_STARCH",
		26: "ADDITIVE_PROTEIN_EGG_WHITE",
	}
	Additive_value = map[string]int32{
		"ADDITIVE_UNSPECIFIED":                                   0,
		"ADDITIVE_COLORANT_UNSPECIFIED":                          1,
		"ADDITIVE_COLORANT_ADVERSE_EFFECT":                       2,
		"ADDITIVE_PRESERVATIVES_UNSPECIFIED":                     3,
		"ADDITIVE_PRESERVATIVES_NITRITE_CURING_SALT":             4,
		"ADDITIVE_PRESERVATIVES_NITRATE":                         5,
		"ADDITIVE_PRESERVATIVES_NITRATE_CURING_SALT_AND_NITRATE": 6,
		"ADDITIVE_ANTIOXIDANT":                                   7,
		"ADDITIVE_FLAVOURE_ENHANCER":                             8,
		"ADDITIVE_SULFITES":                                      9,
		"ADDITIVE_BLACKENED":                                     10,
		"ADDITIVE_WAXED":                                         11,
		"ADDITIVE_PHOSPHATE":                                     12,
		"ADDITIVE_SWEETENER_UNSPECIFIED":                         13,
		"ADDITIVE_SWEETENER_PHENYLALANINE":                       14,
		"ADDITIVE_SWEETENER_LAXATIVE":                            15,
		"ADDITIVE_CAFFEINE_UNSPECIFIED":                          16,
		"ADDITIVE_CAFFEINE_HIGH_CAFFEINE":                        17,
		"ADDITIVE_CAFFEINE_CAFFEINE":                             18,
		"ADDITIVE_QUININE":                                       19,
		"ADDITIVE_GENETICALLY_MODIFIED":                          20,
		"ADDITIVE_ACIDIFIERS":                                    21,
		"ADDITIVE_STABILISERS":                                   22,
		"ADDITIVE_PROTEIN_UNSPECIFIED":                           23,
		"ADDITIVE_PROTEIN_MILK_PROTEIN":                          24,
		"ADDITIVE_PROTEIN_STARCH":                                25,
		"ADDITIVE_PROTEIN_EGG_WHITE":                             26,
	}
)

func (x Additive) Enum() *Additive {
	p := new(Additive)
	*p = x
	return p
}

func (x Additive) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Additive) Descriptor() protoreflect.EnumDescriptor {
	return file_menutype_menutype_proto_enumTypes[2].Descriptor()
}

func (Additive) Type() protoreflect.EnumType {
	return &file_menutype_menutype_proto_enumTypes[2]
}

func (x Additive) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Additive.Descriptor instead.
func (Additive) EnumDescriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{2}
}

type Item_Spiciness int32

const (
	Item_UNKNOWN  Item_Spiciness = 0
	Item_MILD     Item_Spiciness = 1
	Item_MEDIUM   Item_Spiciness = 2
	Item_HOT      Item_Spiciness = 3
	Item_VERY_HOT Item_Spiciness = 4
)

// Enum value maps for Item_Spiciness.
var (
	Item_Spiciness_name = map[int32]string{
		0: "UNKNOWN",
		1: "MILD",
		2: "MEDIUM",
		3: "HOT",
		4: "VERY_HOT",
	}
	Item_Spiciness_value = map[string]int32{
		"UNKNOWN":  0,
		"MILD":     1,
		"MEDIUM":   2,
		"HOT":      3,
		"VERY_HOT": 4,
	}
)

func (x Item_Spiciness) Enum() *Item_Spiciness {
	p := new(Item_Spiciness)
	*p = x
	return p
}

func (x Item_Spiciness) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Item_Spiciness) Descriptor() protoreflect.EnumDescriptor {
	return file_menutype_menutype_proto_enumTypes[3].Descriptor()
}

func (Item_Spiciness) Type() protoreflect.EnumType {
	return &file_menutype_menutype_proto_enumTypes[3]
}

func (x Item_Spiciness) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Item_Spiciness.Descriptor instead.
func (Item_Spiciness) EnumDescriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{0, 0}
}

type Item_DietaryRestriction int32

const (
	Item_NONE       Item_DietaryRestriction = 0
	Item_VEGETARIAN Item_DietaryRestriction = 1
	Item_VEGAN      Item_DietaryRestriction = 2
)

// Enum value maps for Item_DietaryRestriction.
var (
	Item_DietaryRestriction_name = map[int32]string{
		0: "NONE",
		1: "VEGETARIAN",
		2: "VEGAN",
	}
	Item_DietaryRestriction_value = map[string]int32{
		"NONE":       0,
		"VEGETARIAN": 1,
		"VEGAN":      2,
	}
)

func (x Item_DietaryRestriction) Enum() *Item_DietaryRestriction {
	p := new(Item_DietaryRestriction)
	*p = x
	return p
}

func (x Item_DietaryRestriction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Item_DietaryRestriction) Descriptor() protoreflect.EnumDescriptor {
	return file_menutype_menutype_proto_enumTypes[4].Descriptor()
}

func (Item_DietaryRestriction) Type() protoreflect.EnumType {
	return &file_menutype_menutype_proto_enumTypes[4]
}

func (x Item_DietaryRestriction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Item_DietaryRestriction.Descriptor instead.
func (Item_DietaryRestriction) EnumDescriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{0, 1}
}

type Caffeine_GroceryUnit int32

const (
	// Deprecated: Do not use.
	Caffeine_CAF_MILLIGRAMS Caffeine_GroceryUnit = 0
	// Deprecated: Do not use.
	Caffeine_CAF_GRAMS       Caffeine_GroceryUnit = 1
	Caffeine_UNIT_MILLIGRAMS Caffeine_GroceryUnit = 2
	Caffeine_UNIT_GRAMS      Caffeine_GroceryUnit = 3
)

// Enum value maps for Caffeine_GroceryUnit.
var (
	Caffeine_GroceryUnit_name = map[int32]string{
		0: "CAF_MILLIGRAMS",
		1: "CAF_GRAMS",
		2: "UNIT_MILLIGRAMS",
		3: "UNIT_GRAMS",
	}
	Caffeine_GroceryUnit_value = map[string]int32{
		"CAF_MILLIGRAMS":  0,
		"CAF_GRAMS":       1,
		"UNIT_MILLIGRAMS": 2,
		"UNIT_GRAMS":      3,
	}
)

func (x Caffeine_GroceryUnit) Enum() *Caffeine_GroceryUnit {
	p := new(Caffeine_GroceryUnit)
	*p = x
	return p
}

func (x Caffeine_GroceryUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Caffeine_GroceryUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_menutype_menutype_proto_enumTypes[5].Descriptor()
}

func (Caffeine_GroceryUnit) Type() protoreflect.EnumType {
	return &file_menutype_menutype_proto_enumTypes[5]
}

func (x Caffeine_GroceryUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Caffeine_GroceryUnit.Descriptor instead.
func (Caffeine_GroceryUnit) EnumDescriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{2, 0}
}

type Volume_GroceryUnit int32

const (
	// Deprecated: Do not use.
	Volume_VOL_MILLILITRES Volume_GroceryUnit = 0
	// Deprecated: Do not use.
	Volume_VOL_LITRES       Volume_GroceryUnit = 1
	Volume_UNIT_MILLILITRES Volume_GroceryUnit = 2
	Volume_UNIT_LITRES      Volume_GroceryUnit = 3
	Volume_UNIT_GRAMS       Volume_GroceryUnit = 4
	Volume_UNIT_KILOGRAMS   Volume_GroceryUnit = 5
	Volume_UNIT_CENTILITRES Volume_GroceryUnit = 6
)

// Enum value maps for Volume_GroceryUnit.
var (
	Volume_GroceryUnit_name = map[int32]string{
		0: "VOL_MILLILITRES",
		1: "VOL_LITRES",
		2: "UNIT_MILLILITRES",
		3: "UNIT_LITRES",
		4: "UNIT_GRAMS",
		5: "UNIT_KILOGRAMS",
		6: "UNIT_CENTILITRES",
	}
	Volume_GroceryUnit_value = map[string]int32{
		"VOL_MILLILITRES":  0,
		"VOL_LITRES":       1,
		"UNIT_MILLILITRES": 2,
		"UNIT_LITRES":      3,
		"UNIT_GRAMS":       4,
		"UNIT_KILOGRAMS":   5,
		"UNIT_CENTILITRES": 6,
	}
)

func (x Volume_GroceryUnit) Enum() *Volume_GroceryUnit {
	p := new(Volume_GroceryUnit)
	*p = x
	return p
}

func (x Volume_GroceryUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Volume_GroceryUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_menutype_menutype_proto_enumTypes[6].Descriptor()
}

func (Volume_GroceryUnit) Type() protoreflect.EnumType {
	return &file_menutype_menutype_proto_enumTypes[6]
}

func (x Volume_GroceryUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Volume_GroceryUnit.Descriptor instead.
func (Volume_GroceryUnit) EnumDescriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{3, 0}
}

type Weight_GroceryUnit int32

const (
	// Deprecated: Do not use.
	Weight_WEIGHT_GRAMS Weight_GroceryUnit = 0
	// Deprecated: Do not use.
	Weight_WEIGHT_KILOGRAMS Weight_GroceryUnit = 1
	Weight_UNIT_GRAMS       Weight_GroceryUnit = 2
	Weight_UNIT_KILOGRAMS   Weight_GroceryUnit = 3
)

// Enum value maps for Weight_GroceryUnit.
var (
	Weight_GroceryUnit_name = map[int32]string{
		0: "WEIGHT_GRAMS",
		1: "WEIGHT_KILOGRAMS",
		2: "UNIT_GRAMS",
		3: "UNIT_KILOGRAMS",
	}
	Weight_GroceryUnit_value = map[string]int32{
		"WEIGHT_GRAMS":     0,
		"WEIGHT_KILOGRAMS": 1,
		"UNIT_GRAMS":       2,
		"UNIT_KILOGRAMS":   3,
	}
)

func (x Weight_GroceryUnit) Enum() *Weight_GroceryUnit {
	p := new(Weight_GroceryUnit)
	*p = x
	return p
}

func (x Weight_GroceryUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Weight_GroceryUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_menutype_menutype_proto_enumTypes[7].Descriptor()
}

func (Weight_GroceryUnit) Type() protoreflect.EnumType {
	return &file_menutype_menutype_proto_enumTypes[7]
}

func (x Weight_GroceryUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Weight_GroceryUnit.Descriptor instead.
func (Weight_GroceryUnit) EnumDescriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{4, 0}
}

type Deposit_Type int32

const (
	Deposit_NOT_SPECIFIED Deposit_Type = 0
	Deposit_SINGLE_USE    Deposit_Type = 1
	Deposit_MULTIPLE_USE  Deposit_Type = 2
)

// Enum value maps for Deposit_Type.
var (
	Deposit_Type_name = map[int32]string{
		0: "NOT_SPECIFIED",
		1: "SINGLE_USE",
		2: "MULTIPLE_USE",
	}
	Deposit_Type_value = map[string]int32{
		"NOT_SPECIFIED": 0,
		"SINGLE_USE":    1,
		"MULTIPLE_USE":  2,
	}
)

func (x Deposit_Type) Enum() *Deposit_Type {
	p := new(Deposit_Type)
	*p = x
	return p
}

func (x Deposit_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Deposit_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_menutype_menutype_proto_enumTypes[8].Descriptor()
}

func (Deposit_Type) Type() protoreflect.EnumType {
	return &file_menutype_menutype_proto_enumTypes[8]
}

func (x Deposit_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Deposit_Type.Descriptor instead.
func (Deposit_Type) EnumDescriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{5, 0}
}

type Storage_Type int32

const (
	// Deprecated: Do not use.
	Storage_FROZEN Storage_Type = 0
	// Deprecated: Do not use.
	Storage_COOL_DRY              Storage_Type = 1
	Storage_STORAGE_TYPE_FROZEN   Storage_Type = 2
	Storage_STORAGE_TYPE_COOL_DRY Storage_Type = 3
)

// Enum value maps for Storage_Type.
var (
	Storage_Type_name = map[int32]string{
		0: "FROZEN",
		1: "COOL_DRY",
		2: "STORAGE_TYPE_FROZEN",
		3: "STORAGE_TYPE_COOL_DRY",
	}
	Storage_Type_value = map[string]int32{
		"FROZEN":                0,
		"COOL_DRY":              1,
		"STORAGE_TYPE_FROZEN":   2,
		"STORAGE_TYPE_COOL_DRY": 3,
	}
)

func (x Storage_Type) Enum() *Storage_Type {
	p := new(Storage_Type)
	*p = x
	return p
}

func (x Storage_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Storage_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_menutype_menutype_proto_enumTypes[9].Descriptor()
}

func (Storage_Type) Type() protoreflect.EnumType {
	return &file_menutype_menutype_proto_enumTypes[9]
}

func (x Storage_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Storage_Type.Descriptor instead.
func (Storage_Type) EnumDescriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{7, 0}
}

type Category_Type int32

const (
	Category_NOT_SPECIFIED Category_Type = 0
	Category_ROOT          Category_Type = 1
	Category_SUBCATEGORY   Category_Type = 2
)

// Enum value maps for Category_Type.
var (
	Category_Type_name = map[int32]string{
		0: "NOT_SPECIFIED",
		1: "ROOT",
		2: "SUBCATEGORY",
	}
	Category_Type_value = map[string]int32{
		"NOT_SPECIFIED": 0,
		"ROOT":          1,
		"SUBCATEGORY":   2,
	}
)

func (x Category_Type) Enum() *Category_Type {
	p := new(Category_Type)
	*p = x
	return p
}

func (x Category_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Category_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_menutype_menutype_proto_enumTypes[10].Descriptor()
}

func (Category_Type) Type() protoreflect.EnumType {
	return &file_menutype_menutype_proto_enumTypes[10]
}

func (x Category_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Category_Type.Descriptor instead.
func (Category_Type) EnumDescriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{19, 0}
}

type Menu_Type int32

const (
	Menu_ANY        Menu_Type = 0
	Menu_COLLECTION Menu_Type = 1
	Menu_EAT_IN     Menu_Type = 2
	Menu_DELIVERY   Menu_Type = 3
)

// Enum value maps for Menu_Type.
var (
	Menu_Type_name = map[int32]string{
		0: "ANY",
		1: "COLLECTION",
		2: "EAT_IN",
		3: "DELIVERY",
	}
	Menu_Type_value = map[string]int32{
		"ANY":        0,
		"COLLECTION": 1,
		"EAT_IN":     2,
		"DELIVERY":   3,
	}
)

func (x Menu_Type) Enum() *Menu_Type {
	p := new(Menu_Type)
	*p = x
	return p
}

func (x Menu_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Menu_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_menutype_menutype_proto_enumTypes[11].Descriptor()
}

func (Menu_Type) Type() protoreflect.EnumType {
	return &file_menutype_menutype_proto_enumTypes[11]
}

func (x Menu_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Menu_Type.Descriptor instead.
func (Menu_Type) EnumDescriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{20, 0}
}

type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string        `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Plu         string        `protobuf:"bytes,3,opt,name=plu,proto3" json:"plu,omitempty"`
	Modifiers   []*Modifier   `protobuf:"bytes,4,rep,name=modifiers,proto3" json:"modifiers,omitempty"`
	Includes    []*Include    `protobuf:"bytes,5,rep,name=includes,proto3" json:"includes,omitempty"`
	Price       int32         `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
	Ingredients []*Ingredient `protobuf:"bytes,7,rep,name=ingredients,proto3" json:"ingredients,omitempty"`
	// Optional unique reference. Used to identify items when plu's cannot be used
	// because they are different across different menus
	Reference           string                    `protobuf:"bytes,8,opt,name=reference,proto3" json:"reference,omitempty"`
	Swap                *Swap                     `protobuf:"bytes,9,opt,name=swap,proto3" json:"swap,omitempty"`
	Gallery             []*Image                  `protobuf:"bytes,10,rep,name=gallery,proto3" json:"gallery,omitempty"`
	OutOfStock          bool                      `protobuf:"varint,11,opt,name=out_of_stock,json=outOfStock,proto3" json:"out_of_stock,omitempty"`
	Uuid                string                    `protobuf:"bytes,12,opt,name=uuid,proto3" json:"uuid,omitempty"`
	TaxCategory         string                    `protobuf:"bytes,13,opt,name=tax_category,json=taxCategory,proto3" json:"tax_category,omitempty"`
	Portions            []*Portion                `protobuf:"bytes,14,rep,name=portions,proto3" json:"portions,omitempty"`
	IsAlcoholic         bool                      `protobuf:"varint,15,opt,name=is_alcoholic,json=isAlcoholic,proto3" json:"is_alcoholic,omitempty"`
	Spiciness           Item_Spiciness            `protobuf:"varint,16,opt,name=spiciness,proto3,enum=menutype.Item_Spiciness" json:"spiciness,omitempty"`
	DietaryRestrictions []Item_DietaryRestriction `protobuf:"varint,17,rep,packed,name=dietary_restrictions,json=dietaryRestrictions,proto3,enum=menutype.Item_DietaryRestriction" json:"dietary_restrictions,omitempty"`
	Allergens           []Allergen                `protobuf:"varint,18,rep,packed,name=allergens,proto3,enum=menutype.Allergen" json:"allergens,omitempty"`
	Additives           []Additive                `protobuf:"varint,19,rep,packed,name=additives,proto3,enum=menutype.Additive" json:"additives,omitempty"`
	ALaCartePrice       int32                     `protobuf:"varint,20,opt,name=a_la_carte_price,json=aLaCartePrice,proto3" json:"a_la_carte_price,omitempty"`
	UnitCount           int32                     `protobuf:"varint,21,opt,name=unit_count,json=unitCount,proto3" json:"unit_count,omitempty"`
	Servings            int32                     `protobuf:"varint,22,opt,name=servings,proto3" json:"servings,omitempty"`
	// Deprecated: Do not use.
	Energy               *Item_Energy          `protobuf:"bytes,23,opt,name=energy,proto3" json:"energy,omitempty"`
	NutritionalInfo      *NutritionalInfo      `protobuf:"bytes,24,opt,name=nutritional_info,json=nutritionalInfo,proto3" json:"nutritional_info,omitempty"`
	NutritionalInfoRange *NutritionalInfoRange `protobuf:"bytes,25,opt,name=nutritional_info_range,json=nutritionalInfoRange,proto3" json:"nutritional_info_range,omitempty"`
	ServingsRange        *Range                `protobuf:"bytes,26,opt,name=servings_range,json=servingsRange,proto3" json:"servings_range,omitempty"`
	TaxPercentage        float32               `protobuf:"fixed32,27,opt,name=tax_percentage,json=taxPercentage,proto3" json:"tax_percentage,omitempty"`
	Caffeine             *Caffeine             `protobuf:"bytes,28,opt,name=caffeine,proto3" json:"caffeine,omitempty"`
	AlcoholPercentage    float32               `protobuf:"fixed32,29,opt,name=alcohol_percentage,json=alcoholPercentage,proto3" json:"alcohol_percentage,omitempty"`
	Volume               *Volume               `protobuf:"bytes,30,opt,name=volume,proto3" json:"volume,omitempty"`
	Weight               *Weight               `protobuf:"bytes,31,opt,name=weight,proto3" json:"weight,omitempty"`
	Deposit              *Deposit              `protobuf:"bytes,32,opt,name=deposit,proto3" json:"deposit,omitempty"`
	Manufacturer         *Manufacturer         `protobuf:"bytes,33,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Storage              *Storage              `protobuf:"bytes,34,opt,name=storage,proto3" json:"storage,omitempty"`
	Gtin                 string                `protobuf:"bytes,35,opt,name=gtin,proto3" json:"gtin,omitempty"`
	ComboGroups          []*ComboGroup         `protobuf:"bytes,36,rep,name=combo_groups,json=comboGroups,proto3" json:"combo_groups,omitempty"`
	Pick                 *Modifier_Pick        `protobuf:"bytes,37,opt,name=pick,proto3" json:"pick,omitempty"`                                             // Optional. Only relevant when Item is used as Option within a Modifier.
	ParentItemName       string                `protobuf:"bytes,38,opt,name=parent_item_name,json=parentItemName,proto3" json:"parent_item_name,omitempty"` // Optional. Only relevant to Skip and cannot be used if Item is used as Option within a Modifier.
	DefaultOption        *DefaultOption        `protobuf:"bytes,39,opt,name=default_option,json=defaultOption,proto3" json:"default_option,omitempty"`      // Optional. Only relevant when Item is used as Option within a Modifier.
	PriceOverride        []*PriceOverride      `protobuf:"bytes,40,rep,name=price_override,json=priceOverride,proto3" json:"price_override,omitempty"`      // PriceOverride defines an effective price which should be used instead of the price value, when defined and "now" is between `[effective_from, expires_at)` (inclusive of the `effective_from` time, exclusive of the `expires_at` time)
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{0}
}

func (x *Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Item) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Item) GetPlu() string {
	if x != nil {
		return x.Plu
	}
	return ""
}

func (x *Item) GetModifiers() []*Modifier {
	if x != nil {
		return x.Modifiers
	}
	return nil
}

func (x *Item) GetIncludes() []*Include {
	if x != nil {
		return x.Includes
	}
	return nil
}

func (x *Item) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Item) GetIngredients() []*Ingredient {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

func (x *Item) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *Item) GetSwap() *Swap {
	if x != nil {
		return x.Swap
	}
	return nil
}

func (x *Item) GetGallery() []*Image {
	if x != nil {
		return x.Gallery
	}
	return nil
}

func (x *Item) GetOutOfStock() bool {
	if x != nil {
		return x.OutOfStock
	}
	return false
}

func (x *Item) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Item) GetTaxCategory() string {
	if x != nil {
		return x.TaxCategory
	}
	return ""
}

func (x *Item) GetPortions() []*Portion {
	if x != nil {
		return x.Portions
	}
	return nil
}

func (x *Item) GetIsAlcoholic() bool {
	if x != nil {
		return x.IsAlcoholic
	}
	return false
}

func (x *Item) GetSpiciness() Item_Spiciness {
	if x != nil {
		return x.Spiciness
	}
	return Item_UNKNOWN
}

func (x *Item) GetDietaryRestrictions() []Item_DietaryRestriction {
	if x != nil {
		return x.DietaryRestrictions
	}
	return nil
}

func (x *Item) GetAllergens() []Allergen {
	if x != nil {
		return x.Allergens
	}
	return nil
}

func (x *Item) GetAdditives() []Additive {
	if x != nil {
		return x.Additives
	}
	return nil
}

func (x *Item) GetALaCartePrice() int32 {
	if x != nil {
		return x.ALaCartePrice
	}
	return 0
}

func (x *Item) GetUnitCount() int32 {
	if x != nil {
		return x.UnitCount
	}
	return 0
}

func (x *Item) GetServings() int32 {
	if x != nil {
		return x.Servings
	}
	return 0
}

// Deprecated: Do not use.
func (x *Item) GetEnergy() *Item_Energy {
	if x != nil {
		return x.Energy
	}
	return nil
}

func (x *Item) GetNutritionalInfo() *NutritionalInfo {
	if x != nil {
		return x.NutritionalInfo
	}
	return nil
}

func (x *Item) GetNutritionalInfoRange() *NutritionalInfoRange {
	if x != nil {
		return x.NutritionalInfoRange
	}
	return nil
}

func (x *Item) GetServingsRange() *Range {
	if x != nil {
		return x.ServingsRange
	}
	return nil
}

func (x *Item) GetTaxPercentage() float32 {
	if x != nil {
		return x.TaxPercentage
	}
	return 0
}

func (x *Item) GetCaffeine() *Caffeine {
	if x != nil {
		return x.Caffeine
	}
	return nil
}

func (x *Item) GetAlcoholPercentage() float32 {
	if x != nil {
		return x.AlcoholPercentage
	}
	return 0
}

func (x *Item) GetVolume() *Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *Item) GetWeight() *Weight {
	if x != nil {
		return x.Weight
	}
	return nil
}

func (x *Item) GetDeposit() *Deposit {
	if x != nil {
		return x.Deposit
	}
	return nil
}

func (x *Item) GetManufacturer() *Manufacturer {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *Item) GetStorage() *Storage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *Item) GetGtin() string {
	if x != nil {
		return x.Gtin
	}
	return ""
}

func (x *Item) GetComboGroups() []*ComboGroup {
	if x != nil {
		return x.ComboGroups
	}
	return nil
}

func (x *Item) GetPick() *Modifier_Pick {
	if x != nil {
		return x.Pick
	}
	return nil
}

func (x *Item) GetParentItemName() string {
	if x != nil {
		return x.ParentItemName
	}
	return ""
}

func (x *Item) GetDefaultOption() *DefaultOption {
	if x != nil {
		return x.DefaultOption
	}
	return nil
}

func (x *Item) GetPriceOverride() []*PriceOverride {
	if x != nil {
		return x.PriceOverride
	}
	return nil
}

// PriceOverride defines an effective price which should be used instead of the price value, when defined and "now" is between `[effective_from, expires_at)` (inclusive of the `effective_from` time, exclusive of the `expires_at` time)
type PriceOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiscountPrice int32 `protobuf:"varint,1,opt,name=discount_price,json=discountPrice,proto3" json:"discount_price,omitempty"` // Sticker/display price
	RegularPrice  int32 `protobuf:"varint,2,opt,name=regular_price,json=regularPrice,proto3" json:"regular_price,omitempty"`    // Regular/original/base/strikethrough price
	EffectiveFrom int64 `protobuf:"varint,3,opt,name=effective_from,json=effectiveFrom,proto3" json:"effective_from,omitempty"` // Unix epoch timestamp when the price begins being effective (inclusive), when undefined/zero treat as always effective
	ExpiresAt     int64 `protobuf:"varint,4,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`             // Unix epoch timestamp when the price ceases being effective (exclusive), when undefined/zero treat as never expires
}

func (x *PriceOverride) Reset() {
	*x = PriceOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceOverride) ProtoMessage() {}

func (x *PriceOverride) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceOverride.ProtoReflect.Descriptor instead.
func (*PriceOverride) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{1}
}

func (x *PriceOverride) GetDiscountPrice() int32 {
	if x != nil {
		return x.DiscountPrice
	}
	return 0
}

func (x *PriceOverride) GetRegularPrice() int32 {
	if x != nil {
		return x.RegularPrice
	}
	return 0
}

func (x *PriceOverride) GetEffectiveFrom() int64 {
	if x != nil {
		return x.EffectiveFrom
	}
	return 0
}

func (x *PriceOverride) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

type Caffeine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	UnitName string               `protobuf:"bytes,1,opt,name=unit_name,json=unitName,proto3" json:"unit_name,omitempty"`
	Value    float32              `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
	Unit     Caffeine_GroceryUnit `protobuf:"varint,3,opt,name=unit,proto3,enum=menutype.Caffeine_GroceryUnit" json:"unit,omitempty"`
}

func (x *Caffeine) Reset() {
	*x = Caffeine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Caffeine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Caffeine) ProtoMessage() {}

func (x *Caffeine) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Caffeine.ProtoReflect.Descriptor instead.
func (*Caffeine) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{2}
}

// Deprecated: Do not use.
func (x *Caffeine) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *Caffeine) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Caffeine) GetUnit() Caffeine_GroceryUnit {
	if x != nil {
		return x.Unit
	}
	return Caffeine_CAF_MILLIGRAMS
}

type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	UnitName   string             `protobuf:"bytes,1,opt,name=unit_name,json=unitName,proto3" json:"unit_name,omitempty"`
	GrossValue float32            `protobuf:"fixed32,2,opt,name=gross_value,json=grossValue,proto3" json:"gross_value,omitempty"`
	NetValue   float32            `protobuf:"fixed32,3,opt,name=net_value,json=netValue,proto3" json:"net_value,omitempty"`
	Unit       Volume_GroceryUnit `protobuf:"varint,4,opt,name=unit,proto3,enum=menutype.Volume_GroceryUnit" json:"unit,omitempty"`
}

func (x *Volume) Reset() {
	*x = Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{3}
}

// Deprecated: Do not use.
func (x *Volume) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *Volume) GetGrossValue() float32 {
	if x != nil {
		return x.GrossValue
	}
	return 0
}

func (x *Volume) GetNetValue() float32 {
	if x != nil {
		return x.NetValue
	}
	return 0
}

func (x *Volume) GetUnit() Volume_GroceryUnit {
	if x != nil {
		return x.Unit
	}
	return Volume_VOL_MILLILITRES
}

type Weight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	UnitName   string             `protobuf:"bytes,1,opt,name=unit_name,json=unitName,proto3" json:"unit_name,omitempty"`
	GrossValue int32              `protobuf:"varint,2,opt,name=gross_value,json=grossValue,proto3" json:"gross_value,omitempty"`
	NetValue   int32              `protobuf:"varint,3,opt,name=net_value,json=netValue,proto3" json:"net_value,omitempty"`
	Unit       Weight_GroceryUnit `protobuf:"varint,4,opt,name=unit,proto3,enum=menutype.Weight_GroceryUnit" json:"unit,omitempty"`
}

func (x *Weight) Reset() {
	*x = Weight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Weight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Weight) ProtoMessage() {}

func (x *Weight) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Weight.ProtoReflect.Descriptor instead.
func (*Weight) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{4}
}

// Deprecated: Do not use.
func (x *Weight) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *Weight) GetGrossValue() int32 {
	if x != nil {
		return x.GrossValue
	}
	return 0
}

func (x *Weight) GetNetValue() int32 {
	if x != nil {
		return x.NetValue
	}
	return 0
}

func (x *Weight) GetUnit() Weight_GroceryUnit {
	if x != nil {
		return x.Unit
	}
	return Weight_WEIGHT_GRAMS
}

type Deposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 Deposit_Type `protobuf:"varint,1,opt,name=type,proto3,enum=menutype.Deposit_Type" json:"type,omitempty"`
	Amount               int32        `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	IncludedInTotalPrice bool         `protobuf:"varint,3,opt,name=included_in_total_price,json=includedInTotalPrice,proto3" json:"included_in_total_price,omitempty"`
}

func (x *Deposit) Reset() {
	*x = Deposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deposit) ProtoMessage() {}

func (x *Deposit) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deposit.ProtoReflect.Descriptor instead.
func (*Deposit) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{5}
}

func (x *Deposit) GetType() Deposit_Type {
	if x != nil {
		return x.Type
	}
	return Deposit_NOT_SPECIFIED
}

func (x *Deposit) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Deposit) GetIncludedInTotalPrice() bool {
	if x != nil {
		return x.IncludedInTotalPrice
	}
	return false
}

type Manufacturer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Brand             string `protobuf:"bytes,2,opt,name=brand,proto3" json:"brand,omitempty"`
	CountryOfOrigin   string `protobuf:"bytes,3,opt,name=country_of_origin,json=countryOfOrigin,proto3" json:"country_of_origin,omitempty"`
	AdditionalDetails string `protobuf:"bytes,4,opt,name=additional_details,json=additionalDetails,proto3" json:"additional_details,omitempty"`
}

func (x *Manufacturer) Reset() {
	*x = Manufacturer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Manufacturer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Manufacturer) ProtoMessage() {}

func (x *Manufacturer) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Manufacturer.ProtoReflect.Descriptor instead.
func (*Manufacturer) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{6}
}

func (x *Manufacturer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Manufacturer) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *Manufacturer) GetCountryOfOrigin() string {
	if x != nil {
		return x.CountryOfOrigin
	}
	return ""
}

func (x *Manufacturer) GetAdditionalDetails() string {
	if x != nil {
		return x.AdditionalDetails
	}
	return ""
}

type Storage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              Storage_Type `protobuf:"varint,1,opt,name=type,proto3,enum=menutype.Storage_Type" json:"type,omitempty"`
	AdditionalDetails string       `protobuf:"bytes,2,opt,name=additional_details,json=additionalDetails,proto3" json:"additional_details,omitempty"`
}

func (x *Storage) Reset() {
	*x = Storage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Storage) ProtoMessage() {}

func (x *Storage) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Storage.ProtoReflect.Descriptor instead.
func (*Storage) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{7}
}

func (x *Storage) GetType() Storage_Type {
	if x != nil {
		return x.Type
	}
	return Storage_FROZEN
}

func (x *Storage) GetAdditionalDetails() string {
	if x != nil {
		return x.AdditionalDetails
	}
	return ""
}

type ComboGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Deprecated: Do not use.
	Description string           `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Options     []*ComboOption   `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
	Pick        *ComboGroup_Pick `protobuf:"bytes,4,opt,name=pick,proto3" json:"pick,omitempty"`
}

func (x *ComboGroup) Reset() {
	*x = ComboGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComboGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComboGroup) ProtoMessage() {}

func (x *ComboGroup) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComboGroup.ProtoReflect.Descriptor instead.
func (*ComboGroup) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{8}
}

func (x *ComboGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Deprecated: Do not use.
func (x *ComboGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ComboGroup) GetOptions() []*ComboOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ComboGroup) GetPick() *ComboGroup_Pick {
	if x != nil {
		return x.Pick
	}
	return nil
}

type ComboOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid  string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`    // references the UUID of a regular menu item
	Price int32  `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"` // overrides regular item price
	Plu   string `protobuf:"bytes,3,opt,name=plu,proto3" json:"plu,omitempty"`
}

func (x *ComboOption) Reset() {
	*x = ComboOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComboOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComboOption) ProtoMessage() {}

func (x *ComboOption) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComboOption.ProtoReflect.Descriptor instead.
func (*ComboOption) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{9}
}

func (x *ComboOption) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ComboOption) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ComboOption) GetPlu() string {
	if x != nil {
		return x.Plu
	}
	return ""
}

type Swap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Options []*SwapOption `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *Swap) Reset() {
	*x = Swap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Swap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Swap) ProtoMessage() {}

func (x *Swap) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Swap.ProtoReflect.Descriptor instead.
func (*Swap) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{10}
}

func (x *Swap) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Swap) GetOptions() []*SwapOption {
	if x != nil {
		return x.Options
	}
	return nil
}

type SwapOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Plu           string           `protobuf:"bytes,2,opt,name=plu,proto3" json:"plu,omitempty"`
	Reference     string           `protobuf:"bytes,3,opt,name=reference,proto3" json:"reference,omitempty"`
	Price         int32            `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	OutOfStock    bool             `protobuf:"varint,5,opt,name=out_of_stock,json=outOfStock,proto3" json:"out_of_stock,omitempty"`
	Uuid          string           `protobuf:"bytes,6,opt,name=uuid,proto3" json:"uuid,omitempty"`
	PriceOverride []*PriceOverride `protobuf:"bytes,7,rep,name=price_override,json=priceOverride,proto3" json:"price_override,omitempty"`
}

func (x *SwapOption) Reset() {
	*x = SwapOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapOption) ProtoMessage() {}

func (x *SwapOption) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapOption.ProtoReflect.Descriptor instead.
func (*SwapOption) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{11}
}

func (x *SwapOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SwapOption) GetPlu() string {
	if x != nil {
		return x.Plu
	}
	return ""
}

func (x *SwapOption) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *SwapOption) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SwapOption) GetOutOfStock() bool {
	if x != nil {
		return x.OutOfStock
	}
	return false
}

func (x *SwapOption) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SwapOption) GetPriceOverride() []*PriceOverride {
	if x != nil {
		return x.PriceOverride
	}
	return nil
}

type Portion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string      `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Plu         string      `protobuf:"bytes,3,opt,name=plu,proto3" json:"plu,omitempty"`
	Modifiers   []*Modifier `protobuf:"bytes,4,rep,name=modifiers,proto3" json:"modifiers,omitempty"`
	Price       int32       `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`
	Reference   string      `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
	Uuid        string      `protobuf:"bytes,7,opt,name=uuid,proto3" json:"uuid,omitempty"`
	OutOfStock  bool        `protobuf:"varint,8,opt,name=out_of_stock,json=outOfStock,proto3" json:"out_of_stock,omitempty"`
	Servings    int32       `protobuf:"varint,9,opt,name=servings,proto3" json:"servings,omitempty"`
	// superseded by nutritional_info and nutritional_info_range
	//
	// Deprecated: Do not use.
	Energy               *Portion_Energy       `protobuf:"bytes,10,opt,name=energy,proto3" json:"energy,omitempty"`
	NutritionalInfo      *NutritionalInfo      `protobuf:"bytes,11,opt,name=nutritional_info,json=nutritionalInfo,proto3" json:"nutritional_info,omitempty"`
	NutritionalInfoRange *NutritionalInfoRange `protobuf:"bytes,12,opt,name=nutritional_info_range,json=nutritionalInfoRange,proto3" json:"nutritional_info_range,omitempty"`
	ServingsRange        *Range                `protobuf:"bytes,13,opt,name=servings_range,json=servingsRange,proto3" json:"servings_range,omitempty"`
	PriceOverride        []*PriceOverride      `protobuf:"bytes,14,rep,name=price_override,json=priceOverride,proto3" json:"price_override,omitempty"`
}

func (x *Portion) Reset() {
	*x = Portion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Portion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Portion) ProtoMessage() {}

func (x *Portion) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Portion.ProtoReflect.Descriptor instead.
func (*Portion) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{12}
}

func (x *Portion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Portion) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Portion) GetPlu() string {
	if x != nil {
		return x.Plu
	}
	return ""
}

func (x *Portion) GetModifiers() []*Modifier {
	if x != nil {
		return x.Modifiers
	}
	return nil
}

func (x *Portion) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Portion) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *Portion) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Portion) GetOutOfStock() bool {
	if x != nil {
		return x.OutOfStock
	}
	return false
}

func (x *Portion) GetServings() int32 {
	if x != nil {
		return x.Servings
	}
	return 0
}

// Deprecated: Do not use.
func (x *Portion) GetEnergy() *Portion_Energy {
	if x != nil {
		return x.Energy
	}
	return nil
}

func (x *Portion) GetNutritionalInfo() *NutritionalInfo {
	if x != nil {
		return x.NutritionalInfo
	}
	return nil
}

func (x *Portion) GetNutritionalInfoRange() *NutritionalInfoRange {
	if x != nil {
		return x.NutritionalInfoRange
	}
	return nil
}

func (x *Portion) GetServingsRange() *Range {
	if x != nil {
		return x.ServingsRange
	}
	return nil
}

func (x *Portion) GetPriceOverride() []*PriceOverride {
	if x != nil {
		return x.PriceOverride
	}
	return nil
}

type NutritionalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// superseded by kilo_calories
	//
	// Deprecated: Do not use.
	Kcal int32 `protobuf:"varint,1,opt,name=kcal,proto3" json:"kcal,omitempty"`
	// superseded by kilo_joules
	//
	// Deprecated: Do not use.
	Kj                int32   `protobuf:"varint,2,opt,name=kj,proto3" json:"kj,omitempty"`
	Protein           float32 `protobuf:"fixed32,3,opt,name=protein,proto3" json:"protein,omitempty"`
	Carbohydrates     float32 `protobuf:"fixed32,4,opt,name=carbohydrates,proto3" json:"carbohydrates,omitempty"`
	Sugar             float32 `protobuf:"fixed32,5,opt,name=sugar,proto3" json:"sugar,omitempty"`
	Fat               float32 `protobuf:"fixed32,6,opt,name=fat,proto3" json:"fat,omitempty"`
	SaturatedFat      float32 `protobuf:"fixed32,7,opt,name=saturated_fat,json=saturatedFat,proto3" json:"saturated_fat,omitempty"`
	Salt              float32 `protobuf:"fixed32,8,opt,name=salt,proto3" json:"salt,omitempty"`
	AdditionalDetails string  `protobuf:"bytes,9,opt,name=additional_details,json=additionalDetails,proto3" json:"additional_details,omitempty"`
	KiloCalories      *int32  `protobuf:"varint,10,opt,name=kilo_calories,json=kiloCalories,proto3,oneof" json:"kilo_calories,omitempty"`
	KiloJoules        *int32  `protobuf:"varint,11,opt,name=kilo_joules,json=kiloJoules,proto3,oneof" json:"kilo_joules,omitempty"`
}

func (x *NutritionalInfo) Reset() {
	*x = NutritionalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NutritionalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionalInfo) ProtoMessage() {}

func (x *NutritionalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionalInfo.ProtoReflect.Descriptor instead.
func (*NutritionalInfo) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{13}
}

// Deprecated: Do not use.
func (x *NutritionalInfo) GetKcal() int32 {
	if x != nil {
		return x.Kcal
	}
	return 0
}

// Deprecated: Do not use.
func (x *NutritionalInfo) GetKj() int32 {
	if x != nil {
		return x.Kj
	}
	return 0
}

func (x *NutritionalInfo) GetProtein() float32 {
	if x != nil {
		return x.Protein
	}
	return 0
}

func (x *NutritionalInfo) GetCarbohydrates() float32 {
	if x != nil {
		return x.Carbohydrates
	}
	return 0
}

func (x *NutritionalInfo) GetSugar() float32 {
	if x != nil {
		return x.Sugar
	}
	return 0
}

func (x *NutritionalInfo) GetFat() float32 {
	if x != nil {
		return x.Fat
	}
	return 0
}

func (x *NutritionalInfo) GetSaturatedFat() float32 {
	if x != nil {
		return x.SaturatedFat
	}
	return 0
}

func (x *NutritionalInfo) GetSalt() float32 {
	if x != nil {
		return x.Salt
	}
	return 0
}

func (x *NutritionalInfo) GetAdditionalDetails() string {
	if x != nil {
		return x.AdditionalDetails
	}
	return ""
}

func (x *NutritionalInfo) GetKiloCalories() int32 {
	if x != nil && x.KiloCalories != nil {
		return *x.KiloCalories
	}
	return 0
}

func (x *NutritionalInfo) GetKiloJoules() int32 {
	if x != nil && x.KiloJoules != nil {
		return *x.KiloJoules
	}
	return 0
}

type NutritionalInfoRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KcalRange *Range `protobuf:"bytes,1,opt,name=kcal_range,json=kcalRange,proto3" json:"kcal_range,omitempty"`
	KjRange   *Range `protobuf:"bytes,2,opt,name=kj_range,json=kjRange,proto3" json:"kj_range,omitempty"`
}

func (x *NutritionalInfoRange) Reset() {
	*x = NutritionalInfoRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NutritionalInfoRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionalInfoRange) ProtoMessage() {}

func (x *NutritionalInfoRange) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionalInfoRange.ProtoReflect.Descriptor instead.
func (*NutritionalInfoRange) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{14}
}

func (x *NutritionalInfoRange) GetKcalRange() *Range {
	if x != nil {
		return x.KcalRange
	}
	return nil
}

func (x *NutritionalInfoRange) GetKjRange() *Range {
	if x != nil {
		return x.KjRange
	}
	return nil
}

type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min int32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max int32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{15}
}

func (x *Range) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Range) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type Ingredient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Ingredient) Reset() {
	*x = Ingredient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingredient) ProtoMessage() {}

func (x *Ingredient) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingredient.ProtoReflect.Descriptor instead.
func (*Ingredient) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{16}
}

func (x *Ingredient) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Include struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Plu         string      `protobuf:"bytes,2,opt,name=plu,proto3" json:"plu,omitempty"`
	Description string      `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Modifiers   []*Modifier `protobuf:"bytes,4,rep,name=modifiers,proto3" json:"modifiers,omitempty"`
	OutOfStock  bool        `protobuf:"varint,5,opt,name=out_of_stock,json=outOfStock,proto3" json:"out_of_stock,omitempty"`
	Reference   string      `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
	Uuid        string      `protobuf:"bytes,7,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *Include) Reset() {
	*x = Include{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Include) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Include) ProtoMessage() {}

func (x *Include) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Include.ProtoReflect.Descriptor instead.
func (*Include) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{17}
}

func (x *Include) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Include) GetPlu() string {
	if x != nil {
		return x.Plu
	}
	return ""
}

func (x *Include) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Include) GetModifiers() []*Modifier {
	if x != nil {
		return x.Modifiers
	}
	return nil
}

func (x *Include) GetOutOfStock() bool {
	if x != nil {
		return x.OutOfStock
	}
	return false
}

func (x *Include) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *Include) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type Modifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Options     []*Item `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
	// Pick defines how many of the options can be picked by the customer when
	// ordering. Omit this field and we will default to 'unlimited'.
	Pick *Modifier_Pick `protobuf:"bytes,4,opt,name=pick,proto3" json:"pick,omitempty"`
}

func (x *Modifier) Reset() {
	*x = Modifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Modifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Modifier) ProtoMessage() {}

func (x *Modifier) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Modifier.ProtoReflect.Descriptor instead.
func (*Modifier) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{18}
}

func (x *Modifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Modifier) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Modifier) GetOptions() []*Item {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Modifier) GetPick() *Modifier_Pick {
	if x != nil {
		return x.Pick
	}
	return nil
}

type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string        `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Items       []*Item       `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	Gallery     []*Image      `protobuf:"bytes,4,rep,name=gallery,proto3" json:"gallery,omitempty"`
	Categories  []*Category   `protobuf:"bytes,5,rep,name=categories,proto3" json:"categories,omitempty"`
	Type        Category_Type `protobuf:"varint,6,opt,name=type,proto3,enum=menutype.Category_Type" json:"type,omitempty"`
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{19}
}

func (x *Category) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Category) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Category) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Category) GetGallery() []*Image {
	if x != nil {
		return x.Gallery
	}
	return nil
}

func (x *Category) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *Category) GetType() Category_Type {
	if x != nil {
		return x.Type
	}
	return Category_NOT_SPECIFIED
}

type Menu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Categories []*Category `protobuf:"bytes,3,rep,name=categories,proto3" json:"categories,omitempty"`
	// reference is the identifier the POS uses for this menu
	Reference    string        `protobuf:"bytes,4,opt,name=reference,proto3" json:"reference,omitempty"`
	Type         Menu_Type     `protobuf:"varint,5,opt,name=type,proto3,enum=menutype.Menu_Type" json:"type,omitempty"`
	Availability *Availability `protobuf:"bytes,6,opt,name=availability,proto3" json:"availability,omitempty"`
	Description  string        `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Menu) Reset() {
	*x = Menu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Menu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Menu) ProtoMessage() {}

func (x *Menu) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Menu.ProtoReflect.Descriptor instead.
func (*Menu) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{20}
}

func (x *Menu) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Menu) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *Menu) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *Menu) GetType() Menu_Type {
	if x != nil {
		return x.Type
	}
	return Menu_ANY
}

func (x *Menu) GetAvailability() *Availability {
	if x != nil {
		return x.Availability
	}
	return nil
}

func (x *Menu) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Availability defines from what times, on each day of the week, the menu is
// available to order
type Availability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// availability is encoded as a string such as "09:00 - 17:00"
	Monday    []string `protobuf:"bytes,1,rep,name=monday,proto3" json:"monday,omitempty"`
	Tuesday   []string `protobuf:"bytes,2,rep,name=tuesday,proto3" json:"tuesday,omitempty"`
	Wednesday []string `protobuf:"bytes,3,rep,name=wednesday,proto3" json:"wednesday,omitempty"`
	Thursday  []string `protobuf:"bytes,4,rep,name=thursday,proto3" json:"thursday,omitempty"`
	Friday    []string `protobuf:"bytes,5,rep,name=friday,proto3" json:"friday,omitempty"`
	Saturday  []string `protobuf:"bytes,6,rep,name=saturday,proto3" json:"saturday,omitempty"`
	Sunday    []string `protobuf:"bytes,7,rep,name=sunday,proto3" json:"sunday,omitempty"`
}

func (x *Availability) Reset() {
	*x = Availability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Availability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Availability) ProtoMessage() {}

func (x *Availability) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Availability.ProtoReflect.Descriptor instead.
func (*Availability) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{21}
}

func (x *Availability) GetMonday() []string {
	if x != nil {
		return x.Monday
	}
	return nil
}

func (x *Availability) GetTuesday() []string {
	if x != nil {
		return x.Tuesday
	}
	return nil
}

func (x *Availability) GetWednesday() []string {
	if x != nil {
		return x.Wednesday
	}
	return nil
}

func (x *Availability) GetThursday() []string {
	if x != nil {
		return x.Thursday
	}
	return nil
}

func (x *Availability) GetFriday() []string {
	if x != nil {
		return x.Friday
	}
	return nil
}

func (x *Availability) GetSaturday() []string {
	if x != nil {
		return x.Saturday
	}
	return nil
}

func (x *Availability) GetSunday() []string {
	if x != nil {
		return x.Sunday
	}
	return nil
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{22}
}

func (x *Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type DefaultOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// default_selection is default quantity of this option that should be applied to the parent item
	DefaultSelection int32 `protobuf:"varint,1,opt,name=default_selection,json=defaultSelection,proto3" json:"default_selection,omitempty"`
	// charge_above is the quantity of this option above which additional charges will be added
	ChargeAbove int32 `protobuf:"varint,2,opt,name=charge_above,json=chargeAbove,proto3" json:"charge_above,omitempty"`
}

func (x *DefaultOption) Reset() {
	*x = DefaultOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultOption) ProtoMessage() {}

func (x *DefaultOption) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultOption.ProtoReflect.Descriptor instead.
func (*DefaultOption) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{23}
}

func (x *DefaultOption) GetDefaultSelection() int32 {
	if x != nil {
		return x.DefaultSelection
	}
	return 0
}

func (x *DefaultOption) GetChargeAbove() int32 {
	if x != nil {
		return x.ChargeAbove
	}
	return 0
}

type Item_Energy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32      `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  EnergyUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=menutype.EnergyUnit" json:"unit,omitempty"`
}

func (x *Item_Energy) Reset() {
	*x = Item_Energy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item_Energy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item_Energy) ProtoMessage() {}

func (x *Item_Energy) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item_Energy.ProtoReflect.Descriptor instead.
func (*Item_Energy) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Item_Energy) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Item_Energy) GetUnit() EnergyUnit {
	if x != nil {
		return x.Unit
	}
	return EnergyUnit_UNIT_UNKNOWN
}

type ComboGroup_Pick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ComboGroup_Pick_Exactly
	//	*ComboGroup_Pick_Range
	Value          isComboGroup_Pick_Value `protobuf_oneof:"value"`
	PickSameOption bool                    `protobuf:"varint,3,opt,name=pick_same_option,json=pickSameOption,proto3" json:"pick_same_option,omitempty"` // Defines if an user can select more than once
}

func (x *ComboGroup_Pick) Reset() {
	*x = ComboGroup_Pick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComboGroup_Pick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComboGroup_Pick) ProtoMessage() {}

func (x *ComboGroup_Pick) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComboGroup_Pick.ProtoReflect.Descriptor instead.
func (*ComboGroup_Pick) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{8, 0}
}

func (m *ComboGroup_Pick) GetValue() isComboGroup_Pick_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ComboGroup_Pick) GetExactly() uint32 {
	if x, ok := x.GetValue().(*ComboGroup_Pick_Exactly); ok {
		return x.Exactly
	}
	return 0
}

func (x *ComboGroup_Pick) GetRange() *ComboGroup_Range {
	if x, ok := x.GetValue().(*ComboGroup_Pick_Range); ok {
		return x.Range
	}
	return nil
}

func (x *ComboGroup_Pick) GetPickSameOption() bool {
	if x != nil {
		return x.PickSameOption
	}
	return false
}

type isComboGroup_Pick_Value interface {
	isComboGroup_Pick_Value()
}

type ComboGroup_Pick_Exactly struct {
	Exactly uint32 `protobuf:"varint,1,opt,name=exactly,proto3,oneof"`
}

type ComboGroup_Pick_Range struct {
	Range *ComboGroup_Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

func (*ComboGroup_Pick_Exactly) isComboGroup_Pick_Value() {}

func (*ComboGroup_Pick_Range) isComboGroup_Pick_Value() {}

type ComboGroup_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From uint32 `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To   uint32 `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *ComboGroup_Range) Reset() {
	*x = ComboGroup_Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComboGroup_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComboGroup_Range) ProtoMessage() {}

func (x *ComboGroup_Range) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComboGroup_Range.ProtoReflect.Descriptor instead.
func (*ComboGroup_Range) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{8, 1}
}

func (x *ComboGroup_Range) GetFrom() uint32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *ComboGroup_Range) GetTo() uint32 {
	if x != nil {
		return x.To
	}
	return 0
}

type Portion_Energy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32      `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  EnergyUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=menutype.EnergyUnit" json:"unit,omitempty"`
}

func (x *Portion_Energy) Reset() {
	*x = Portion_Energy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Portion_Energy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Portion_Energy) ProtoMessage() {}

func (x *Portion_Energy) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Portion_Energy.ProtoReflect.Descriptor instead.
func (*Portion_Energy) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{12, 0}
}

func (x *Portion_Energy) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Portion_Energy) GetUnit() EnergyUnit {
	if x != nil {
		return x.Unit
	}
	return EnergyUnit_UNIT_UNKNOWN
}

type Modifier_Pick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Modifier_Pick_Exactly
	//	*Modifier_Pick_Range
	Value          isModifier_Pick_Value `protobuf_oneof:"value"`
	PickSameOption bool                  `protobuf:"varint,3,opt,name=pick_same_option,json=pickSameOption,proto3" json:"pick_same_option,omitempty"` // Defines if an user can select more than once
}

func (x *Modifier_Pick) Reset() {
	*x = Modifier_Pick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Modifier_Pick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Modifier_Pick) ProtoMessage() {}

func (x *Modifier_Pick) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Modifier_Pick.ProtoReflect.Descriptor instead.
func (*Modifier_Pick) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{18, 0}
}

func (m *Modifier_Pick) GetValue() isModifier_Pick_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Modifier_Pick) GetExactly() uint32 {
	if x, ok := x.GetValue().(*Modifier_Pick_Exactly); ok {
		return x.Exactly
	}
	return 0
}

func (x *Modifier_Pick) GetRange() *Modifier_Range {
	if x, ok := x.GetValue().(*Modifier_Pick_Range); ok {
		return x.Range
	}
	return nil
}

func (x *Modifier_Pick) GetPickSameOption() bool {
	if x != nil {
		return x.PickSameOption
	}
	return false
}

type isModifier_Pick_Value interface {
	isModifier_Pick_Value()
}

type Modifier_Pick_Exactly struct {
	Exactly uint32 `protobuf:"varint,1,opt,name=exactly,proto3,oneof"`
}

type Modifier_Pick_Range struct {
	Range *Modifier_Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

func (*Modifier_Pick_Exactly) isModifier_Pick_Value() {}

func (*Modifier_Pick_Range) isModifier_Pick_Value() {}

type Modifier_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From uint32 `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To   uint32 `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *Modifier_Range) Reset() {
	*x = Modifier_Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_menutype_menutype_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Modifier_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Modifier_Range) ProtoMessage() {}

func (x *Modifier_Range) ProtoReflect() protoreflect.Message {
	mi := &file_menutype_menutype_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Modifier_Range.ProtoReflect.Descriptor instead.
func (*Modifier_Range) Descriptor() ([]byte, []int) {
	return file_menutype_menutype_proto_rawDescGZIP(), []int{18, 1}
}

func (x *Modifier_Range) GetFrom() uint32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *Modifier_Range) GetTo() uint32 {
	if x != nil {
		return x.To
	}
	return 0
}

var File_menutype_menutype_proto protoreflect.FileDescriptor

var file_menutype_menutype_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6d, 0x65, 0x6e, 0x75, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xd2, 0x0f, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6c, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x70, 0x6c, 0x75, 0x12, 0x30, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x22, 0x0a, 0x04, 0x73, 0x77, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x52,
	0x04, 0x73, 0x77, 0x61, 0x70, 0x12, 0x29, 0x0a, 0x07, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x07, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61,
	0x78, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65,
	0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61,
	0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x69, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x69, 0x63, 0x12, 0x36, 0x0a, 0x09, 0x73,
	0x70, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x53,
	0x70, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x09, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x12, 0x54, 0x0a, 0x14, 0x64, 0x69, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x2e, 0x44, 0x69, 0x65, 0x74, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x64, 0x69, 0x65, 0x74, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x67, 0x65, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d,
	0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x65, 0x6e,
	0x52, 0x09, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x09, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x10, 0x61, 0x5f, 0x6c, 0x61, 0x5f, 0x63, 0x61, 0x72, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x4c, 0x61, 0x43, 0x61, 0x72, 0x74,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x12, 0x44, 0x0a, 0x10, 0x6e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6e, 0x75, 0x74, 0x72, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x16, 0x6e, 0x75,
	0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x6e,
	0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x14, 0x6e, 0x75, 0x74, 0x72,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x36, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x78, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x74, 0x61, 0x78, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x2e, 0x0a, 0x08, 0x63, 0x61, 0x66, 0x66, 0x65, 0x69, 0x6e, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x66,
	0x66, 0x65, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x63, 0x61, 0x66, 0x66, 0x65, 0x69, 0x6e, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x61, 0x6c, 0x63,
	0x6f, 0x68, 0x6f, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x28,
	0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12,
	0x3a, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x52, 0x0c, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d,
	0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x74, 0x69, 0x6e,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x74, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x24, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x62, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x69, 0x63, 0x6b, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x52, 0x04, 0x70, 0x69,
	0x63, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0e,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x28,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x0d, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x1a, 0x48, 0x0a, 0x06,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x6e,
	0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x45, 0x0a, 0x09, 0x53, 0x70, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x4d, 0x49, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45,
	0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x4f, 0x54, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x48, 0x4f, 0x54, 0x10, 0x04, 0x22, 0x39, 0x0a,
	0x12, 0x44, 0x69, 0x65, 0x74, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x56, 0x45, 0x47, 0x45, 0x54, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x56, 0x45, 0x47, 0x41, 0x4e, 0x10, 0x02, 0x22, 0xa1, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22, 0xd4, 0x01, 0x0a,
	0x08, 0x43, 0x61, 0x66, 0x66, 0x65, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x09, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x66, 0x66, 0x65, 0x69,
	0x6e, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x22, 0x5d, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x0e, 0x43, 0x41, 0x46, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49,
	0x47, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x11, 0x0a, 0x09, 0x43,
	0x41, 0x46, 0x5f, 0x47, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x47, 0x52, 0x41, 0x4d,
	0x53, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x47, 0x52, 0x41, 0x4d,
	0x53, 0x10, 0x03, 0x22, 0xb7, 0x02, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x65,
	0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x47, 0x72,
	0x6f, 0x63, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22,
	0x9b, 0x01, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x17, 0x0a, 0x0f, 0x56, 0x4f, 0x4c, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x4c, 0x49, 0x54, 0x52,
	0x45, 0x53, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x12, 0x0a, 0x0a, 0x56, 0x4f, 0x4c, 0x5f,
	0x4c, 0x49, 0x54, 0x52, 0x45, 0x53, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x4c, 0x49, 0x54, 0x52, 0x45, 0x53,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4c, 0x49, 0x54, 0x52, 0x45,
	0x53, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x47, 0x52, 0x41, 0x4d,
	0x53, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4b, 0x49, 0x4c, 0x4f,
	0x47, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x43, 0x45, 0x4e, 0x54, 0x49, 0x4c, 0x49, 0x54, 0x52, 0x45, 0x53, 0x10, 0x06, 0x22, 0xfc, 0x01,
	0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f,
	0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x67, 0x72, 0x6f, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x61, 0x0a, 0x0b, 0x47, 0x72, 0x6f,
	0x63, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x0c, 0x57, 0x45, 0x49, 0x47,
	0x48, 0x54, 0x5f, 0x47, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x18,
	0x0a, 0x10, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4b, 0x49, 0x4c, 0x4f, 0x47, 0x52, 0x41,
	0x4d, 0x53, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x47, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x4b, 0x49, 0x4c, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x03, 0x22, 0xc1, 0x01, 0x0a,
	0x07, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x22, 0x3b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x02,
	0x22, 0x93, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f,
	0x66, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x5c, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x06, 0x46, 0x52, 0x4f, 0x5a, 0x45, 0x4e, 0x10,
	0x00, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x10, 0x0a, 0x08, 0x43, 0x4f, 0x4f, 0x4c, 0x5f, 0x44, 0x52,
	0x59, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x5a, 0x45, 0x4e, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x5f, 0x44, 0x52, 0x59, 0x10, 0x03, 0x22, 0xdf, 0x02, 0x0a, 0x0a,
	0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x70, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x62, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x52, 0x04,
	0x70, 0x69, 0x63, 0x6b, 0x1a, 0x89, 0x01, 0x0a, 0x04, 0x50, 0x69, 0x63, 0x6b, 0x12, 0x1a, 0x0a,
	0x07, 0x65, 0x78, 0x61, 0x63, 0x74, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x07, 0x65, 0x78, 0x61, 0x63, 0x74, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x69, 0x63, 0x6b, 0x53, 0x61, 0x6d,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x2b, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x49, 0x0a,
	0x0b, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6c, 0x75, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6c, 0x75, 0x22, 0x4a, 0x0a, 0x04, 0x53, 0x77, 0x61, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x0a, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6c, 0x75, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6c, 0x75, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65,
	0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x22, 0x9d, 0x05, 0x0a, 0x07, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6c, 0x75, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x70, 0x6c, 0x75, 0x12, 0x30, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x6e,
	0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x34, 0x0a, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x44, 0x0a, 0x10, 0x6e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x75, 0x74, 0x72, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6e, 0x75, 0x74, 0x72,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x16, 0x6e,
	0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65,
	0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x14, 0x6e, 0x75, 0x74,
	0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x36, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x65, 0x6e, 0x75,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x1a, 0x48, 0x0a, 0x06, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x22, 0xff, 0x02, 0x0a, 0x0f, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x04, 0x6b, 0x63, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x6b, 0x63, 0x61, 0x6c, 0x12,
	0x12, 0x0a, 0x02, 0x6b, 0x6a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x02, 0x6b, 0x6a, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x68, 0x79, 0x64, 0x72, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x75, 0x67, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x73, 0x75, 0x67, 0x61, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x66, 0x61, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x73, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x46, 0x61, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x73, 0x61, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x6b, 0x69, 0x6c, 0x6f, 0x5f, 0x63, 0x61, 0x6c, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0c, 0x6b, 0x69,
	0x6c, 0x6f, 0x43, 0x61, 0x6c, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x6b, 0x69, 0x6c, 0x6f, 0x5f, 0x6a, 0x6f, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x6b, 0x69, 0x6c, 0x6f, 0x4a, 0x6f, 0x75, 0x6c, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6b, 0x69, 0x6c, 0x6f, 0x5f, 0x63, 0x61, 0x6c,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6b, 0x69, 0x6c, 0x6f, 0x5f, 0x6a,
	0x6f, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x72, 0x0a, 0x14, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a,
	0x0a, 0x6b, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x09, 0x6b, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2a, 0x0a,
	0x08, 0x6b, 0x6a, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x07, 0x6b, 0x6a, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x2b, 0x0a, 0x05, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0x20, 0x0a, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x07, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6c, 0x75, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6c, 0x75, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x09,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x20,
	0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x22, 0xce, 0x02, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2b, 0x0a, 0x04, 0x70, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x52, 0x04, 0x70, 0x69, 0x63, 0x6b, 0x1a, 0x87, 0x01, 0x0a,
	0x04, 0x50, 0x69, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x63, 0x74, 0x6c, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x65, 0x78, 0x61, 0x63, 0x74, 0x6c,
	0x79, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x61, 0x6d, 0x65,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70,
	0x69, 0x63, 0x6b, 0x53, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x2b, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x74, 0x6f, 0x22, 0xa8, 0x02, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x07,
	0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65,
	0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x6e, 0x75,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x34, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x55, 0x42, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x02, 0x22, 0xae,
	0x02, 0x0a, 0x04, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x65,
	0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x10, 0x03, 0x22,
	0xc6, 0x01, 0x0a, 0x0c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x75, 0x65, 0x73,
	0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x75, 0x65, 0x73, 0x64,
	0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x72, 0x69, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72,
	0x69, 0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x22, 0x19, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x22, 0x5f, 0x0a, 0x0d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x62, 0x6f, 0x76,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41,
	0x62, 0x6f, 0x76, 0x65, 0x2a, 0x30, 0x0a, 0x0a, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x06,
	0x0a, 0x02, 0x4b, 0x4a, 0x10, 0x02, 0x2a, 0x96, 0x06, 0x0a, 0x08, 0x41, 0x6c, 0x6c, 0x65, 0x72,
	0x67, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x5f, 0x43, 0x45, 0x52, 0x45, 0x41, 0x4c,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x5f, 0x43, 0x45, 0x52, 0x45, 0x41,
	0x4c, 0x5f, 0x57, 0x48, 0x45, 0x41, 0x54, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x4c, 0x4c,
	0x45, 0x52, 0x47, 0x45, 0x4e, 0x5f, 0x43, 0x45, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x52, 0x59, 0x45,
	0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x5f, 0x43,
	0x45, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x42, 0x41, 0x52, 0x4c, 0x45, 0x59, 0x10, 0x04, 0x12, 0x18,
	0x0a, 0x14, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x5f, 0x43, 0x45, 0x52, 0x45, 0x41,
	0x4c, 0x5f, 0x4f, 0x41, 0x54, 0x53, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4c, 0x4c, 0x45,
	0x52, 0x47, 0x45, 0x4e, 0x5f, 0x43, 0x45, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x53, 0x50, 0x45, 0x4c,
	0x54, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x5f,
	0x43, 0x45, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x4b, 0x41, 0x4d, 0x55, 0x54, 0x10, 0x07, 0x12, 0x18,
	0x0a, 0x14, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x5f, 0x43, 0x52, 0x55, 0x53, 0x54,
	0x41, 0x43, 0x45, 0x41, 0x4e, 0x53, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4c, 0x4c, 0x45,
	0x52, 0x47, 0x45, 0x4e, 0x5f, 0x45, 0x47, 0x47, 0x53, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x41,
	0x4c, 0x4c, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x5f, 0x46, 0x49, 0x53, 0x48, 0x10, 0x0a, 0x12, 0x14,
	0x0a, 0x10, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x5f, 0x50, 0x45, 0x41, 0x4e, 0x55,
	0x54, 0x53, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x45, 0x4e,
	0x5f, 0x53, 0x4f, 0x59, 0x42, 0x45, 0x41, 0x4e, 0x53, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x41,
	0x4c, 0x4c, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x5f, 0x4d, 0x49, 0x4c, 0x4b, 0x10, 0x0d, 0x12, 0x1d,
	0x0a, 0x19, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x5f, 0x4e, 0x55, 0x54, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x19, 0x0a,
	0x15, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x5f, 0x4e, 0x55, 0x54, 0x53, 0x5f, 0x41,
	0x4c, 0x4d, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x4c, 0x4c, 0x45,
	0x52, 0x47, 0x45, 0x4e, 0x5f, 0x4e, 0x55, 0x54, 0x53, 0x5f, 0x48, 0x41, 0x5a, 0x45, 0x4c, 0x4e,
	0x55, 0x54, 0x53, 0x10, 0x10, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x45,
	0x4e, 0x5f, 0x4e, 0x55, 0x54, 0x53, 0x5f, 0x57, 0x41, 0x4c, 0x4e, 0x55, 0x54, 0x53, 0x10, 0x11,
	0x12, 0x19, 0x0a, 0x15, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x5f, 0x4e, 0x55, 0x54,
	0x53, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x45, 0x57, 0x53, 0x10, 0x12, 0x12, 0x17, 0x0a, 0x13, 0x41,
	0x4c, 0x4c, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x5f, 0x4e, 0x55, 0x54, 0x53, 0x5f, 0x50, 0x45, 0x43,
	0x41, 0x4e, 0x10, 0x13, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x45, 0x4e,
	0x5f, 0x4e, 0x55, 0x54, 0x53, 0x5f, 0x42, 0x52, 0x41, 0x5a, 0x49, 0x4c, 0x10, 0x14, 0x12, 0x1b,
	0x0a, 0x17, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x5f, 0x4e, 0x55, 0x54, 0x53, 0x5f,
	0x50, 0x49, 0x53, 0x54, 0x41, 0x43, 0x48, 0x49, 0x4f, 0x10, 0x15, 0x12, 0x1b, 0x0a, 0x17, 0x41,
	0x4c, 0x4c, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x5f, 0x4e, 0x55, 0x54, 0x53, 0x5f, 0x4d, 0x41, 0x43,
	0x41, 0x44, 0x41, 0x4d, 0x49, 0x41, 0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x4c, 0x4c, 0x45,
	0x52, 0x47, 0x45, 0x4e, 0x5f, 0x4e, 0x55, 0x54, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x45, 0x4e, 0x53,
	0x4c, 0x41, 0x4e, 0x44, 0x10, 0x17, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47,
	0x45, 0x4e, 0x5f, 0x43, 0x45, 0x4c, 0x45, 0x52, 0x59, 0x10, 0x18, 0x12, 0x14, 0x0a, 0x10, 0x41,
	0x4c, 0x4c, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x5f, 0x4d, 0x55, 0x53, 0x54, 0x41, 0x52, 0x44, 0x10,
	0x19, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x5f, 0x53, 0x45,
	0x53, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x45, 0x44, 0x53, 0x10, 0x1a, 0x12, 0x26, 0x0a, 0x22,
	0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x5f, 0x53, 0x55, 0x4c, 0x50, 0x48, 0x55, 0x52,
	0x5f, 0x44, 0x49, 0x4f, 0x58, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x4c, 0x50, 0x48, 0x49, 0x54,
	0x45, 0x53, 0x10, 0x1b, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x45, 0x4e,
	0x5f, 0x4c, 0x55, 0x50, 0x49, 0x4e, 0x10, 0x1c, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x4c, 0x4c, 0x45,
	0x52, 0x47, 0x45, 0x4e, 0x5f, 0x4d, 0x4f, 0x4c, 0x4c, 0x55, 0x53, 0x43, 0x53, 0x10, 0x1d, 0x2a,
	0xfb, 0x06, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x44, 0x44,
	0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x41,
	0x44, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12,
	0x26, 0x0a, 0x22, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x44, 0x44, 0x49, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x53, 0x5f, 0x4e, 0x49, 0x54, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x41, 0x4c, 0x54, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x44, 0x44, 0x49, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x53, 0x5f, 0x4e, 0x49, 0x54, 0x52, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x3a, 0x0a, 0x36, 0x41,
	0x44, 0x44, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x4e, 0x49, 0x54, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x55,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x41, 0x4c, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4e, 0x49,
	0x54, 0x52, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44, 0x44, 0x49, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x41, 0x4e, 0x54, 0x49, 0x4f, 0x58, 0x49, 0x44, 0x41, 0x4e, 0x54, 0x10,
	0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x46, 0x4c,
	0x41, 0x56, 0x4f, 0x55, 0x52, 0x45, 0x5f, 0x45, 0x4e, 0x48, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x10,
	0x08, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x55,
	0x4c, 0x46, 0x49, 0x54, 0x45, 0x53, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x44, 0x49,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x45, 0x4e, 0x45, 0x44, 0x10, 0x0a,
	0x12, 0x12, 0x0a, 0x0e, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x57, 0x41, 0x58,
	0x45, 0x44, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x50, 0x48, 0x4f, 0x53, 0x50, 0x48, 0x41, 0x54, 0x45, 0x10, 0x0c, 0x12, 0x22, 0x0a, 0x1e,
	0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x57, 0x45, 0x45, 0x54, 0x45, 0x4e,
	0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x0d,
	0x12, 0x24, 0x0a, 0x20, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x57, 0x45,
	0x45, 0x54, 0x45, 0x4e, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x45, 0x4e, 0x59, 0x4c, 0x41, 0x4c, 0x41,
	0x4e, 0x49, 0x4e, 0x45, 0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x53, 0x57, 0x45, 0x45, 0x54, 0x45, 0x4e, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x58,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x0f, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x44, 0x44, 0x49, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x43, 0x41, 0x46, 0x46, 0x45, 0x49, 0x4e, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x10, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x44,
	0x44, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x41, 0x46, 0x46, 0x45, 0x49, 0x4e, 0x45, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x5f, 0x43, 0x41, 0x46, 0x46, 0x45, 0x49, 0x4e, 0x45, 0x10, 0x11, 0x12,
	0x1e, 0x0a, 0x1a, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x41, 0x46, 0x46,
	0x45, 0x49, 0x4e, 0x45, 0x5f, 0x43, 0x41, 0x46, 0x46, 0x45, 0x49, 0x4e, 0x45, 0x10, 0x12, 0x12,
	0x14, 0x0a, 0x10, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x51, 0x55, 0x49, 0x4e,
	0x49, 0x4e, 0x45, 0x10, 0x13, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4d, 0x4f,
	0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x44, 0x44, 0x49,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x43, 0x49, 0x44, 0x49, 0x46, 0x49, 0x45, 0x52, 0x53, 0x10,
	0x15, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x53, 0x45, 0x52, 0x53, 0x10, 0x16, 0x12, 0x20, 0x0a, 0x1c, 0x41,
	0x44, 0x44, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x49, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x17, 0x12, 0x21, 0x0a,
	0x1d, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x49,
	0x4e, 0x5f, 0x4d, 0x49, 0x4c, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x49, 0x4e, 0x10, 0x18,
	0x12, 0x1b, 0x0a, 0x17, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x45, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x43, 0x48, 0x10, 0x19, 0x12, 0x1e, 0x0a,
	0x1a, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x49,
	0x4e, 0x5f, 0x45, 0x47, 0x47, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x10, 0x1a, 0x42, 0x84, 0x01,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d,
	0x4d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x79, 0x70,
	0x61, 0x79, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x65,
	0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0xa2, 0x02, 0x03, 0x4d, 0x58, 0x58, 0xaa, 0x02, 0x08, 0x4d,
	0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0xca, 0x02, 0x08, 0x4d, 0x65, 0x6e, 0x75, 0x74, 0x79,
	0x70, 0x65, 0xe2, 0x02, 0x14, 0x4d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x4d, 0x65, 0x6e, 0x75,
	0x74, 0x79, 0x70, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_menutype_menutype_proto_rawDescOnce sync.Once
	file_menutype_menutype_proto_rawDescData = file_menutype_menutype_proto_rawDesc
)

func file_menutype_menutype_proto_rawDescGZIP() []byte {
	file_menutype_menutype_proto_rawDescOnce.Do(func() {
		file_menutype_menutype_proto_rawDescData = protoimpl.X.CompressGZIP(file_menutype_menutype_proto_rawDescData)
	})
	return file_menutype_menutype_proto_rawDescData
}

var file_menutype_menutype_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_menutype_menutype_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_menutype_menutype_proto_goTypes = []interface{}{
	(EnergyUnit)(0),              // 0: menutype.EnergyUnit
	(Allergen)(0),                // 1: menutype.Allergen
	(Additive)(0),                // 2: menutype.Additive
	(Item_Spiciness)(0),          // 3: menutype.Item.Spiciness
	(Item_DietaryRestriction)(0), // 4: menutype.Item.DietaryRestriction
	(Caffeine_GroceryUnit)(0),    // 5: menutype.Caffeine.GroceryUnit
	(Volume_GroceryUnit)(0),      // 6: menutype.Volume.GroceryUnit
	(Weight_GroceryUnit)(0),      // 7: menutype.Weight.GroceryUnit
	(Deposit_Type)(0),            // 8: menutype.Deposit.Type
	(Storage_Type)(0),            // 9: menutype.Storage.Type
	(Category_Type)(0),           // 10: menutype.Category.Type
	(Menu_Type)(0),               // 11: menutype.Menu.Type
	(*Item)(nil),                 // 12: menutype.Item
	(*PriceOverride)(nil),        // 13: menutype.PriceOverride
	(*Caffeine)(nil),             // 14: menutype.Caffeine
	(*Volume)(nil),               // 15: menutype.Volume
	(*Weight)(nil),               // 16: menutype.Weight
	(*Deposit)(nil),              // 17: menutype.Deposit
	(*Manufacturer)(nil),         // 18: menutype.Manufacturer
	(*Storage)(nil),              // 19: menutype.Storage
	(*ComboGroup)(nil),           // 20: menutype.ComboGroup
	(*ComboOption)(nil),          // 21: menutype.ComboOption
	(*Swap)(nil),                 // 22: menutype.Swap
	(*SwapOption)(nil),           // 23: menutype.SwapOption
	(*Portion)(nil),              // 24: menutype.Portion
	(*NutritionalInfo)(nil),      // 25: menutype.NutritionalInfo
	(*NutritionalInfoRange)(nil), // 26: menutype.NutritionalInfoRange
	(*Range)(nil),                // 27: menutype.Range
	(*Ingredient)(nil),           // 28: menutype.Ingredient
	(*Include)(nil),              // 29: menutype.Include
	(*Modifier)(nil),             // 30: menutype.Modifier
	(*Category)(nil),             // 31: menutype.Category
	(*Menu)(nil),                 // 32: menutype.Menu
	(*Availability)(nil),         // 33: menutype.Availability
	(*Image)(nil),                // 34: menutype.Image
	(*DefaultOption)(nil),        // 35: menutype.DefaultOption
	(*Item_Energy)(nil),          // 36: menutype.Item.Energy
	(*ComboGroup_Pick)(nil),      // 37: menutype.ComboGroup.Pick
	(*ComboGroup_Range)(nil),     // 38: menutype.ComboGroup.Range
	(*Portion_Energy)(nil),       // 39: menutype.Portion.Energy
	(*Modifier_Pick)(nil),        // 40: menutype.Modifier.Pick
	(*Modifier_Range)(nil),       // 41: menutype.Modifier.Range
}
var file_menutype_menutype_proto_depIdxs = []int32{
	30, // 0: menutype.Item.modifiers:type_name -> menutype.Modifier
	29, // 1: menutype.Item.includes:type_name -> menutype.Include
	28, // 2: menutype.Item.ingredients:type_name -> menutype.Ingredient
	22, // 3: menutype.Item.swap:type_name -> menutype.Swap
	34, // 4: menutype.Item.gallery:type_name -> menutype.Image
	24, // 5: menutype.Item.portions:type_name -> menutype.Portion
	3,  // 6: menutype.Item.spiciness:type_name -> menutype.Item.Spiciness
	4,  // 7: menutype.Item.dietary_restrictions:type_name -> menutype.Item.DietaryRestriction
	1,  // 8: menutype.Item.allergens:type_name -> menutype.Allergen
	2,  // 9: menutype.Item.additives:type_name -> menutype.Additive
	36, // 10: menutype.Item.energy:type_name -> menutype.Item.Energy
	25, // 11: menutype.Item.nutritional_info:type_name -> menutype.NutritionalInfo
	26, // 12: menutype.Item.nutritional_info_range:type_name -> menutype.NutritionalInfoRange
	27, // 13: menutype.Item.servings_range:type_name -> menutype.Range
	14, // 14: menutype.Item.caffeine:type_name -> menutype.Caffeine
	15, // 15: menutype.Item.volume:type_name -> menutype.Volume
	16, // 16: menutype.Item.weight:type_name -> menutype.Weight
	17, // 17: menutype.Item.deposit:type_name -> menutype.Deposit
	18, // 18: menutype.Item.manufacturer:type_name -> menutype.Manufacturer
	19, // 19: menutype.Item.storage:type_name -> menutype.Storage
	20, // 20: menutype.Item.combo_groups:type_name -> menutype.ComboGroup
	40, // 21: menutype.Item.pick:type_name -> menutype.Modifier.Pick
	35, // 22: menutype.Item.default_option:type_name -> menutype.DefaultOption
	13, // 23: menutype.Item.price_override:type_name -> menutype.PriceOverride
	5,  // 24: menutype.Caffeine.unit:type_name -> menutype.Caffeine.GroceryUnit
	6,  // 25: menutype.Volume.unit:type_name -> menutype.Volume.GroceryUnit
	7,  // 26: menutype.Weight.unit:type_name -> menutype.Weight.GroceryUnit
	8,  // 27: menutype.Deposit.type:type_name -> menutype.Deposit.Type
	9,  // 28: menutype.Storage.type:type_name -> menutype.Storage.Type
	21, // 29: menutype.ComboGroup.options:type_name -> menutype.ComboOption
	37, // 30: menutype.ComboGroup.pick:type_name -> menutype.ComboGroup.Pick
	23, // 31: menutype.Swap.options:type_name -> menutype.SwapOption
	13, // 32: menutype.SwapOption.price_override:type_name -> menutype.PriceOverride
	30, // 33: menutype.Portion.modifiers:type_name -> menutype.Modifier
	39, // 34: menutype.Portion.energy:type_name -> menutype.Portion.Energy
	25, // 35: menutype.Portion.nutritional_info:type_name -> menutype.NutritionalInfo
	26, // 36: menutype.Portion.nutritional_info_range:type_name -> menutype.NutritionalInfoRange
	27, // 37: menutype.Portion.servings_range:type_name -> menutype.Range
	13, // 38: menutype.Portion.price_override:type_name -> menutype.PriceOverride
	27, // 39: menutype.NutritionalInfoRange.kcal_range:type_name -> menutype.Range
	27, // 40: menutype.NutritionalInfoRange.kj_range:type_name -> menutype.Range
	30, // 41: menutype.Include.modifiers:type_name -> menutype.Modifier
	12, // 42: menutype.Modifier.options:type_name -> menutype.Item
	40, // 43: menutype.Modifier.pick:type_name -> menutype.Modifier.Pick
	12, // 44: menutype.Category.items:type_name -> menutype.Item
	34, // 45: menutype.Category.gallery:type_name -> menutype.Image
	31, // 46: menutype.Category.categories:type_name -> menutype.Category
	10, // 47: menutype.Category.type:type_name -> menutype.Category.Type
	31, // 48: menutype.Menu.categories:type_name -> menutype.Category
	11, // 49: menutype.Menu.type:type_name -> menutype.Menu.Type
	33, // 50: menutype.Menu.availability:type_name -> menutype.Availability
	0,  // 51: menutype.Item.Energy.unit:type_name -> menutype.EnergyUnit
	38, // 52: menutype.ComboGroup.Pick.range:type_name -> menutype.ComboGroup.Range
	0,  // 53: menutype.Portion.Energy.unit:type_name -> menutype.EnergyUnit
	41, // 54: menutype.Modifier.Pick.range:type_name -> menutype.Modifier.Range
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_menutype_menutype_proto_init() }
func file_menutype_menutype_proto_init() {
	if File_menutype_menutype_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_menutype_menutype_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Caffeine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Weight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Manufacturer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Storage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComboGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComboOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Swap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Portion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NutritionalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NutritionalInfoRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingredient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Include); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Modifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Menu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Availability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item_Energy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComboGroup_Pick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComboGroup_Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Portion_Energy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Modifier_Pick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_menutype_menutype_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Modifier_Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_menutype_menutype_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_menutype_menutype_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*ComboGroup_Pick_Exactly)(nil),
		(*ComboGroup_Pick_Range)(nil),
	}
	file_menutype_menutype_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*Modifier_Pick_Exactly)(nil),
		(*Modifier_Pick_Range)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_menutype_menutype_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_menutype_menutype_proto_goTypes,
		DependencyIndexes: file_menutype_menutype_proto_depIdxs,
		EnumInfos:         file_menutype_menutype_proto_enumTypes,
		MessageInfos:      file_menutype_menutype_proto_msgTypes,
	}.Build()
	File_menutype_menutype_proto = out.File
	file_menutype_menutype_proto_rawDesc = nil
	file_menutype_menutype_proto_goTypes = nil
	file_menutype_menutype_proto_depIdxs = nil
}
