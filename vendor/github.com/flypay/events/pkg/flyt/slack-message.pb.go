// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: flyt/slack-message.proto

package flyt

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SlackMessagePublished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The channel to send the workflow to.
	Channel string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// The pre-text message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// JSON marshalled block components, see: https://api.slack.com/reference/block-kit/blocks
	Blocks []byte `protobuf:"bytes,3,opt,name=blocks,proto3" json:"blocks,omitempty"`
	// JSON marshalled attachment components, see: https://api.slack.com/reference/messaging/attachments
	Attachments []byte `protobuf:"bytes,4,opt,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *SlackMessagePublished) Reset() {
	*x = SlackMessagePublished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyt_slack_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackMessagePublished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackMessagePublished) ProtoMessage() {}

func (x *SlackMessagePublished) ProtoReflect() protoreflect.Message {
	mi := &file_flyt_slack_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackMessagePublished.ProtoReflect.Descriptor instead.
func (*SlackMessagePublished) Descriptor() ([]byte, []int) {
	return file_flyt_slack_message_proto_rawDescGZIP(), []int{0}
}

func (x *SlackMessagePublished) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *SlackMessagePublished) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SlackMessagePublished) GetBlocks() []byte {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *SlackMessagePublished) GetAttachments() []byte {
	if x != nil {
		return x.Attachments
	}
	return nil
}

type SlackWebhookPublished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The webhook URL to send the workflow to.
	WebhookUrl string `protobuf:"bytes,1,opt,name=webhook_url,json=webhookUrl,proto3" json:"webhook_url,omitempty"`
	// The key value pairs to send as JSON.
	Data *structpb.Struct `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SlackWebhookPublished) Reset() {
	*x = SlackWebhookPublished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyt_slack_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackWebhookPublished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackWebhookPublished) ProtoMessage() {}

func (x *SlackWebhookPublished) ProtoReflect() protoreflect.Message {
	mi := &file_flyt_slack_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackWebhookPublished.ProtoReflect.Descriptor instead.
func (*SlackWebhookPublished) Descriptor() ([]byte, []int) {
	return file_flyt_slack_message_proto_rawDescGZIP(), []int{1}
}

func (x *SlackWebhookPublished) GetWebhookUrl() string {
	if x != nil {
		return x.WebhookUrl
	}
	return ""
}

func (x *SlackWebhookPublished) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_flyt_slack_message_proto protoreflect.FileDescriptor

var file_flyt_slack_message_proto_rawDesc = []byte{
	0x0a, 0x18, 0x66, 0x6c, 0x79, 0x74, 0x2f, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x2d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x66, 0x6c, 0x79, 0x74,
	0x1a, 0x15, 0x66, 0x6c, 0x79, 0x74, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x01, 0x0a, 0x15, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x1b, 0x82,
	0xb5, 0x18, 0x17, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x15, 0x53,
	0x6c, 0x61, 0x63, 0x6b, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x3a, 0x1b, 0x82, 0xb5, 0x18, 0x17, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x2e, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x42,
	0x70, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x42, 0x11, 0x53, 0x6c, 0x61,
	0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x79,
	0x70, 0x61, 0x79, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x66,
	0x6c, 0x79, 0x74, 0xa2, 0x02, 0x03, 0x46, 0x58, 0x58, 0xaa, 0x02, 0x04, 0x46, 0x6c, 0x79, 0x74,
	0xca, 0x02, 0x04, 0x46, 0x6c, 0x79, 0x74, 0xe2, 0x02, 0x10, 0x46, 0x6c, 0x79, 0x74, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x04, 0x46, 0x6c, 0x79,
	0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flyt_slack_message_proto_rawDescOnce sync.Once
	file_flyt_slack_message_proto_rawDescData = file_flyt_slack_message_proto_rawDesc
)

func file_flyt_slack_message_proto_rawDescGZIP() []byte {
	file_flyt_slack_message_proto_rawDescOnce.Do(func() {
		file_flyt_slack_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_flyt_slack_message_proto_rawDescData)
	})
	return file_flyt_slack_message_proto_rawDescData
}

var file_flyt_slack_message_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_flyt_slack_message_proto_goTypes = []interface{}{
	(*SlackMessagePublished)(nil), // 0: flyt.SlackMessagePublished
	(*SlackWebhookPublished)(nil), // 1: flyt.SlackWebhookPublished
	(*structpb.Struct)(nil),       // 2: google.protobuf.Struct
}
var file_flyt_slack_message_proto_depIdxs = []int32{
	2, // 0: flyt.SlackWebhookPublished.data:type_name -> google.protobuf.Struct
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_flyt_slack_message_proto_init() }
func file_flyt_slack_message_proto_init() {
	if File_flyt_slack_message_proto != nil {
		return
	}
	file_flyt_descriptor_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_flyt_slack_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackMessagePublished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyt_slack_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackWebhookPublished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flyt_slack_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flyt_slack_message_proto_goTypes,
		DependencyIndexes: file_flyt_slack_message_proto_depIdxs,
		MessageInfos:      file_flyt_slack_message_proto_msgTypes,
	}.Build()
	File_flyt_slack_message_proto = out.File
	file_flyt_slack_message_proto_rawDesc = nil
	file_flyt_slack_message_proto_goTypes = nil
	file_flyt_slack_message_proto_depIdxs = nil
}
