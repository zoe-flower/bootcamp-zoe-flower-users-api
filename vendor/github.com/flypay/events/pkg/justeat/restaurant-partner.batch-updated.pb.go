// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: justeat/restaurant-partner.batch-updated.proto

package justeat

import (
	_ "github.com/flypay/events/pkg/flyt"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Deprecated: Do not use.
type RestaurantPartnerBatchUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionsAdded   []*RestaurantPartnerBatchUpdated_Subscription `protobuf:"bytes,1,rep,name=subscriptions_added,json=RestaurantPartnerDataList,proto3" json:"subscriptions_added,omitempty"`
	SubscriptionsRemoved []*RestaurantPartnerBatchUpdated_Subscription `protobuf:"bytes,2,rep,name=subscriptions_removed,json=RemovedRestaurantPartnerDataList,proto3" json:"subscriptions_removed,omitempty"`
	// The Just Eat tenant (e.g. "uk", "es").
	// Not to be confused with the Flyt tenant.
	Tenant string `protobuf:"bytes,3,opt,name=tenant,json=Tenant,proto3" json:"tenant,omitempty"`
}

func (x *RestaurantPartnerBatchUpdated) Reset() {
	*x = RestaurantPartnerBatchUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_restaurant_partner_batch_updated_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestaurantPartnerBatchUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestaurantPartnerBatchUpdated) ProtoMessage() {}

func (x *RestaurantPartnerBatchUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_restaurant_partner_batch_updated_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestaurantPartnerBatchUpdated.ProtoReflect.Descriptor instead.
func (*RestaurantPartnerBatchUpdated) Descriptor() ([]byte, []int) {
	return file_justeat_restaurant_partner_batch_updated_proto_rawDescGZIP(), []int{0}
}

func (x *RestaurantPartnerBatchUpdated) GetSubscriptionsAdded() []*RestaurantPartnerBatchUpdated_Subscription {
	if x != nil {
		return x.SubscriptionsAdded
	}
	return nil
}

func (x *RestaurantPartnerBatchUpdated) GetSubscriptionsRemoved() []*RestaurantPartnerBatchUpdated_Subscription {
	if x != nil {
		return x.SubscriptionsRemoved
	}
	return nil
}

func (x *RestaurantPartnerBatchUpdated) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

type RestaurantPartnerBatchUpdated_Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerId   int32  `protobuf:"varint,2,opt,name=partner_id,json=PartnerId,proto3" json:"partner_id,omitempty"`
	PartnerName string `protobuf:"bytes,3,opt,name=partner_name,json=PartnerName,proto3" json:"partner_name,omitempty"`
	ServiceType string `protobuf:"bytes,4,opt,name=service_type,json=ServiceType,proto3" json:"service_type,omitempty"`
	// The Just Eat restaurant id.
	RestaurantId int32 `protobuf:"varint,5,opt,name=restaurant_id,json=RestaurantId,proto3" json:"restaurant_id,omitempty"`
}

func (x *RestaurantPartnerBatchUpdated_Subscription) Reset() {
	*x = RestaurantPartnerBatchUpdated_Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_restaurant_partner_batch_updated_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestaurantPartnerBatchUpdated_Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestaurantPartnerBatchUpdated_Subscription) ProtoMessage() {}

func (x *RestaurantPartnerBatchUpdated_Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_restaurant_partner_batch_updated_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestaurantPartnerBatchUpdated_Subscription.ProtoReflect.Descriptor instead.
func (*RestaurantPartnerBatchUpdated_Subscription) Descriptor() ([]byte, []int) {
	return file_justeat_restaurant_partner_batch_updated_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RestaurantPartnerBatchUpdated_Subscription) GetPartnerId() int32 {
	if x != nil {
		return x.PartnerId
	}
	return 0
}

func (x *RestaurantPartnerBatchUpdated_Subscription) GetPartnerName() string {
	if x != nil {
		return x.PartnerName
	}
	return ""
}

func (x *RestaurantPartnerBatchUpdated_Subscription) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *RestaurantPartnerBatchUpdated_Subscription) GetRestaurantId() int32 {
	if x != nil {
		return x.RestaurantId
	}
	return 0
}

var File_justeat_restaurant_partner_batch_updated_proto protoreflect.FileDescriptor

var file_justeat_restaurant_partner_batch_updated_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x75,
	0x72, 0x61, 0x6e, 0x74, 0x2d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x07, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x1a, 0x15, 0x66, 0x6c, 0x79, 0x74, 0x2f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x04, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x6b, 0x0a, 0x13, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x74, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x20, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x1a, 0xaa, 0x01, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e,
	0x74, 0x3a, 0x63, 0x18, 0x01, 0x82, 0xb5, 0x18, 0x28, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74,
	0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x2d, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0xa2, 0xbb, 0x18, 0x2b, 0x52, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56, 0x32,
	0xaa, 0xbb, 0x18, 0x02, 0x75, 0x6b, 0x42, 0x93, 0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x6a,
	0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x42, 0x22, 0x52, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61,
	0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x24, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x79, 0x70, 0x61, 0x79, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6a, 0x75, 0x73, 0x74, 0x65,
	0x61, 0x74, 0xa2, 0x02, 0x03, 0x4a, 0x58, 0x58, 0xaa, 0x02, 0x07, 0x4a, 0x75, 0x73, 0x74, 0x65,
	0x61, 0x74, 0xca, 0x02, 0x07, 0x4a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0xe2, 0x02, 0x13, 0x4a,
	0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x07, 0x4a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_justeat_restaurant_partner_batch_updated_proto_rawDescOnce sync.Once
	file_justeat_restaurant_partner_batch_updated_proto_rawDescData = file_justeat_restaurant_partner_batch_updated_proto_rawDesc
)

func file_justeat_restaurant_partner_batch_updated_proto_rawDescGZIP() []byte {
	file_justeat_restaurant_partner_batch_updated_proto_rawDescOnce.Do(func() {
		file_justeat_restaurant_partner_batch_updated_proto_rawDescData = protoimpl.X.CompressGZIP(file_justeat_restaurant_partner_batch_updated_proto_rawDescData)
	})
	return file_justeat_restaurant_partner_batch_updated_proto_rawDescData
}

var file_justeat_restaurant_partner_batch_updated_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_justeat_restaurant_partner_batch_updated_proto_goTypes = []interface{}{
	(*RestaurantPartnerBatchUpdated)(nil),              // 0: justeat.RestaurantPartnerBatchUpdated
	(*RestaurantPartnerBatchUpdated_Subscription)(nil), // 1: justeat.RestaurantPartnerBatchUpdated.Subscription
}
var file_justeat_restaurant_partner_batch_updated_proto_depIdxs = []int32{
	1, // 0: justeat.RestaurantPartnerBatchUpdated.subscriptions_added:type_name -> justeat.RestaurantPartnerBatchUpdated.Subscription
	1, // 1: justeat.RestaurantPartnerBatchUpdated.subscriptions_removed:type_name -> justeat.RestaurantPartnerBatchUpdated.Subscription
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_justeat_restaurant_partner_batch_updated_proto_init() }
func file_justeat_restaurant_partner_batch_updated_proto_init() {
	if File_justeat_restaurant_partner_batch_updated_proto != nil {
		return
	}
	file_justeat_options_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_justeat_restaurant_partner_batch_updated_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestaurantPartnerBatchUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_restaurant_partner_batch_updated_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestaurantPartnerBatchUpdated_Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_justeat_restaurant_partner_batch_updated_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_justeat_restaurant_partner_batch_updated_proto_goTypes,
		DependencyIndexes: file_justeat_restaurant_partner_batch_updated_proto_depIdxs,
		MessageInfos:      file_justeat_restaurant_partner_batch_updated_proto_msgTypes,
	}.Build()
	File_justeat_restaurant_partner_batch_updated_proto = out.File
	file_justeat_restaurant_partner_batch_updated_proto_rawDesc = nil
	file_justeat_restaurant_partner_batch_updated_proto_goTypes = nil
	file_justeat_restaurant_partner_batch_updated_proto_depIdxs = nil
}
