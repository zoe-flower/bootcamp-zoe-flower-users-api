// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: justeat/menutype.proto

package justeat

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Deprecated: Do not use.
type JEMenuV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RestaurantId   string            `protobuf:"bytes,1,opt,name=restaurant_id,json=restaurantId,proto3" json:"restaurant_id,omitempty"`
	Name           string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description    string            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Availabilities []*JEAvailability `protobuf:"bytes,4,rep,name=availabilities,proto3" json:"availabilities,omitempty"`
	Categories     []*JECategory     `protobuf:"bytes,5,rep,name=categories,proto3" json:"categories,omitempty"`
	Items          []*JEMenuItem     `protobuf:"bytes,6,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *JEMenuV3) Reset() {
	*x = JEMenuV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JEMenuV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JEMenuV3) ProtoMessage() {}

func (x *JEMenuV3) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JEMenuV3.ProtoReflect.Descriptor instead.
func (*JEMenuV3) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_proto_rawDescGZIP(), []int{0}
}

func (x *JEMenuV3) GetRestaurantId() string {
	if x != nil {
		return x.RestaurantId
	}
	return ""
}

func (x *JEMenuV3) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JEMenuV3) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *JEMenuV3) GetAvailabilities() []*JEAvailability {
	if x != nil {
		return x.Availabilities
	}
	return nil
}

func (x *JEMenuV3) GetCategories() []*JECategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *JEMenuV3) GetItems() []*JEMenuItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// Deprecated: Do not use.
type JEMenuItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string             `protobuf:"bytes,1,opt,name=id,json=Id,proto3" json:"id,omitempty"`
	Name                 string             `protobuf:"bytes,2,opt,name=name,json=Name,proto3" json:"name,omitempty"`
	Type                 string             `protobuf:"bytes,3,opt,name=type,json=Type,proto3" json:"type,omitempty"`
	RequireOtherProducts bool               `protobuf:"varint,4,opt,name=require_other_products,json=RequireOtherProducts,proto3" json:"require_other_products,omitempty"`
	Description          string             `protobuf:"bytes,5,opt,name=description,json=Description,proto3" json:"description,omitempty"`
	Labels               []string           `protobuf:"bytes,6,rep,name=labels,json=Labels,proto3" json:"labels,omitempty"`
	Variations           []*JEVariation     `protobuf:"bytes,7,rep,name=variations,json=Variations,proto3" json:"variations,omitempty"`
	ModifierGroups       []*JEModifierGroup `protobuf:"bytes,8,rep,name=modifier_groups,json=ModifierGroups,proto3" json:"modifier_groups,omitempty"`
	DealGroups           []*JEDealGroup     `protobuf:"bytes,9,rep,name=deal_groups,json=DealGroups,proto3" json:"deal_groups,omitempty"`
	ImageUrl             string             `protobuf:"bytes,10,opt,name=image_url,json=ImageURL,proto3" json:"image_url,omitempty"`
	Images               []*JEImage         `protobuf:"bytes,11,rep,name=images,json=Images,proto3" json:"images,omitempty"`
	ExternalId           string             `protobuf:"bytes,12,opt,name=external_id,json=ExternalId,proto3" json:"external_id,omitempty"`
}

func (x *JEMenuItem) Reset() {
	*x = JEMenuItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JEMenuItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JEMenuItem) ProtoMessage() {}

func (x *JEMenuItem) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JEMenuItem.ProtoReflect.Descriptor instead.
func (*JEMenuItem) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_proto_rawDescGZIP(), []int{1}
}

func (x *JEMenuItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JEMenuItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JEMenuItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *JEMenuItem) GetRequireOtherProducts() bool {
	if x != nil {
		return x.RequireOtherProducts
	}
	return false
}

func (x *JEMenuItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *JEMenuItem) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *JEMenuItem) GetVariations() []*JEVariation {
	if x != nil {
		return x.Variations
	}
	return nil
}

func (x *JEMenuItem) GetModifierGroups() []*JEModifierGroup {
	if x != nil {
		return x.ModifierGroups
	}
	return nil
}

func (x *JEMenuItem) GetDealGroups() []*JEDealGroup {
	if x != nil {
		return x.DealGroups
	}
	return nil
}

func (x *JEMenuItem) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *JEMenuItem) GetImages() []*JEImage {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *JEMenuItem) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

// Deprecated: Do not use.
type JEImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source      string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Id          string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	UrlTemplate string `protobuf:"bytes,3,opt,name=url_template,json=urlTemplate,proto3" json:"url_template,omitempty"`
}

func (x *JEImage) Reset() {
	*x = JEImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JEImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JEImage) ProtoMessage() {}

func (x *JEImage) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JEImage.ProtoReflect.Descriptor instead.
func (*JEImage) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_proto_rawDescGZIP(), []int{2}
}

func (x *JEImage) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *JEImage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JEImage) GetUrlTemplate() string {
	if x != nil {
		return x.UrlTemplate
	}
	return ""
}

// Deprecated: Do not use.
type JEVariation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	BasePrice          int32                 `protobuf:"varint,1,opt,name=base_price,json=basePrice,proto3" json:"base_price,omitempty"`
	DealOnly           bool                  `protobuf:"varint,2,opt,name=deal_only,json=DealOnly,proto3" json:"deal_only,omitempty"`
	Id                 string                `protobuf:"bytes,3,opt,name=id,json=Id,proto3" json:"id,omitempty"`
	Name               string                `protobuf:"bytes,4,opt,name=name,json=Name,proto3" json:"name,omitempty"`
	Type               string                `protobuf:"bytes,5,opt,name=type,json=Type,proto3" json:"type,omitempty"`
	BasePriceCurrency  string                `protobuf:"bytes,6,opt,name=base_price_currency,json=BasePriceCurrency,proto3" json:"base_price_currency,omitempty"`
	KitchenNumber      string                `protobuf:"bytes,7,opt,name=kitchen_number,json=KitchenNumber,proto3" json:"kitchen_number,omitempty"`
	AvailabilityIds    []string              `protobuf:"bytes,8,rep,name=availability_ids,json=AvailabilityIds,proto3" json:"availability_ids,omitempty"`
	ModifierGroupsIds  []string              `protobuf:"bytes,9,rep,name=modifier_groups_ids,json=ModifierGroupsIds,proto3" json:"modifier_groups_ids,omitempty"`
	DealGroupsIds      []string              `protobuf:"bytes,10,rep,name=deal_groups_ids,json=DealGroupsIds,proto3" json:"deal_groups_ids,omitempty"`
	NumberOfServings   *JENumberOfServings   `protobuf:"bytes,11,opt,name=number_of_servings,json=NumberOfServings,proto3" json:"number_of_servings,omitempty"`
	Nutrition          *JENutrition          `protobuf:"bytes,12,opt,name=nutrition,json=Nutrition,proto3" json:"nutrition,omitempty"`
	BasePriceF         float64               `protobuf:"fixed64,13,opt,name=base_price_f,json=BasePrice,proto3" json:"base_price_f,omitempty"`
	PhysicalProperties *JEPhysicalProperties `protobuf:"bytes,14,opt,name=physical_properties,json=PhysicalProperties,proto3" json:"physical_properties,omitempty"`
}

func (x *JEVariation) Reset() {
	*x = JEVariation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JEVariation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JEVariation) ProtoMessage() {}

func (x *JEVariation) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JEVariation.ProtoReflect.Descriptor instead.
func (*JEVariation) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_proto_rawDescGZIP(), []int{3}
}

// Deprecated: Do not use.
func (x *JEVariation) GetBasePrice() int32 {
	if x != nil {
		return x.BasePrice
	}
	return 0
}

func (x *JEVariation) GetDealOnly() bool {
	if x != nil {
		return x.DealOnly
	}
	return false
}

func (x *JEVariation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JEVariation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JEVariation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *JEVariation) GetBasePriceCurrency() string {
	if x != nil {
		return x.BasePriceCurrency
	}
	return ""
}

func (x *JEVariation) GetKitchenNumber() string {
	if x != nil {
		return x.KitchenNumber
	}
	return ""
}

func (x *JEVariation) GetAvailabilityIds() []string {
	if x != nil {
		return x.AvailabilityIds
	}
	return nil
}

func (x *JEVariation) GetModifierGroupsIds() []string {
	if x != nil {
		return x.ModifierGroupsIds
	}
	return nil
}

func (x *JEVariation) GetDealGroupsIds() []string {
	if x != nil {
		return x.DealGroupsIds
	}
	return nil
}

func (x *JEVariation) GetNumberOfServings() *JENumberOfServings {
	if x != nil {
		return x.NumberOfServings
	}
	return nil
}

func (x *JEVariation) GetNutrition() *JENutrition {
	if x != nil {
		return x.Nutrition
	}
	return nil
}

func (x *JEVariation) GetBasePriceF() float64 {
	if x != nil {
		return x.BasePriceF
	}
	return 0
}

func (x *JEVariation) GetPhysicalProperties() *JEPhysicalProperties {
	if x != nil {
		return x.PhysicalProperties
	}
	return nil
}

// Deprecated: Do not use.
type JEPhysicalProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrossWeight *GrossWeight `protobuf:"bytes,1,opt,name=gross_weight,json=GrossWeight,proto3" json:"gross_weight,omitempty"`
}

func (x *JEPhysicalProperties) Reset() {
	*x = JEPhysicalProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JEPhysicalProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JEPhysicalProperties) ProtoMessage() {}

func (x *JEPhysicalProperties) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JEPhysicalProperties.ProtoReflect.Descriptor instead.
func (*JEPhysicalProperties) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_proto_rawDescGZIP(), []int{4}
}

func (x *JEPhysicalProperties) GetGrossWeight() *GrossWeight {
	if x != nil {
		return x.GrossWeight
	}
	return nil
}

// Deprecated: Do not use.
type GrossWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unit  string `protobuf:"bytes,1,opt,name=unit,json=Unit,proto3" json:"unit,omitempty"`
	Value int32  `protobuf:"varint,2,opt,name=value,json=Value,proto3" json:"value,omitempty"`
}

func (x *GrossWeight) Reset() {
	*x = GrossWeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrossWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrossWeight) ProtoMessage() {}

func (x *GrossWeight) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrossWeight.ProtoReflect.Descriptor instead.
func (*GrossWeight) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_proto_rawDescGZIP(), []int{5}
}

func (x *GrossWeight) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *GrossWeight) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Deprecated: Do not use.
type JEModifierGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string        `protobuf:"bytes,1,opt,name=id,json=Id,proto3" json:"id,omitempty"`
	Name       string        `protobuf:"bytes,2,opt,name=name,json=Name,proto3" json:"name,omitempty"`
	MinChoices int32         `protobuf:"varint,3,opt,name=min_choices,json=MinChoices,proto3" json:"min_choices,omitempty"`
	MaxChoices int32         `protobuf:"varint,4,opt,name=max_choices,json=MaxChoices,proto3" json:"max_choices,omitempty"`
	Modifiers  []*JEModifier `protobuf:"bytes,5,rep,name=modifiers,json=Modifiers,proto3" json:"modifiers,omitempty"`
}

func (x *JEModifierGroup) Reset() {
	*x = JEModifierGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JEModifierGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JEModifierGroup) ProtoMessage() {}

func (x *JEModifierGroup) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JEModifierGroup.ProtoReflect.Descriptor instead.
func (*JEModifierGroup) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_proto_rawDescGZIP(), []int{6}
}

func (x *JEModifierGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JEModifierGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JEModifierGroup) GetMinChoices() int32 {
	if x != nil {
		return x.MinChoices
	}
	return 0
}

func (x *JEModifierGroup) GetMaxChoices() int32 {
	if x != nil {
		return x.MaxChoices
	}
	return 0
}

func (x *JEModifierGroup) GetModifiers() []*JEModifier {
	if x != nil {
		return x.Modifiers
	}
	return nil
}

// Deprecated: Do not use.
type JEModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,json=Id,proto3" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,json=Name,proto3" json:"name,omitempty"`
	MinChoices int32  `protobuf:"varint,3,opt,name=min_choices,json=MinChoices,proto3" json:"min_choices,omitempty"`
	MaxChoices int32  `protobuf:"varint,4,opt,name=max_choices,json=MaxChoices,proto3" json:"max_choices,omitempty"`
	// Deprecated: Do not use.
	AdditionPrice         int32               `protobuf:"varint,5,opt,name=addition_price,json=additionPrice,proto3" json:"addition_price,omitempty"`
	AdditionPriceCurrency string              `protobuf:"bytes,6,opt,name=addition_price_currency,json=AdditionPriceCurrency,proto3" json:"addition_price_currency,omitempty"`
	NumberOfServings      *JENumberOfServings `protobuf:"bytes,7,opt,name=number_of_servings,json=NumberOfServings,proto3" json:"number_of_servings,omitempty"`
	Nutrition             *JENutrition        `protobuf:"bytes,8,opt,name=nutrition,json=Nutrition,proto3" json:"nutrition,omitempty"`
	AdditionPriceF        float64             `protobuf:"fixed64,9,opt,name=addition_price_f,json=AdditionPrice,proto3" json:"addition_price_f,omitempty"`
}

func (x *JEModifier) Reset() {
	*x = JEModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JEModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JEModifier) ProtoMessage() {}

func (x *JEModifier) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JEModifier.ProtoReflect.Descriptor instead.
func (*JEModifier) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_proto_rawDescGZIP(), []int{7}
}

func (x *JEModifier) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JEModifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JEModifier) GetMinChoices() int32 {
	if x != nil {
		return x.MinChoices
	}
	return 0
}

func (x *JEModifier) GetMaxChoices() int32 {
	if x != nil {
		return x.MaxChoices
	}
	return 0
}

// Deprecated: Do not use.
func (x *JEModifier) GetAdditionPrice() int32 {
	if x != nil {
		return x.AdditionPrice
	}
	return 0
}

func (x *JEModifier) GetAdditionPriceCurrency() string {
	if x != nil {
		return x.AdditionPriceCurrency
	}
	return ""
}

func (x *JEModifier) GetNumberOfServings() *JENumberOfServings {
	if x != nil {
		return x.NumberOfServings
	}
	return nil
}

func (x *JEModifier) GetNutrition() *JENutrition {
	if x != nil {
		return x.Nutrition
	}
	return nil
}

func (x *JEModifier) GetAdditionPriceF() float64 {
	if x != nil {
		return x.AdditionPriceF
	}
	return 0
}

// Deprecated: Do not use.
type JEDealGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                `protobuf:"bytes,1,opt,name=id,json=Id,proto3" json:"id,omitempty"`
	Name               string                `protobuf:"bytes,2,opt,name=name,json=Name,proto3" json:"name,omitempty"`
	NumberOfChoices    int32                 `protobuf:"varint,3,opt,name=number_of_choices,json=NumberOfChoices,proto3" json:"number_of_choices,omitempty"`
	DealItemVariations []*JEDealItemVaration `protobuf:"bytes,4,rep,name=deal_item_variations,json=DealItemVariations,proto3" json:"deal_item_variations,omitempty"`
}

func (x *JEDealGroup) Reset() {
	*x = JEDealGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JEDealGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JEDealGroup) ProtoMessage() {}

func (x *JEDealGroup) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JEDealGroup.ProtoReflect.Descriptor instead.
func (*JEDealGroup) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_proto_rawDescGZIP(), []int{8}
}

func (x *JEDealGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JEDealGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JEDealGroup) GetNumberOfChoices() int32 {
	if x != nil {
		return x.NumberOfChoices
	}
	return 0
}

func (x *JEDealGroup) GetDealItemVariations() []*JEDealItemVaration {
	if x != nil {
		return x.DealItemVariations
	}
	return nil
}

// Deprecated: Do not use.
type JEDealItemVaration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DealItemVariationId string `protobuf:"bytes,1,opt,name=deal_item_variation_id,json=DealItemVariationId,proto3" json:"deal_item_variation_id,omitempty"`
	MinChoices          int32  `protobuf:"varint,2,opt,name=min_choices,json=MinChoices,proto3" json:"min_choices,omitempty"`
	MaxChoices          int32  `protobuf:"varint,3,opt,name=max_choices,json=MaxChoices,proto3" json:"max_choices,omitempty"`
	// Deprecated: Do not use.
	AdditionPrice     int32   `protobuf:"varint,4,opt,name=addition_price,json=additionPrice,proto3" json:"addition_price,omitempty"`
	BasePriceCurrency string  `protobuf:"bytes,5,opt,name=base_price_currency,json=BasePriceCurrency,proto3" json:"base_price_currency,omitempty"`
	AdditionPriceF    float64 `protobuf:"fixed64,6,opt,name=addition_price_f,json=AdditionPrice,proto3" json:"addition_price_f,omitempty"`
}

func (x *JEDealItemVaration) Reset() {
	*x = JEDealItemVaration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JEDealItemVaration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JEDealItemVaration) ProtoMessage() {}

func (x *JEDealItemVaration) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JEDealItemVaration.ProtoReflect.Descriptor instead.
func (*JEDealItemVaration) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_proto_rawDescGZIP(), []int{9}
}

func (x *JEDealItemVaration) GetDealItemVariationId() string {
	if x != nil {
		return x.DealItemVariationId
	}
	return ""
}

func (x *JEDealItemVaration) GetMinChoices() int32 {
	if x != nil {
		return x.MinChoices
	}
	return 0
}

func (x *JEDealItemVaration) GetMaxChoices() int32 {
	if x != nil {
		return x.MaxChoices
	}
	return 0
}

// Deprecated: Do not use.
func (x *JEDealItemVaration) GetAdditionPrice() int32 {
	if x != nil {
		return x.AdditionPrice
	}
	return 0
}

func (x *JEDealItemVaration) GetBasePriceCurrency() string {
	if x != nil {
		return x.BasePriceCurrency
	}
	return ""
}

func (x *JEDealItemVaration) GetAdditionPriceF() float64 {
	if x != nil {
		return x.AdditionPriceF
	}
	return 0
}

// Deprecated: Do not use.
type JECategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ItemIds     []string `protobuf:"bytes,4,rep,name=item_ids,json=itemIds,proto3" json:"item_ids,omitempty"`
}

func (x *JECategory) Reset() {
	*x = JECategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JECategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JECategory) ProtoMessage() {}

func (x *JECategory) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JECategory.ProtoReflect.Descriptor instead.
func (*JECategory) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_proto_rawDescGZIP(), []int{10}
}

func (x *JECategory) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JECategory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JECategory) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *JECategory) GetItemIds() []string {
	if x != nil {
		return x.ItemIds
	}
	return nil
}

// Deprecated: Do not use.
type JEAvailability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string    `protobuf:"bytes,1,opt,name=name,json=Name,proto3" json:"name,omitempty"`
	Id           string    `protobuf:"bytes,2,opt,name=id,json=Id,proto3" json:"id,omitempty"`
	Description  string    `protobuf:"bytes,3,opt,name=description,json=Description,proto3" json:"description,omitempty"`
	ServiceTypes []string  `protobuf:"bytes,4,rep,name=service_types,json=ServiceTypes,proto3" json:"service_types,omitempty"`
	Times        []*JETime `protobuf:"bytes,5,rep,name=times,json=Times,proto3" json:"times,omitempty"`
}

func (x *JEAvailability) Reset() {
	*x = JEAvailability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JEAvailability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JEAvailability) ProtoMessage() {}

func (x *JEAvailability) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JEAvailability.ProtoReflect.Descriptor instead.
func (*JEAvailability) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_proto_rawDescGZIP(), []int{11}
}

func (x *JEAvailability) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JEAvailability) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JEAvailability) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *JEAvailability) GetServiceTypes() []string {
	if x != nil {
		return x.ServiceTypes
	}
	return nil
}

func (x *JEAvailability) GetTimes() []*JETime {
	if x != nil {
		return x.Times
	}
	return nil
}

// Deprecated: Do not use.
type JETime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DaysOfTheWeek []string `protobuf:"bytes,1,rep,name=days_of_the_week,json=DayOfTheWeek,proto3" json:"days_of_the_week,omitempty"`
	FromDateTime  string   `protobuf:"bytes,2,opt,name=from_date_time,json=FromDateTime,proto3" json:"from_date_time,omitempty"`
	ToDateTime    string   `protobuf:"bytes,3,opt,name=to_date_time,json=ToDateTime,proto3" json:"to_date_time,omitempty"`
}

func (x *JETime) Reset() {
	*x = JETime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JETime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JETime) ProtoMessage() {}

func (x *JETime) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JETime.ProtoReflect.Descriptor instead.
func (*JETime) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_proto_rawDescGZIP(), []int{12}
}

func (x *JETime) GetDaysOfTheWeek() []string {
	if x != nil {
		return x.DaysOfTheWeek
	}
	return nil
}

func (x *JETime) GetFromDateTime() string {
	if x != nil {
		return x.FromDateTime
	}
	return ""
}

func (x *JETime) GetToDateTime() string {
	if x != nil {
		return x.ToDateTime
	}
	return ""
}

// Deprecated: Do not use.
type JENumberOfServings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min int32 `protobuf:"varint,1,opt,name=min,json=Min,proto3" json:"min,omitempty"`
	Max int32 `protobuf:"varint,2,opt,name=max,json=Max,proto3" json:"max,omitempty"`
}

func (x *JENumberOfServings) Reset() {
	*x = JENumberOfServings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JENumberOfServings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JENumberOfServings) ProtoMessage() {}

func (x *JENumberOfServings) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JENumberOfServings.ProtoReflect.Descriptor instead.
func (*JENumberOfServings) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_proto_rawDescGZIP(), []int{13}
}

func (x *JENumberOfServings) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *JENumberOfServings) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

// Deprecated: Do not use.
type JENutrition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnergyContent []*JENutritionalRangeItem `protobuf:"bytes,1,rep,name=energy_content,json=EnergyContent,proto3" json:"energy_content,omitempty"`
}

func (x *JENutrition) Reset() {
	*x = JENutrition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JENutrition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JENutrition) ProtoMessage() {}

func (x *JENutrition) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JENutrition.ProtoReflect.Descriptor instead.
func (*JENutrition) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_proto_rawDescGZIP(), []int{14}
}

func (x *JENutrition) GetEnergyContent() []*JENutritionalRangeItem {
	if x != nil {
		return x.EnergyContent
	}
	return nil
}

// Deprecated: Do not use.
type JENutritionalRangeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min  int32  `protobuf:"varint,1,opt,name=min,json=Min,proto3" json:"min,omitempty"`
	Max  int32  `protobuf:"varint,2,opt,name=max,json=Max,proto3" json:"max,omitempty"`
	Unit string `protobuf:"bytes,3,opt,name=unit,json=Unit,proto3" json:"unit,omitempty"`
}

func (x *JENutritionalRangeItem) Reset() {
	*x = JENutritionalRangeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JENutritionalRangeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JENutritionalRangeItem) ProtoMessage() {}

func (x *JENutritionalRangeItem) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JENutritionalRangeItem.ProtoReflect.Descriptor instead.
func (*JENutritionalRangeItem) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_proto_rawDescGZIP(), []int{15}
}

func (x *JENutritionalRangeItem) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *JENutritionalRangeItem) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *JENutritionalRangeItem) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

var File_justeat_menutype_proto protoreflect.FileDescriptor

var file_justeat_menutype_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2f, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61,
	0x74, 0x22, 0x8a, 0x02, 0x0a, 0x08, 0x4a, 0x45, 0x4d, 0x65, 0x6e, 0x75, 0x56, 0x33, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0e, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x4a, 0x45, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x4a, 0x45, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x4a, 0x45, 0x4d, 0x65, 0x6e, 0x75, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xd0,
	0x03, 0x0a, 0x0a, 0x4a, 0x45, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x61, 0x74, 0x2e, 0x4a, 0x45, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x4a,
	0x45, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x35,
	0x0a, 0x0b, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x4a, 0x45,
	0x44, 0x65, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x44, 0x65, 0x61, 0x6c, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x52, 0x4c, 0x12, 0x28, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x4a, 0x45, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x3a, 0x02, 0x18,
	0x01, 0x22, 0x58, 0x0a, 0x07, 0x4a, 0x45, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x72, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x72, 0x6c, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xd3, 0x04, 0x0a, 0x0b,
	0x4a, 0x45, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0a, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x44, 0x65, 0x61, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x42, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4b, 0x69, 0x74,
	0x63, 0x68, 0x65, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x11, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x44, 0x65, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x49, 0x64, 0x73, 0x12, 0x49, 0x0a,
	0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x61, 0x74, 0x2e, 0x4a, 0x45, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x6e, 0x75, 0x74, 0x72,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6a, 0x75,
	0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x4a, 0x45, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0c,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x42, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a,
	0x13, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x75, 0x73,
	0x74, 0x65, 0x61, 0x74, 0x2e, 0x4a, 0x45, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x12, 0x50, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x3a, 0x02, 0x18,
	0x01, 0x22, 0x53, 0x0a, 0x14, 0x4a, 0x45, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x67, 0x72, 0x6f,
	0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x0b, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x3b, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x18, 0x01, 0x22, 0xae, 0x01, 0x0a, 0x0f, 0x4a, 0x45, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x69, 0x6e, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x4d, 0x69, 0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x4d, 0x61, 0x78, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x31, 0x0a,
	0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x4a, 0x45, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x3a, 0x02, 0x18, 0x01, 0x22, 0x81, 0x03, 0x0a, 0x0a, 0x4a, 0x45, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4d, 0x69,
	0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4d,
	0x61, 0x78, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x0e, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x49, 0x0a, 0x12,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65,
	0x61, 0x74, 0x2e, 0x4a, 0x45, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x6e, 0x75, 0x74, 0x72, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6a, 0x75, 0x73,
	0x74, 0x65, 0x61, 0x74, 0x2e, 0x4a, 0x45, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x10, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xb0, 0x01, 0x0a, 0x0b, 0x4a, 0x45, 0x44,
	0x65, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x14, 0x64, 0x65, 0x61, 0x6c,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74,
	0x2e, 0x4a, 0x45, 0x44, 0x65, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x12, 0x44, 0x65, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x93, 0x02, 0x0a, 0x12,
	0x4a, 0x45, 0x44, 0x65, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x44, 0x65, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4d, 0x69,
	0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4d,
	0x61, 0x78, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x0e, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x42, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x27, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x02, 0x18,
	0x01, 0x22, 0x71, 0x0a, 0x0a, 0x4a, 0x45, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73,
	0x3a, 0x02, 0x18, 0x01, 0x22, 0xa6, 0x01, 0x0a, 0x0e, 0x4a, 0x45, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x4a, 0x45, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x7c, 0x0a,
	0x06, 0x4a, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x10, 0x64, 0x61, 0x79, 0x73, 0x5f,
	0x6f, 0x66, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x12,
	0x24, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x6f, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x3c, 0x0a, 0x12, 0x4a,
	0x45, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x4d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x4d, 0x61, 0x78, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x59, 0x0a, 0x0b, 0x4a, 0x45, 0x4e,
	0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0e, 0x65, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x4a, 0x45, 0x4e, 0x75, 0x74,
	0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0d, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x3a, 0x02, 0x18, 0x01, 0x22, 0x54, 0x0a, 0x16, 0x4a, 0x45, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x4d, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x4d,
	0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x3a, 0x02, 0x18, 0x01, 0x42, 0x7e, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x42, 0x0d, 0x4d, 0x65, 0x6e, 0x75, 0x74,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x79, 0x70, 0x61, 0x79, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74,
	0xa2, 0x02, 0x03, 0x4a, 0x58, 0x58, 0xaa, 0x02, 0x07, 0x4a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74,
	0xca, 0x02, 0x07, 0x4a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0xe2, 0x02, 0x13, 0x4a, 0x75, 0x73,
	0x74, 0x65, 0x61, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x07, 0x4a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_justeat_menutype_proto_rawDescOnce sync.Once
	file_justeat_menutype_proto_rawDescData = file_justeat_menutype_proto_rawDesc
)

func file_justeat_menutype_proto_rawDescGZIP() []byte {
	file_justeat_menutype_proto_rawDescOnce.Do(func() {
		file_justeat_menutype_proto_rawDescData = protoimpl.X.CompressGZIP(file_justeat_menutype_proto_rawDescData)
	})
	return file_justeat_menutype_proto_rawDescData
}

var file_justeat_menutype_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_justeat_menutype_proto_goTypes = []interface{}{
	(*JEMenuV3)(nil),               // 0: justeat.JEMenuV3
	(*JEMenuItem)(nil),             // 1: justeat.JEMenuItem
	(*JEImage)(nil),                // 2: justeat.JEImage
	(*JEVariation)(nil),            // 3: justeat.JEVariation
	(*JEPhysicalProperties)(nil),   // 4: justeat.JEPhysicalProperties
	(*GrossWeight)(nil),            // 5: justeat.GrossWeight
	(*JEModifierGroup)(nil),        // 6: justeat.JEModifierGroup
	(*JEModifier)(nil),             // 7: justeat.JEModifier
	(*JEDealGroup)(nil),            // 8: justeat.JEDealGroup
	(*JEDealItemVaration)(nil),     // 9: justeat.JEDealItemVaration
	(*JECategory)(nil),             // 10: justeat.JECategory
	(*JEAvailability)(nil),         // 11: justeat.JEAvailability
	(*JETime)(nil),                 // 12: justeat.JETime
	(*JENumberOfServings)(nil),     // 13: justeat.JENumberOfServings
	(*JENutrition)(nil),            // 14: justeat.JENutrition
	(*JENutritionalRangeItem)(nil), // 15: justeat.JENutritionalRangeItem
}
var file_justeat_menutype_proto_depIdxs = []int32{
	11, // 0: justeat.JEMenuV3.availabilities:type_name -> justeat.JEAvailability
	10, // 1: justeat.JEMenuV3.categories:type_name -> justeat.JECategory
	1,  // 2: justeat.JEMenuV3.items:type_name -> justeat.JEMenuItem
	3,  // 3: justeat.JEMenuItem.variations:type_name -> justeat.JEVariation
	6,  // 4: justeat.JEMenuItem.modifier_groups:type_name -> justeat.JEModifierGroup
	8,  // 5: justeat.JEMenuItem.deal_groups:type_name -> justeat.JEDealGroup
	2,  // 6: justeat.JEMenuItem.images:type_name -> justeat.JEImage
	13, // 7: justeat.JEVariation.number_of_servings:type_name -> justeat.JENumberOfServings
	14, // 8: justeat.JEVariation.nutrition:type_name -> justeat.JENutrition
	4,  // 9: justeat.JEVariation.physical_properties:type_name -> justeat.JEPhysicalProperties
	5,  // 10: justeat.JEPhysicalProperties.gross_weight:type_name -> justeat.GrossWeight
	7,  // 11: justeat.JEModifierGroup.modifiers:type_name -> justeat.JEModifier
	13, // 12: justeat.JEModifier.number_of_servings:type_name -> justeat.JENumberOfServings
	14, // 13: justeat.JEModifier.nutrition:type_name -> justeat.JENutrition
	9,  // 14: justeat.JEDealGroup.deal_item_variations:type_name -> justeat.JEDealItemVaration
	12, // 15: justeat.JEAvailability.times:type_name -> justeat.JETime
	15, // 16: justeat.JENutrition.energy_content:type_name -> justeat.JENutritionalRangeItem
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_justeat_menutype_proto_init() }
func file_justeat_menutype_proto_init() {
	if File_justeat_menutype_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_justeat_menutype_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JEMenuV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JEMenuItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JEImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JEVariation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JEPhysicalProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrossWeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JEModifierGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JEModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JEDealGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JEDealItemVaration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JECategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JEAvailability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JETime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JENumberOfServings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JENutrition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JENutritionalRangeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_justeat_menutype_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_justeat_menutype_proto_goTypes,
		DependencyIndexes: file_justeat_menutype_proto_depIdxs,
		MessageInfos:      file_justeat_menutype_proto_msgTypes,
	}.Build()
	File_justeat_menutype_proto = out.File
	file_justeat_menutype_proto_rawDesc = nil
	file_justeat_menutype_proto_goTypes = nil
	file_justeat_menutype_proto_depIdxs = nil
}
