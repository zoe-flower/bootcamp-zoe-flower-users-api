// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: justeat/restaurant-partner-subscription-batch-updated-v2.proto

package justeat

import (
	_ "github.com/flypay/events/pkg/flyt"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RestaurantPartnerSubscriptionBatchUpdatedV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RestaurantPartnerDataList        []*RestaurantPartnerSubscriptionBatchUpdatedV2_Subscription `protobuf:"bytes,1,rep,name=restaurant_partner_data_list,json=RestaurantPartnerDataList,proto3" json:"restaurant_partner_data_list,omitempty"`
	RemovedRestaurantPartnerDataList []*RestaurantPartnerSubscriptionBatchUpdatedV2_Subscription `protobuf:"bytes,2,rep,name=removed_restaurant_partner_data_list,json=RemovedRestaurantPartnerDataList,proto3" json:"removed_restaurant_partner_data_list,omitempty"`
	// The Just Eat tenant (e.g. "uk", "es").
	// Not to be confused with the Flyt tenant.
	Tenant           string `protobuf:"bytes,3,opt,name=tenant,json=Tenant,proto3" json:"tenant,omitempty"`
	Username         string `protobuf:"bytes,4,opt,name=username,json=UserName,proto3" json:"username,omitempty"`
	Id               string `protobuf:"bytes,5,opt,name=id,json=Id,proto3" json:"id,omitempty"`
	Timestamp        string `protobuf:"bytes,6,opt,name=timestamp,json=TimeStamp,proto3" json:"timestamp,omitempty"`
	RaisingComponent string `protobuf:"bytes,7,opt,name=raising_component,json=RaisingComponent,proto3" json:"raising_component,omitempty"`
}

func (x *RestaurantPartnerSubscriptionBatchUpdatedV2) Reset() {
	*x = RestaurantPartnerSubscriptionBatchUpdatedV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestaurantPartnerSubscriptionBatchUpdatedV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestaurantPartnerSubscriptionBatchUpdatedV2) ProtoMessage() {}

func (x *RestaurantPartnerSubscriptionBatchUpdatedV2) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestaurantPartnerSubscriptionBatchUpdatedV2.ProtoReflect.Descriptor instead.
func (*RestaurantPartnerSubscriptionBatchUpdatedV2) Descriptor() ([]byte, []int) {
	return file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_rawDescGZIP(), []int{0}
}

func (x *RestaurantPartnerSubscriptionBatchUpdatedV2) GetRestaurantPartnerDataList() []*RestaurantPartnerSubscriptionBatchUpdatedV2_Subscription {
	if x != nil {
		return x.RestaurantPartnerDataList
	}
	return nil
}

func (x *RestaurantPartnerSubscriptionBatchUpdatedV2) GetRemovedRestaurantPartnerDataList() []*RestaurantPartnerSubscriptionBatchUpdatedV2_Subscription {
	if x != nil {
		return x.RemovedRestaurantPartnerDataList
	}
	return nil
}

func (x *RestaurantPartnerSubscriptionBatchUpdatedV2) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *RestaurantPartnerSubscriptionBatchUpdatedV2) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RestaurantPartnerSubscriptionBatchUpdatedV2) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RestaurantPartnerSubscriptionBatchUpdatedV2) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *RestaurantPartnerSubscriptionBatchUpdatedV2) GetRaisingComponent() string {
	if x != nil {
		return x.RaisingComponent
	}
	return ""
}

type RestaurantPartnerSubscriptionBatchUpdatedV2_Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerId   int32  `protobuf:"varint,1,opt,name=partner_id,json=PartnerId,proto3" json:"partner_id,omitempty"`
	PartnerName string `protobuf:"bytes,2,opt,name=partner_name,json=PartnerName,proto3" json:"partner_name,omitempty"`
	ServiceType string `protobuf:"bytes,3,opt,name=service_type,json=ServiceType,proto3" json:"service_type,omitempty"`
	// The Just Eat restaurant id.
	RestaurantId                    int32  `protobuf:"varint,4,opt,name=restaurant_id,json=RestaurantId,proto3" json:"restaurant_id,omitempty"`
	PartnerGroup                    string `protobuf:"bytes,5,opt,name=partner_group,json=PartnerGroup,proto3" json:"partner_group,omitempty"`
	PartnerSubscriptionId           int32  `protobuf:"varint,6,opt,name=partner_subscription_id,json=PartnerSubscriptionId,proto3" json:"partner_subscription_id,omitempty"`
	PartnerSubscriptionName         string `protobuf:"bytes,7,opt,name=partner_subscription_name,json=PartnerSubscriptionName,proto3" json:"partner_subscription_name,omitempty"`
	ServiceTypeId                   int32  `protobuf:"varint,8,opt,name=service_type_id,json=ServiceTypeId,proto3" json:"service_type_id,omitempty"`
	RestaurantPartnerSubscriptionId int32  `protobuf:"varint,9,opt,name=restaurant_partner_subscription_id,json=RestaurantPartnerSubscriptionId,proto3" json:"restaurant_partner_subscription_id,omitempty"`
}

func (x *RestaurantPartnerSubscriptionBatchUpdatedV2_Subscription) Reset() {
	*x = RestaurantPartnerSubscriptionBatchUpdatedV2_Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestaurantPartnerSubscriptionBatchUpdatedV2_Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestaurantPartnerSubscriptionBatchUpdatedV2_Subscription) ProtoMessage() {}

func (x *RestaurantPartnerSubscriptionBatchUpdatedV2_Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestaurantPartnerSubscriptionBatchUpdatedV2_Subscription.ProtoReflect.Descriptor instead.
func (*RestaurantPartnerSubscriptionBatchUpdatedV2_Subscription) Descriptor() ([]byte, []int) {
	return file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RestaurantPartnerSubscriptionBatchUpdatedV2_Subscription) GetPartnerId() int32 {
	if x != nil {
		return x.PartnerId
	}
	return 0
}

func (x *RestaurantPartnerSubscriptionBatchUpdatedV2_Subscription) GetPartnerName() string {
	if x != nil {
		return x.PartnerName
	}
	return ""
}

func (x *RestaurantPartnerSubscriptionBatchUpdatedV2_Subscription) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *RestaurantPartnerSubscriptionBatchUpdatedV2_Subscription) GetRestaurantId() int32 {
	if x != nil {
		return x.RestaurantId
	}
	return 0
}

func (x *RestaurantPartnerSubscriptionBatchUpdatedV2_Subscription) GetPartnerGroup() string {
	if x != nil {
		return x.PartnerGroup
	}
	return ""
}

func (x *RestaurantPartnerSubscriptionBatchUpdatedV2_Subscription) GetPartnerSubscriptionId() int32 {
	if x != nil {
		return x.PartnerSubscriptionId
	}
	return 0
}

func (x *RestaurantPartnerSubscriptionBatchUpdatedV2_Subscription) GetPartnerSubscriptionName() string {
	if x != nil {
		return x.PartnerSubscriptionName
	}
	return ""
}

func (x *RestaurantPartnerSubscriptionBatchUpdatedV2_Subscription) GetServiceTypeId() int32 {
	if x != nil {
		return x.ServiceTypeId
	}
	return 0
}

func (x *RestaurantPartnerSubscriptionBatchUpdatedV2_Subscription) GetRestaurantPartnerSubscriptionId() int32 {
	if x != nil {
		return x.RestaurantPartnerSubscriptionId
	}
	return 0
}

var File_justeat_restaurant_partner_subscription_batch_updated_v2_proto protoreflect.FileDescriptor

var file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_rawDesc = []byte{
	0x0a, 0x3e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x75,
	0x72, 0x61, 0x6e, 0x74, 0x2d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2d, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2d,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x07, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x1a, 0x15, 0x66, 0x6c, 0x79, 0x74, 0x2f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf1, 0x07, 0x0a, 0x2b, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x56, 0x32, 0x12, 0x82, 0x01, 0x0a, 0x1c, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72,
	0x61, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x56, 0x32, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x19, 0x52, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x91, 0x01, 0x0a,
	0x24, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72,
	0x61, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6a, 0x75,
	0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56,
	0x32, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x20,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x61, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52,
	0x61, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a,
	0xa6, 0x03, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x36, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x15, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x22, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x52, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72,
	0x61, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x71, 0x82, 0xb5, 0x18, 0x38, 0x6a, 0x75,
	0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x76, 0x32, 0xa2, 0xbb, 0x18, 0x2b, 0x52, 0x65, 0x73, 0x74, 0x61, 0x75,
	0x72, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x56, 0x32, 0xaa, 0xbb, 0x18, 0x02, 0x75, 0x6b, 0x42, 0xa1, 0x01, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x42, 0x30, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56, 0x32, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x79, 0x70,
	0x61, 0x79, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6a, 0x75,
	0x73, 0x74, 0x65, 0x61, 0x74, 0xa2, 0x02, 0x03, 0x4a, 0x58, 0x58, 0xaa, 0x02, 0x07, 0x4a, 0x75,
	0x73, 0x74, 0x65, 0x61, 0x74, 0xca, 0x02, 0x07, 0x4a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0xe2,
	0x02, 0x13, 0x4a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x07, 0x4a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_rawDescOnce sync.Once
	file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_rawDescData = file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_rawDesc
)

func file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_rawDescGZIP() []byte {
	file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_rawDescOnce.Do(func() {
		file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_rawDescData = protoimpl.X.CompressGZIP(file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_rawDescData)
	})
	return file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_rawDescData
}

var file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_goTypes = []interface{}{
	(*RestaurantPartnerSubscriptionBatchUpdatedV2)(nil),              // 0: justeat.RestaurantPartnerSubscriptionBatchUpdatedV2
	(*RestaurantPartnerSubscriptionBatchUpdatedV2_Subscription)(nil), // 1: justeat.RestaurantPartnerSubscriptionBatchUpdatedV2.Subscription
}
var file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_depIdxs = []int32{
	1, // 0: justeat.RestaurantPartnerSubscriptionBatchUpdatedV2.restaurant_partner_data_list:type_name -> justeat.RestaurantPartnerSubscriptionBatchUpdatedV2.Subscription
	1, // 1: justeat.RestaurantPartnerSubscriptionBatchUpdatedV2.removed_restaurant_partner_data_list:type_name -> justeat.RestaurantPartnerSubscriptionBatchUpdatedV2.Subscription
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_init() }
func file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_init() {
	if File_justeat_restaurant_partner_subscription_batch_updated_v2_proto != nil {
		return
	}
	file_justeat_options_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestaurantPartnerSubscriptionBatchUpdatedV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestaurantPartnerSubscriptionBatchUpdatedV2_Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_goTypes,
		DependencyIndexes: file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_depIdxs,
		MessageInfos:      file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_msgTypes,
	}.Build()
	File_justeat_restaurant_partner_subscription_batch_updated_v2_proto = out.File
	file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_rawDesc = nil
	file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_goTypes = nil
	file_justeat_restaurant_partner_subscription_batch_updated_v2_proto_depIdxs = nil
}
