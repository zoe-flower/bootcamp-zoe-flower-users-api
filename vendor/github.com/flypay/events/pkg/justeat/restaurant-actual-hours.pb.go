// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: justeat/restaurant-actual-hours.proto

package justeat

import (
	flyt "github.com/flypay/events/pkg/flyt"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RestaurantActualHoursUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	Restaurant            *flyt.Ident        `protobuf:"bytes,1,opt,name=restaurant,proto3" json:"restaurant,omitempty"`
	TimeZone              string             `protobuf:"bytes,2,opt,name=time_zone,json=TimeZone,proto3" json:"time_zone,omitempty"`
	RestaurantActualHours []*RestaurantHours `protobuf:"bytes,3,rep,name=restaurant_actual_hours,json=RestaurantActualHours,proto3" json:"restaurant_actual_hours,omitempty"`
	DateUpdated           string             `protobuf:"bytes,4,opt,name=date_updated,proto3" json:"date_updated,omitempty"`
	EntityVersion         string             `protobuf:"bytes,5,opt,name=entity_version,proto3" json:"entity_version,omitempty"`
	Id                    string             `protobuf:"bytes,6,opt,name=id,json=Id,proto3" json:"id,omitempty"`
	TimeStamp             string             `protobuf:"bytes,7,opt,name=time_stamp,json=TimeStamp,proto3" json:"time_stamp,omitempty"`
	RestaurantId          string             `protobuf:"bytes,8,opt,name=restaurant_id,json=RestaurantId,proto3" json:"restaurant_id,omitempty"`
	Tenant                string             `protobuf:"bytes,9,opt,name=tenant,json=Tenant,proto3" json:"tenant,omitempty"`
}

func (x *RestaurantActualHoursUpdated) Reset() {
	*x = RestaurantActualHoursUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_restaurant_actual_hours_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestaurantActualHoursUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestaurantActualHoursUpdated) ProtoMessage() {}

func (x *RestaurantActualHoursUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_restaurant_actual_hours_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestaurantActualHoursUpdated.ProtoReflect.Descriptor instead.
func (*RestaurantActualHoursUpdated) Descriptor() ([]byte, []int) {
	return file_justeat_restaurant_actual_hours_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Do not use.
func (x *RestaurantActualHoursUpdated) GetRestaurant() *flyt.Ident {
	if x != nil {
		return x.Restaurant
	}
	return nil
}

func (x *RestaurantActualHoursUpdated) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *RestaurantActualHoursUpdated) GetRestaurantActualHours() []*RestaurantHours {
	if x != nil {
		return x.RestaurantActualHours
	}
	return nil
}

func (x *RestaurantActualHoursUpdated) GetDateUpdated() string {
	if x != nil {
		return x.DateUpdated
	}
	return ""
}

func (x *RestaurantActualHoursUpdated) GetEntityVersion() string {
	if x != nil {
		return x.EntityVersion
	}
	return ""
}

func (x *RestaurantActualHoursUpdated) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RestaurantActualHoursUpdated) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

func (x *RestaurantActualHoursUpdated) GetRestaurantId() string {
	if x != nil {
		return x.RestaurantId
	}
	return ""
}

func (x *RestaurantActualHoursUpdated) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

type RestaurantHours struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailabilityId string `protobuf:"bytes,1,opt,name=availability_id,json=AvailabilityId,proto3" json:"availability_id,omitempty"`
	// Deprecated: Do not use.
	ServiceType          ServiceType        `protobuf:"varint,2,opt,name=service_type,json=serviceType,proto3,enum=justeat.ServiceType" json:"service_type,omitempty"`
	OrderTimes           *OrderTimeRanges   `protobuf:"bytes,3,opt,name=order_times,json=OrderTimes,proto3" json:"order_times,omitempty"`
	AvailabilityHours    *AvailabilityTimes `protobuf:"bytes,4,opt,name=availability_hours,json=AvailabilityHours,proto3" json:"availability_hours,omitempty"`
	PreOrderEnabledTimes *DayOrderTimeSlots `protobuf:"bytes,5,opt,name=pre_order_enabled_times,json=PreOrderEnabledTimes,proto3" json:"pre_order_enabled_times,omitempty"`
	OrderReadyTimes      *DayOrderTimes     `protobuf:"bytes,6,opt,name=order_ready_times,json=OrderReadyTimes,proto3" json:"order_ready_times,omitempty"`
	DateUpdated          string             `protobuf:"bytes,7,opt,name=date_updated,json=DateUpdated,proto3" json:"date_updated,omitempty"`
	ServiceTypeS         string             `protobuf:"bytes,8,opt,name=service_type_s,json=ServiceType,proto3" json:"service_type_s,omitempty"`
}

func (x *RestaurantHours) Reset() {
	*x = RestaurantHours{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_restaurant_actual_hours_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestaurantHours) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestaurantHours) ProtoMessage() {}

func (x *RestaurantHours) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_restaurant_actual_hours_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestaurantHours.ProtoReflect.Descriptor instead.
func (*RestaurantHours) Descriptor() ([]byte, []int) {
	return file_justeat_restaurant_actual_hours_proto_rawDescGZIP(), []int{1}
}

func (x *RestaurantHours) GetAvailabilityId() string {
	if x != nil {
		return x.AvailabilityId
	}
	return ""
}

// Deprecated: Do not use.
func (x *RestaurantHours) GetServiceType() ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return ServiceType_DELIVERY
}

func (x *RestaurantHours) GetOrderTimes() *OrderTimeRanges {
	if x != nil {
		return x.OrderTimes
	}
	return nil
}

func (x *RestaurantHours) GetAvailabilityHours() *AvailabilityTimes {
	if x != nil {
		return x.AvailabilityHours
	}
	return nil
}

func (x *RestaurantHours) GetPreOrderEnabledTimes() *DayOrderTimeSlots {
	if x != nil {
		return x.PreOrderEnabledTimes
	}
	return nil
}

func (x *RestaurantHours) GetOrderReadyTimes() *DayOrderTimes {
	if x != nil {
		return x.OrderReadyTimes
	}
	return nil
}

func (x *RestaurantHours) GetDateUpdated() string {
	if x != nil {
		return x.DateUpdated
	}
	return ""
}

func (x *RestaurantHours) GetServiceTypeS() string {
	if x != nil {
		return x.ServiceTypeS
	}
	return ""
}

type OrderTimeRanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Monday    *TimeRange `protobuf:"bytes,1,opt,name=monday,json=Monday,proto3" json:"monday,omitempty"`
	Tuesday   *TimeRange `protobuf:"bytes,2,opt,name=tuesday,json=Tuesday,proto3" json:"tuesday,omitempty"`
	Wednesday *TimeRange `protobuf:"bytes,3,opt,name=wednesday,json=Wednesday,proto3" json:"wednesday,omitempty"`
	Thursday  *TimeRange `protobuf:"bytes,4,opt,name=thursday,json=Thursday,proto3" json:"thursday,omitempty"`
	Friday    *TimeRange `protobuf:"bytes,5,opt,name=friday,json=Friday,proto3" json:"friday,omitempty"`
	Saturday  *TimeRange `protobuf:"bytes,6,opt,name=saturday,json=Saturday,proto3" json:"saturday,omitempty"`
	Sunday    *TimeRange `protobuf:"bytes,7,opt,name=sunday,json=Sunday,proto3" json:"sunday,omitempty"`
}

func (x *OrderTimeRanges) Reset() {
	*x = OrderTimeRanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_restaurant_actual_hours_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderTimeRanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderTimeRanges) ProtoMessage() {}

func (x *OrderTimeRanges) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_restaurant_actual_hours_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderTimeRanges.ProtoReflect.Descriptor instead.
func (*OrderTimeRanges) Descriptor() ([]byte, []int) {
	return file_justeat_restaurant_actual_hours_proto_rawDescGZIP(), []int{2}
}

func (x *OrderTimeRanges) GetMonday() *TimeRange {
	if x != nil {
		return x.Monday
	}
	return nil
}

func (x *OrderTimeRanges) GetTuesday() *TimeRange {
	if x != nil {
		return x.Tuesday
	}
	return nil
}

func (x *OrderTimeRanges) GetWednesday() *TimeRange {
	if x != nil {
		return x.Wednesday
	}
	return nil
}

func (x *OrderTimeRanges) GetThursday() *TimeRange {
	if x != nil {
		return x.Thursday
	}
	return nil
}

func (x *OrderTimeRanges) GetFriday() *TimeRange {
	if x != nil {
		return x.Friday
	}
	return nil
}

func (x *OrderTimeRanges) GetSaturday() *TimeRange {
	if x != nil {
		return x.Saturday
	}
	return nil
}

func (x *OrderTimeRanges) GetSunday() *TimeRange {
	if x != nil {
		return x.Sunday
	}
	return nil
}

type AvailabilityTimes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Monday    []*ActualHours `protobuf:"bytes,1,rep,name=monday,json=Monday,proto3" json:"monday,omitempty"`
	Tuesday   []*ActualHours `protobuf:"bytes,2,rep,name=tuesday,json=Tuesday,proto3" json:"tuesday,omitempty"`
	Wednesday []*ActualHours `protobuf:"bytes,3,rep,name=wednesday,json=Wednesday,proto3" json:"wednesday,omitempty"`
	Thursday  []*ActualHours `protobuf:"bytes,4,rep,name=thursday,json=Thursday,proto3" json:"thursday,omitempty"`
	Friday    []*ActualHours `protobuf:"bytes,5,rep,name=friday,json=Friday,proto3" json:"friday,omitempty"`
	Saturday  []*ActualHours `protobuf:"bytes,6,rep,name=saturday,json=Saturday,proto3" json:"saturday,omitempty"`
	Sunday    []*ActualHours `protobuf:"bytes,7,rep,name=sunday,json=Sunday,proto3" json:"sunday,omitempty"`
}

func (x *AvailabilityTimes) Reset() {
	*x = AvailabilityTimes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_restaurant_actual_hours_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailabilityTimes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailabilityTimes) ProtoMessage() {}

func (x *AvailabilityTimes) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_restaurant_actual_hours_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailabilityTimes.ProtoReflect.Descriptor instead.
func (*AvailabilityTimes) Descriptor() ([]byte, []int) {
	return file_justeat_restaurant_actual_hours_proto_rawDescGZIP(), []int{3}
}

func (x *AvailabilityTimes) GetMonday() []*ActualHours {
	if x != nil {
		return x.Monday
	}
	return nil
}

func (x *AvailabilityTimes) GetTuesday() []*ActualHours {
	if x != nil {
		return x.Tuesday
	}
	return nil
}

func (x *AvailabilityTimes) GetWednesday() []*ActualHours {
	if x != nil {
		return x.Wednesday
	}
	return nil
}

func (x *AvailabilityTimes) GetThursday() []*ActualHours {
	if x != nil {
		return x.Thursday
	}
	return nil
}

func (x *AvailabilityTimes) GetFriday() []*ActualHours {
	if x != nil {
		return x.Friday
	}
	return nil
}

func (x *AvailabilityTimes) GetSaturday() []*ActualHours {
	if x != nil {
		return x.Saturday
	}
	return nil
}

func (x *AvailabilityTimes) GetSunday() []*ActualHours {
	if x != nil {
		return x.Sunday
	}
	return nil
}

type TimeSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start string `protobuf:"bytes,1,opt,name=start,json=Start,proto3" json:"start,omitempty"`
	End   string `protobuf:"bytes,2,opt,name=end,json=End,proto3" json:"end,omitempty"`
}

func (x *TimeSlot) Reset() {
	*x = TimeSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_restaurant_actual_hours_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSlot) ProtoMessage() {}

func (x *TimeSlot) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_restaurant_actual_hours_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSlot.ProtoReflect.Descriptor instead.
func (*TimeSlot) Descriptor() ([]byte, []int) {
	return file_justeat_restaurant_actual_hours_proto_rawDescGZIP(), []int{4}
}

func (x *TimeSlot) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *TimeSlot) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

type DayOrderTimes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Monday    *DayOrderTimeSlots `protobuf:"bytes,1,opt,name=monday,json=Monday,proto3" json:"monday,omitempty"`
	Tuesday   *DayOrderTimeSlots `protobuf:"bytes,2,opt,name=tuesday,json=Tuesday,proto3" json:"tuesday,omitempty"`
	Wednesday *DayOrderTimeSlots `protobuf:"bytes,3,opt,name=wednesday,json=Wednesday,proto3" json:"wednesday,omitempty"`
	Thursday  *DayOrderTimeSlots `protobuf:"bytes,4,opt,name=thursday,json=Thursday,proto3" json:"thursday,omitempty"`
	Friday    *DayOrderTimeSlots `protobuf:"bytes,5,opt,name=friday,json=Friday,proto3" json:"friday,omitempty"`
	Saturday  *DayOrderTimeSlots `protobuf:"bytes,6,opt,name=saturday,json=Saturday,proto3" json:"saturday,omitempty"`
	Sunday    *DayOrderTimeSlots `protobuf:"bytes,7,opt,name=sunday,json=Sunday,proto3" json:"sunday,omitempty"`
}

func (x *DayOrderTimes) Reset() {
	*x = DayOrderTimes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_restaurant_actual_hours_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DayOrderTimes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DayOrderTimes) ProtoMessage() {}

func (x *DayOrderTimes) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_restaurant_actual_hours_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DayOrderTimes.ProtoReflect.Descriptor instead.
func (*DayOrderTimes) Descriptor() ([]byte, []int) {
	return file_justeat_restaurant_actual_hours_proto_rawDescGZIP(), []int{5}
}

func (x *DayOrderTimes) GetMonday() *DayOrderTimeSlots {
	if x != nil {
		return x.Monday
	}
	return nil
}

func (x *DayOrderTimes) GetTuesday() *DayOrderTimeSlots {
	if x != nil {
		return x.Tuesday
	}
	return nil
}

func (x *DayOrderTimes) GetWednesday() *DayOrderTimeSlots {
	if x != nil {
		return x.Wednesday
	}
	return nil
}

func (x *DayOrderTimes) GetThursday() *DayOrderTimeSlots {
	if x != nil {
		return x.Thursday
	}
	return nil
}

func (x *DayOrderTimes) GetFriday() *DayOrderTimeSlots {
	if x != nil {
		return x.Friday
	}
	return nil
}

func (x *DayOrderTimes) GetSaturday() *DayOrderTimeSlots {
	if x != nil {
		return x.Saturday
	}
	return nil
}

func (x *DayOrderTimes) GetSunday() *DayOrderTimeSlots {
	if x != nil {
		return x.Sunday
	}
	return nil
}

type DayOrderTimeSlots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Monday    []*TimeSlot `protobuf:"bytes,1,rep,name=monday,json=Monday,proto3" json:"monday,omitempty"`
	Tuesday   []*TimeSlot `protobuf:"bytes,2,rep,name=tuesday,json=Tuesday,proto3" json:"tuesday,omitempty"`
	Wednesday []*TimeSlot `protobuf:"bytes,3,rep,name=wednesday,json=Wednesday,proto3" json:"wednesday,omitempty"`
	Thursday  []*TimeSlot `protobuf:"bytes,4,rep,name=thursday,json=Thursday,proto3" json:"thursday,omitempty"`
	Friday    []*TimeSlot `protobuf:"bytes,5,rep,name=friday,json=Friday,proto3" json:"friday,omitempty"`
	Saturday  []*TimeSlot `protobuf:"bytes,6,rep,name=saturday,json=Saturday,proto3" json:"saturday,omitempty"`
	Sunday    []*TimeSlot `protobuf:"bytes,7,rep,name=sunday,json=Sunday,proto3" json:"sunday,omitempty"`
}

func (x *DayOrderTimeSlots) Reset() {
	*x = DayOrderTimeSlots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_restaurant_actual_hours_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DayOrderTimeSlots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DayOrderTimeSlots) ProtoMessage() {}

func (x *DayOrderTimeSlots) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_restaurant_actual_hours_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DayOrderTimeSlots.ProtoReflect.Descriptor instead.
func (*DayOrderTimeSlots) Descriptor() ([]byte, []int) {
	return file_justeat_restaurant_actual_hours_proto_rawDescGZIP(), []int{6}
}

func (x *DayOrderTimeSlots) GetMonday() []*TimeSlot {
	if x != nil {
		return x.Monday
	}
	return nil
}

func (x *DayOrderTimeSlots) GetTuesday() []*TimeSlot {
	if x != nil {
		return x.Tuesday
	}
	return nil
}

func (x *DayOrderTimeSlots) GetWednesday() []*TimeSlot {
	if x != nil {
		return x.Wednesday
	}
	return nil
}

func (x *DayOrderTimeSlots) GetThursday() []*TimeSlot {
	if x != nil {
		return x.Thursday
	}
	return nil
}

func (x *DayOrderTimeSlots) GetFriday() []*TimeSlot {
	if x != nil {
		return x.Friday
	}
	return nil
}

func (x *DayOrderTimeSlots) GetSaturday() []*TimeSlot {
	if x != nil {
		return x.Saturday
	}
	return nil
}

func (x *DayOrderTimeSlots) GetSunday() []*TimeSlot {
	if x != nil {
		return x.Sunday
	}
	return nil
}

var File_justeat_restaurant_actual_hours_proto protoreflect.FileDescriptor

var file_justeat_restaurant_actual_hours_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x75,
	0x72, 0x61, 0x6e, 0x74, 0x2d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x68, 0x6f, 0x75, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74,
	0x1a, 0x15, 0x66, 0x6c, 0x79, 0x74, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x66, 0x6c, 0x79, 0x74, 0x2f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6a, 0x75, 0x73, 0x74, 0x65,
	0x61, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x2d, 0x68, 0x6f,
	0x75, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6a, 0x75, 0x73, 0x74, 0x65,
	0x61, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xc5, 0x03, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x41,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12,
	0x50, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x75, 0x72, 0x61, 0x6e, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x15, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x3a, 0x4d, 0x82, 0xb5, 0x18, 0x27, 0x6a,
	0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x2e, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x2e, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0xa2, 0xbb, 0x18, 0x1e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x75,
	0x72, 0x61, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x76, 0x32, 0x22, 0xdc, 0x03, 0x0a, 0x0f, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6a, 0x75,
	0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61,
	0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x49, 0x0a,
	0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x61, 0x74, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x11, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x51, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x61, 0x74, 0x2e, 0x44, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x14, 0x50, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x11, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74,
	0x2e, 0x44, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x0f,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x23, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd5, 0x02, 0x0a, 0x0f, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x6d,
	0x6f, 0x6e, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6a, 0x75,
	0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x06, 0x4d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x74, 0x75, 0x65, 0x73, 0x64,
	0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65,
	0x61, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x54, 0x75,
	0x65, 0x73, 0x64, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64,
	0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65,
	0x61, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x57, 0x65,
	0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x08, 0x74, 0x68, 0x75, 0x72, 0x73,
	0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x61, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x54,
	0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x66, 0x72, 0x69, 0x64, 0x61,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61,
	0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x46, 0x72, 0x69,
	0x64, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x53, 0x61, 0x74, 0x75, 0x72,
	0x64, 0x61, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x53, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x22,
	0xe5, 0x02, 0x0a, 0x11, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e,
	0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x06, 0x4d, 0x6f, 0x6e,
	0x64, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x41,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x07, 0x54, 0x75, 0x65, 0x73,
	0x64, 0x61, 0x79, 0x12, 0x32, 0x0a, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74,
	0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x09, 0x57, 0x65,
	0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x74, 0x68, 0x75, 0x72, 0x73,
	0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x61, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52,
	0x08, 0x54, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x72, 0x69,
	0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x61, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52,
	0x06, 0x46, 0x72, 0x69, 0x64, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x61, 0x74, 0x75, 0x72,
	0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x61, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52,
	0x08, 0x53, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x75, 0x6e,
	0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x61, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52,
	0x06, 0x53, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x22, 0x32, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x6c, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x22, 0x8b, 0x03, 0x0a, 0x0d,
	0x44, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a,
	0x06, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x44, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x06, 0x4d, 0x6f, 0x6e, 0x64, 0x61,
	0x79, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x44, 0x61, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x07,
	0x54, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65,
	0x73, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6a, 0x75, 0x73,
	0x74, 0x65, 0x61, 0x74, 0x2e, 0x44, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x09, 0x57, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61,
	0x79, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x44, 0x61,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52,
	0x08, 0x54, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x72, 0x69,
	0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x61, 0x74, 0x2e, 0x44, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x06, 0x46, 0x72, 0x69, 0x64, 0x61, 0x79, 0x12, 0x36, 0x0a,
	0x08, 0x73, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x44, 0x61, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x08, 0x53, 0x61, 0x74,
	0x75, 0x72, 0x64, 0x61, 0x79, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e,
	0x44, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74,
	0x73, 0x52, 0x06, 0x53, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x22, 0xd0, 0x02, 0x0a, 0x11, 0x44, 0x61,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12,
	0x29, 0x0a, 0x06, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c,
	0x6f, 0x74, 0x52, 0x06, 0x4d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x12, 0x2b, 0x0a, 0x07, 0x74, 0x75,
	0x65, 0x73, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6a, 0x75,
	0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x07,
	0x54, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x12, 0x2f, 0x0a, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65,
	0x73, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6a, 0x75, 0x73,
	0x74, 0x65, 0x61, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x09, 0x57,
	0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x12, 0x2d, 0x0a, 0x08, 0x74, 0x68, 0x75, 0x72,
	0x73, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6a, 0x75, 0x73,
	0x74, 0x65, 0x61, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x08, 0x54,
	0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x12, 0x29, 0x0a, 0x06, 0x66, 0x72, 0x69, 0x64, 0x61,
	0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61,
	0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x06, 0x46, 0x72, 0x69, 0x64,
	0x61, 0x79, 0x12, 0x2d, 0x0a, 0x08, 0x73, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x08, 0x53, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61,
	0x79, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x6c, 0x6f, 0x74, 0x52, 0x06, 0x53, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x42, 0x8b, 0x01, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x42, 0x1a, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f,
	0x75, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x79, 0x70, 0x61, 0x79, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74,
	0xa2, 0x02, 0x03, 0x4a, 0x58, 0x58, 0xaa, 0x02, 0x07, 0x4a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74,
	0xca, 0x02, 0x07, 0x4a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0xe2, 0x02, 0x13, 0x4a, 0x75, 0x73,
	0x74, 0x65, 0x61, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x07, 0x4a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_justeat_restaurant_actual_hours_proto_rawDescOnce sync.Once
	file_justeat_restaurant_actual_hours_proto_rawDescData = file_justeat_restaurant_actual_hours_proto_rawDesc
)

func file_justeat_restaurant_actual_hours_proto_rawDescGZIP() []byte {
	file_justeat_restaurant_actual_hours_proto_rawDescOnce.Do(func() {
		file_justeat_restaurant_actual_hours_proto_rawDescData = protoimpl.X.CompressGZIP(file_justeat_restaurant_actual_hours_proto_rawDescData)
	})
	return file_justeat_restaurant_actual_hours_proto_rawDescData
}

var file_justeat_restaurant_actual_hours_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_justeat_restaurant_actual_hours_proto_goTypes = []interface{}{
	(*RestaurantActualHoursUpdated)(nil), // 0: justeat.RestaurantActualHoursUpdated
	(*RestaurantHours)(nil),              // 1: justeat.RestaurantHours
	(*OrderTimeRanges)(nil),              // 2: justeat.OrderTimeRanges
	(*AvailabilityTimes)(nil),            // 3: justeat.AvailabilityTimes
	(*TimeSlot)(nil),                     // 4: justeat.TimeSlot
	(*DayOrderTimes)(nil),                // 5: justeat.DayOrderTimes
	(*DayOrderTimeSlots)(nil),            // 6: justeat.DayOrderTimeSlots
	(*flyt.Ident)(nil),                   // 7: flyt.Ident
	(ServiceType)(0),                     // 8: justeat.ServiceType
	(*TimeRange)(nil),                    // 9: justeat.TimeRange
	(*ActualHours)(nil),                  // 10: justeat.ActualHours
}
var file_justeat_restaurant_actual_hours_proto_depIdxs = []int32{
	7,  // 0: justeat.RestaurantActualHoursUpdated.restaurant:type_name -> flyt.Ident
	1,  // 1: justeat.RestaurantActualHoursUpdated.restaurant_actual_hours:type_name -> justeat.RestaurantHours
	8,  // 2: justeat.RestaurantHours.service_type:type_name -> justeat.ServiceType
	2,  // 3: justeat.RestaurantHours.order_times:type_name -> justeat.OrderTimeRanges
	3,  // 4: justeat.RestaurantHours.availability_hours:type_name -> justeat.AvailabilityTimes
	6,  // 5: justeat.RestaurantHours.pre_order_enabled_times:type_name -> justeat.DayOrderTimeSlots
	5,  // 6: justeat.RestaurantHours.order_ready_times:type_name -> justeat.DayOrderTimes
	9,  // 7: justeat.OrderTimeRanges.monday:type_name -> justeat.TimeRange
	9,  // 8: justeat.OrderTimeRanges.tuesday:type_name -> justeat.TimeRange
	9,  // 9: justeat.OrderTimeRanges.wednesday:type_name -> justeat.TimeRange
	9,  // 10: justeat.OrderTimeRanges.thursday:type_name -> justeat.TimeRange
	9,  // 11: justeat.OrderTimeRanges.friday:type_name -> justeat.TimeRange
	9,  // 12: justeat.OrderTimeRanges.saturday:type_name -> justeat.TimeRange
	9,  // 13: justeat.OrderTimeRanges.sunday:type_name -> justeat.TimeRange
	10, // 14: justeat.AvailabilityTimes.monday:type_name -> justeat.ActualHours
	10, // 15: justeat.AvailabilityTimes.tuesday:type_name -> justeat.ActualHours
	10, // 16: justeat.AvailabilityTimes.wednesday:type_name -> justeat.ActualHours
	10, // 17: justeat.AvailabilityTimes.thursday:type_name -> justeat.ActualHours
	10, // 18: justeat.AvailabilityTimes.friday:type_name -> justeat.ActualHours
	10, // 19: justeat.AvailabilityTimes.saturday:type_name -> justeat.ActualHours
	10, // 20: justeat.AvailabilityTimes.sunday:type_name -> justeat.ActualHours
	6,  // 21: justeat.DayOrderTimes.monday:type_name -> justeat.DayOrderTimeSlots
	6,  // 22: justeat.DayOrderTimes.tuesday:type_name -> justeat.DayOrderTimeSlots
	6,  // 23: justeat.DayOrderTimes.wednesday:type_name -> justeat.DayOrderTimeSlots
	6,  // 24: justeat.DayOrderTimes.thursday:type_name -> justeat.DayOrderTimeSlots
	6,  // 25: justeat.DayOrderTimes.friday:type_name -> justeat.DayOrderTimeSlots
	6,  // 26: justeat.DayOrderTimes.saturday:type_name -> justeat.DayOrderTimeSlots
	6,  // 27: justeat.DayOrderTimes.sunday:type_name -> justeat.DayOrderTimeSlots
	4,  // 28: justeat.DayOrderTimeSlots.monday:type_name -> justeat.TimeSlot
	4,  // 29: justeat.DayOrderTimeSlots.tuesday:type_name -> justeat.TimeSlot
	4,  // 30: justeat.DayOrderTimeSlots.wednesday:type_name -> justeat.TimeSlot
	4,  // 31: justeat.DayOrderTimeSlots.thursday:type_name -> justeat.TimeSlot
	4,  // 32: justeat.DayOrderTimeSlots.friday:type_name -> justeat.TimeSlot
	4,  // 33: justeat.DayOrderTimeSlots.saturday:type_name -> justeat.TimeSlot
	4,  // 34: justeat.DayOrderTimeSlots.sunday:type_name -> justeat.TimeSlot
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_justeat_restaurant_actual_hours_proto_init() }
func file_justeat_restaurant_actual_hours_proto_init() {
	if File_justeat_restaurant_actual_hours_proto != nil {
		return
	}
	file_justeat_restaurant_hours_proto_init()
	file_justeat_options_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_justeat_restaurant_actual_hours_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestaurantActualHoursUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_restaurant_actual_hours_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestaurantHours); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_restaurant_actual_hours_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderTimeRanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_restaurant_actual_hours_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailabilityTimes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_restaurant_actual_hours_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_restaurant_actual_hours_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DayOrderTimes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_restaurant_actual_hours_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DayOrderTimeSlots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_justeat_restaurant_actual_hours_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_justeat_restaurant_actual_hours_proto_goTypes,
		DependencyIndexes: file_justeat_restaurant_actual_hours_proto_depIdxs,
		MessageInfos:      file_justeat_restaurant_actual_hours_proto_msgTypes,
	}.Build()
	File_justeat_restaurant_actual_hours_proto = out.File
	file_justeat_restaurant_actual_hours_proto_rawDesc = nil
	file_justeat_restaurant_actual_hours_proto_goTypes = nil
	file_justeat_restaurant_actual_hours_proto_depIdxs = nil
}
