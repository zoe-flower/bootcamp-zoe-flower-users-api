// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: justeat/menutype-v3.proto

package justeat

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JustEatMenuV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RestaurantId   string                   `protobuf:"bytes,1,opt,name=restaurant_id,json=restaurantId,proto3" json:"restaurant_id,omitempty"`
	Name           string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description    string                   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Availabilities []*JustEatAvailabilityV3 `protobuf:"bytes,4,rep,name=availabilities,proto3" json:"availabilities,omitempty"`
	Categories     []*JustEatCategoryV3     `protobuf:"bytes,5,rep,name=categories,proto3" json:"categories,omitempty"`
	Items          []*JustEatMenuItemV3     `protobuf:"bytes,6,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *JustEatMenuV3) Reset() {
	*x = JustEatMenuV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_v3_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JustEatMenuV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JustEatMenuV3) ProtoMessage() {}

func (x *JustEatMenuV3) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_v3_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JustEatMenuV3.ProtoReflect.Descriptor instead.
func (*JustEatMenuV3) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_v3_proto_rawDescGZIP(), []int{0}
}

func (x *JustEatMenuV3) GetRestaurantId() string {
	if x != nil {
		return x.RestaurantId
	}
	return ""
}

func (x *JustEatMenuV3) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JustEatMenuV3) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *JustEatMenuV3) GetAvailabilities() []*JustEatAvailabilityV3 {
	if x != nil {
		return x.Availabilities
	}
	return nil
}

func (x *JustEatMenuV3) GetCategories() []*JustEatCategoryV3 {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *JustEatMenuV3) GetItems() []*JustEatMenuItemV3 {
	if x != nil {
		return x.Items
	}
	return nil
}

type JustEatMenuItemV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string                    `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	RequireOtherProducts bool                      `protobuf:"varint,4,opt,name=require_other_products,json=requireOtherProducts,proto3" json:"require_other_products,omitempty"`
	Description          string                    `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Labels               []string                  `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty"`
	Variations           []*JustEatVariationV3     `protobuf:"bytes,7,rep,name=variations,proto3" json:"variations,omitempty"`
	ModifierGroups       []*JustEatModifierGroupV3 `protobuf:"bytes,8,rep,name=modifier_groups,json=modifierGroups,proto3" json:"modifier_groups,omitempty"`
	DealGroups           []*JustEatDealGroupV3     `protobuf:"bytes,9,rep,name=deal_groups,json=dealGroups,proto3" json:"deal_groups,omitempty"`
	ImageUrl             string                    `protobuf:"bytes,10,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	Images               []*JustEatImageV3         `protobuf:"bytes,11,rep,name=images,proto3" json:"images,omitempty"`
	ExternalId           string                    `protobuf:"bytes,12,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
}

func (x *JustEatMenuItemV3) Reset() {
	*x = JustEatMenuItemV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_v3_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JustEatMenuItemV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JustEatMenuItemV3) ProtoMessage() {}

func (x *JustEatMenuItemV3) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_v3_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JustEatMenuItemV3.ProtoReflect.Descriptor instead.
func (*JustEatMenuItemV3) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_v3_proto_rawDescGZIP(), []int{1}
}

func (x *JustEatMenuItemV3) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JustEatMenuItemV3) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JustEatMenuItemV3) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *JustEatMenuItemV3) GetRequireOtherProducts() bool {
	if x != nil {
		return x.RequireOtherProducts
	}
	return false
}

func (x *JustEatMenuItemV3) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *JustEatMenuItemV3) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *JustEatMenuItemV3) GetVariations() []*JustEatVariationV3 {
	if x != nil {
		return x.Variations
	}
	return nil
}

func (x *JustEatMenuItemV3) GetModifierGroups() []*JustEatModifierGroupV3 {
	if x != nil {
		return x.ModifierGroups
	}
	return nil
}

func (x *JustEatMenuItemV3) GetDealGroups() []*JustEatDealGroupV3 {
	if x != nil {
		return x.DealGroups
	}
	return nil
}

func (x *JustEatMenuItemV3) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *JustEatMenuItemV3) GetImages() []*JustEatImageV3 {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *JustEatMenuItemV3) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

type JustEatCategoryV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ItemIds     []string `protobuf:"bytes,4,rep,name=item_ids,json=itemIds,proto3" json:"item_ids,omitempty"`
}

func (x *JustEatCategoryV3) Reset() {
	*x = JustEatCategoryV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_v3_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JustEatCategoryV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JustEatCategoryV3) ProtoMessage() {}

func (x *JustEatCategoryV3) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_v3_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JustEatCategoryV3.ProtoReflect.Descriptor instead.
func (*JustEatCategoryV3) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_v3_proto_rawDescGZIP(), []int{2}
}

func (x *JustEatCategoryV3) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JustEatCategoryV3) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JustEatCategoryV3) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *JustEatCategoryV3) GetItemIds() []string {
	if x != nil {
		return x.ItemIds
	}
	return nil
}

type JustEatImageV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source      string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Id          string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	UrlTemplate string `protobuf:"bytes,3,opt,name=url_template,json=urlTemplate,proto3" json:"url_template,omitempty"`
}

func (x *JustEatImageV3) Reset() {
	*x = JustEatImageV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_v3_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JustEatImageV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JustEatImageV3) ProtoMessage() {}

func (x *JustEatImageV3) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_v3_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JustEatImageV3.ProtoReflect.Descriptor instead.
func (*JustEatImageV3) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_v3_proto_rawDescGZIP(), []int{3}
}

func (x *JustEatImageV3) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *JustEatImageV3) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JustEatImageV3) GetUrlTemplate() string {
	if x != nil {
		return x.UrlTemplate
	}
	return ""
}

type JustEatVariationV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DealOnly              bool                         `protobuf:"varint,2,opt,name=deal_only,json=dealOnly,proto3" json:"deal_only,omitempty"`
	Id                    string                       `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string                       `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Type                  string                       `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	BasePriceCurrency     string                       `protobuf:"bytes,6,opt,name=base_price_currency,json=basePriceCurrency,proto3" json:"base_price_currency,omitempty"`
	KitchenNumber         string                       `protobuf:"bytes,7,opt,name=kitchen_number,json=kitchenNumber,proto3" json:"kitchen_number,omitempty"`
	AvailabilityIds       []string                     `protobuf:"bytes,8,rep,name=availability_ids,json=availabilityIds,proto3" json:"availability_ids,omitempty"`
	ModifierGroupsIds     []string                     `protobuf:"bytes,9,rep,name=modifier_groups_ids,json=modifierGroupsIds,proto3" json:"modifier_groups_ids,omitempty"`
	DealGroupsIds         []string                     `protobuf:"bytes,10,rep,name=deal_groups_ids,json=dealGroupsIds,proto3" json:"deal_groups_ids,omitempty"`
	NumberOfServings      *JustEatNumberOfServingsV3   `protobuf:"bytes,11,opt,name=number_of_servings,json=numberOfServings,proto3" json:"number_of_servings,omitempty"`
	Nutrition             *JustEatNutritionV3          `protobuf:"bytes,12,opt,name=nutrition,proto3" json:"nutrition,omitempty"`
	BasePriceF            float64                      `protobuf:"fixed64,13,opt,name=base_price_f,json=basePrice,proto3" json:"base_price_f,omitempty"`
	PhysicalProperties    *JustEatPhysicalPropertiesV3 `protobuf:"bytes,14,opt,name=physical_properties,json=physicalProperties,proto3" json:"physical_properties,omitempty"`
	Pricing               *JustEatPricingV3            `protobuf:"bytes,15,opt,name=pricing,proto3" json:"pricing,omitempty"`
	AdditionalInformation string                       `protobuf:"bytes,16,opt,name=additional_information,json=additionalInformation,proto3" json:"additional_information,omitempty"`
	Gtin                  string                       `protobuf:"bytes,17,opt,name=gtin,proto3" json:"gtin,omitempty"`
}

func (x *JustEatVariationV3) Reset() {
	*x = JustEatVariationV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_v3_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JustEatVariationV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JustEatVariationV3) ProtoMessage() {}

func (x *JustEatVariationV3) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_v3_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JustEatVariationV3.ProtoReflect.Descriptor instead.
func (*JustEatVariationV3) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_v3_proto_rawDescGZIP(), []int{4}
}

func (x *JustEatVariationV3) GetDealOnly() bool {
	if x != nil {
		return x.DealOnly
	}
	return false
}

func (x *JustEatVariationV3) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JustEatVariationV3) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JustEatVariationV3) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *JustEatVariationV3) GetBasePriceCurrency() string {
	if x != nil {
		return x.BasePriceCurrency
	}
	return ""
}

func (x *JustEatVariationV3) GetKitchenNumber() string {
	if x != nil {
		return x.KitchenNumber
	}
	return ""
}

func (x *JustEatVariationV3) GetAvailabilityIds() []string {
	if x != nil {
		return x.AvailabilityIds
	}
	return nil
}

func (x *JustEatVariationV3) GetModifierGroupsIds() []string {
	if x != nil {
		return x.ModifierGroupsIds
	}
	return nil
}

func (x *JustEatVariationV3) GetDealGroupsIds() []string {
	if x != nil {
		return x.DealGroupsIds
	}
	return nil
}

func (x *JustEatVariationV3) GetNumberOfServings() *JustEatNumberOfServingsV3 {
	if x != nil {
		return x.NumberOfServings
	}
	return nil
}

func (x *JustEatVariationV3) GetNutrition() *JustEatNutritionV3 {
	if x != nil {
		return x.Nutrition
	}
	return nil
}

func (x *JustEatVariationV3) GetBasePriceF() float64 {
	if x != nil {
		return x.BasePriceF
	}
	return 0
}

func (x *JustEatVariationV3) GetPhysicalProperties() *JustEatPhysicalPropertiesV3 {
	if x != nil {
		return x.PhysicalProperties
	}
	return nil
}

func (x *JustEatVariationV3) GetPricing() *JustEatPricingV3 {
	if x != nil {
		return x.Pricing
	}
	return nil
}

func (x *JustEatVariationV3) GetAdditionalInformation() string {
	if x != nil {
		return x.AdditionalInformation
	}
	return ""
}

func (x *JustEatVariationV3) GetGtin() string {
	if x != nil {
		return x.Gtin
	}
	return ""
}

type JustEatPhysicalPropertiesV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrossWeight *JustEatGrossWeightV3 `protobuf:"bytes,1,opt,name=gross_weight,json=grossWeight,proto3" json:"gross_weight,omitempty"`
	NetWeight   *JustEatNetWeightV3   `protobuf:"bytes,2,opt,name=net_weight,json=netWeight,proto3" json:"net_weight,omitempty"`
	NetVolume   *JustEatNetVolumeV3   `protobuf:"bytes,3,opt,name=net_volume,json=netVolume,proto3" json:"net_volume,omitempty"`
}

func (x *JustEatPhysicalPropertiesV3) Reset() {
	*x = JustEatPhysicalPropertiesV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_v3_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JustEatPhysicalPropertiesV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JustEatPhysicalPropertiesV3) ProtoMessage() {}

func (x *JustEatPhysicalPropertiesV3) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_v3_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JustEatPhysicalPropertiesV3.ProtoReflect.Descriptor instead.
func (*JustEatPhysicalPropertiesV3) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_v3_proto_rawDescGZIP(), []int{5}
}

func (x *JustEatPhysicalPropertiesV3) GetGrossWeight() *JustEatGrossWeightV3 {
	if x != nil {
		return x.GrossWeight
	}
	return nil
}

func (x *JustEatPhysicalPropertiesV3) GetNetWeight() *JustEatNetWeightV3 {
	if x != nil {
		return x.NetWeight
	}
	return nil
}

func (x *JustEatPhysicalPropertiesV3) GetNetVolume() *JustEatNetVolumeV3 {
	if x != nil {
		return x.NetVolume
	}
	return nil
}

type JustEatGrossWeightV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unit  string `protobuf:"bytes,1,opt,name=unit,proto3" json:"unit,omitempty"`
	Value int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *JustEatGrossWeightV3) Reset() {
	*x = JustEatGrossWeightV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_v3_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JustEatGrossWeightV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JustEatGrossWeightV3) ProtoMessage() {}

func (x *JustEatGrossWeightV3) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_v3_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JustEatGrossWeightV3.ProtoReflect.Descriptor instead.
func (*JustEatGrossWeightV3) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_v3_proto_rawDescGZIP(), []int{6}
}

func (x *JustEatGrossWeightV3) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *JustEatGrossWeightV3) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type JustEatNetWeightV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unit  string  `protobuf:"bytes,1,opt,name=unit,proto3" json:"unit,omitempty"`
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *JustEatNetWeightV3) Reset() {
	*x = JustEatNetWeightV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_v3_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JustEatNetWeightV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JustEatNetWeightV3) ProtoMessage() {}

func (x *JustEatNetWeightV3) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_v3_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JustEatNetWeightV3.ProtoReflect.Descriptor instead.
func (*JustEatNetWeightV3) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_v3_proto_rawDescGZIP(), []int{7}
}

func (x *JustEatNetWeightV3) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *JustEatNetWeightV3) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type JustEatNetVolumeV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unit  string  `protobuf:"bytes,1,opt,name=unit,proto3" json:"unit,omitempty"`
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *JustEatNetVolumeV3) Reset() {
	*x = JustEatNetVolumeV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_v3_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JustEatNetVolumeV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JustEatNetVolumeV3) ProtoMessage() {}

func (x *JustEatNetVolumeV3) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_v3_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JustEatNetVolumeV3.ProtoReflect.Descriptor instead.
func (*JustEatNetVolumeV3) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_v3_proto_rawDescGZIP(), []int{8}
}

func (x *JustEatNetVolumeV3) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *JustEatNetVolumeV3) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type JustEatPricingV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepositAmount int32 `protobuf:"varint,1,opt,name=deposit_amount,json=depositAmount,proto3" json:"deposit_amount,omitempty"`
}

func (x *JustEatPricingV3) Reset() {
	*x = JustEatPricingV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_v3_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JustEatPricingV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JustEatPricingV3) ProtoMessage() {}

func (x *JustEatPricingV3) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_v3_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JustEatPricingV3.ProtoReflect.Descriptor instead.
func (*JustEatPricingV3) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_v3_proto_rawDescGZIP(), []int{9}
}

func (x *JustEatPricingV3) GetDepositAmount() int32 {
	if x != nil {
		return x.DepositAmount
	}
	return 0
}

type JustEatModifierGroupV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MinChoices int32                `protobuf:"varint,3,opt,name=min_choices,json=minChoices,proto3" json:"min_choices,omitempty"`
	MaxChoices int32                `protobuf:"varint,4,opt,name=max_choices,json=maxChoices,proto3" json:"max_choices,omitempty"`
	Modifiers  []*JustEatModifierV3 `protobuf:"bytes,5,rep,name=modifiers,proto3" json:"modifiers,omitempty"`
}

func (x *JustEatModifierGroupV3) Reset() {
	*x = JustEatModifierGroupV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_v3_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JustEatModifierGroupV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JustEatModifierGroupV3) ProtoMessage() {}

func (x *JustEatModifierGroupV3) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_v3_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JustEatModifierGroupV3.ProtoReflect.Descriptor instead.
func (*JustEatModifierGroupV3) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_v3_proto_rawDescGZIP(), []int{10}
}

func (x *JustEatModifierGroupV3) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JustEatModifierGroupV3) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JustEatModifierGroupV3) GetMinChoices() int32 {
	if x != nil {
		return x.MinChoices
	}
	return 0
}

func (x *JustEatModifierGroupV3) GetMaxChoices() int32 {
	if x != nil {
		return x.MaxChoices
	}
	return 0
}

func (x *JustEatModifierGroupV3) GetModifiers() []*JustEatModifierV3 {
	if x != nil {
		return x.Modifiers
	}
	return nil
}

type JustEatModifierV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MinChoices            int32                      `protobuf:"varint,3,opt,name=min_choices,json=minChoices,proto3" json:"min_choices,omitempty"`
	MaxChoices            int32                      `protobuf:"varint,4,opt,name=max_choices,json=maxChoices,proto3" json:"max_choices,omitempty"`
	AdditionPriceCurrency string                     `protobuf:"bytes,6,opt,name=addition_price_currency,json=additionPriceCurrency,proto3" json:"addition_price_currency,omitempty"`
	NumberOfServings      *JustEatNumberOfServingsV3 `protobuf:"bytes,7,opt,name=number_of_servings,json=numberOfServings,proto3" json:"number_of_servings,omitempty"`
	Nutrition             *JustEatNutritionV3        `protobuf:"bytes,8,opt,name=nutrition,proto3" json:"nutrition,omitempty"`
	AdditionPriceF        float64                    `protobuf:"fixed64,9,opt,name=addition_price_f,json=additionPrice,proto3" json:"addition_price_f,omitempty"`
	AdditionalInformation string                     `protobuf:"bytes,10,opt,name=additional_information,json=additionalInformation,proto3" json:"additional_information,omitempty"`
}

func (x *JustEatModifierV3) Reset() {
	*x = JustEatModifierV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_v3_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JustEatModifierV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JustEatModifierV3) ProtoMessage() {}

func (x *JustEatModifierV3) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_v3_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JustEatModifierV3.ProtoReflect.Descriptor instead.
func (*JustEatModifierV3) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_v3_proto_rawDescGZIP(), []int{11}
}

func (x *JustEatModifierV3) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JustEatModifierV3) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JustEatModifierV3) GetMinChoices() int32 {
	if x != nil {
		return x.MinChoices
	}
	return 0
}

func (x *JustEatModifierV3) GetMaxChoices() int32 {
	if x != nil {
		return x.MaxChoices
	}
	return 0
}

func (x *JustEatModifierV3) GetAdditionPriceCurrency() string {
	if x != nil {
		return x.AdditionPriceCurrency
	}
	return ""
}

func (x *JustEatModifierV3) GetNumberOfServings() *JustEatNumberOfServingsV3 {
	if x != nil {
		return x.NumberOfServings
	}
	return nil
}

func (x *JustEatModifierV3) GetNutrition() *JustEatNutritionV3 {
	if x != nil {
		return x.Nutrition
	}
	return nil
}

func (x *JustEatModifierV3) GetAdditionPriceF() float64 {
	if x != nil {
		return x.AdditionPriceF
	}
	return 0
}

func (x *JustEatModifierV3) GetAdditionalInformation() string {
	if x != nil {
		return x.AdditionalInformation
	}
	return ""
}

type JustEatDealGroupV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NumberOfChoices    int32                        `protobuf:"varint,3,opt,name=number_of_choices,json=numberOfChoices,proto3" json:"number_of_choices,omitempty"`
	DealItemVariations []*JustEatDealItemVarationV3 `protobuf:"bytes,4,rep,name=deal_item_variations,json=dealItemVariations,proto3" json:"deal_item_variations,omitempty"`
}

func (x *JustEatDealGroupV3) Reset() {
	*x = JustEatDealGroupV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_v3_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JustEatDealGroupV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JustEatDealGroupV3) ProtoMessage() {}

func (x *JustEatDealGroupV3) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_v3_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JustEatDealGroupV3.ProtoReflect.Descriptor instead.
func (*JustEatDealGroupV3) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_v3_proto_rawDescGZIP(), []int{12}
}

func (x *JustEatDealGroupV3) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JustEatDealGroupV3) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JustEatDealGroupV3) GetNumberOfChoices() int32 {
	if x != nil {
		return x.NumberOfChoices
	}
	return 0
}

func (x *JustEatDealGroupV3) GetDealItemVariations() []*JustEatDealItemVarationV3 {
	if x != nil {
		return x.DealItemVariations
	}
	return nil
}

type JustEatDealItemVarationV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DealItemVariationId string  `protobuf:"bytes,1,opt,name=deal_item_variation_id,json=dealItemVariationId,proto3" json:"deal_item_variation_id,omitempty"`
	MinChoices          int32   `protobuf:"varint,2,opt,name=min_choices,json=minChoices,proto3" json:"min_choices,omitempty"`
	MaxChoices          int32   `protobuf:"varint,3,opt,name=max_choices,json=maxChoices,proto3" json:"max_choices,omitempty"`
	BasePriceCurrency   string  `protobuf:"bytes,5,opt,name=base_price_currency,json=basePriceCurrency,proto3" json:"base_price_currency,omitempty"`
	AdditionPriceF      float64 `protobuf:"fixed64,6,opt,name=addition_price_f,json=additionPrice,proto3" json:"addition_price_f,omitempty"`
}

func (x *JustEatDealItemVarationV3) Reset() {
	*x = JustEatDealItemVarationV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_v3_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JustEatDealItemVarationV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JustEatDealItemVarationV3) ProtoMessage() {}

func (x *JustEatDealItemVarationV3) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_v3_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JustEatDealItemVarationV3.ProtoReflect.Descriptor instead.
func (*JustEatDealItemVarationV3) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_v3_proto_rawDescGZIP(), []int{13}
}

func (x *JustEatDealItemVarationV3) GetDealItemVariationId() string {
	if x != nil {
		return x.DealItemVariationId
	}
	return ""
}

func (x *JustEatDealItemVarationV3) GetMinChoices() int32 {
	if x != nil {
		return x.MinChoices
	}
	return 0
}

func (x *JustEatDealItemVarationV3) GetMaxChoices() int32 {
	if x != nil {
		return x.MaxChoices
	}
	return 0
}

func (x *JustEatDealItemVarationV3) GetBasePriceCurrency() string {
	if x != nil {
		return x.BasePriceCurrency
	}
	return ""
}

func (x *JustEatDealItemVarationV3) GetAdditionPriceF() float64 {
	if x != nil {
		return x.AdditionPriceF
	}
	return 0
}

type JustEatAvailabilityV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id           string           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Description  string           `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ServiceTypes []string         `protobuf:"bytes,4,rep,name=service_types,json=serviceTypes,proto3" json:"service_types,omitempty"`
	Times        []*JustEatTimeV3 `protobuf:"bytes,5,rep,name=times,proto3" json:"times,omitempty"`
}

func (x *JustEatAvailabilityV3) Reset() {
	*x = JustEatAvailabilityV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_v3_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JustEatAvailabilityV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JustEatAvailabilityV3) ProtoMessage() {}

func (x *JustEatAvailabilityV3) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_v3_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JustEatAvailabilityV3.ProtoReflect.Descriptor instead.
func (*JustEatAvailabilityV3) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_v3_proto_rawDescGZIP(), []int{14}
}

func (x *JustEatAvailabilityV3) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JustEatAvailabilityV3) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JustEatAvailabilityV3) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *JustEatAvailabilityV3) GetServiceTypes() []string {
	if x != nil {
		return x.ServiceTypes
	}
	return nil
}

func (x *JustEatAvailabilityV3) GetTimes() []*JustEatTimeV3 {
	if x != nil {
		return x.Times
	}
	return nil
}

type JustEatTimeV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DaysOfTheWeek []string `protobuf:"bytes,1,rep,name=days_of_the_week,json=daysOfTheWeek,proto3" json:"days_of_the_week,omitempty"`
	FromDateTime  string   `protobuf:"bytes,2,opt,name=from_date_time,json=fromDateTime,proto3" json:"from_date_time,omitempty"`
	ToDateTime    string   `protobuf:"bytes,3,opt,name=to_date_time,json=toDateTime,proto3" json:"to_date_time,omitempty"`
}

func (x *JustEatTimeV3) Reset() {
	*x = JustEatTimeV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_v3_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JustEatTimeV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JustEatTimeV3) ProtoMessage() {}

func (x *JustEatTimeV3) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_v3_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JustEatTimeV3.ProtoReflect.Descriptor instead.
func (*JustEatTimeV3) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_v3_proto_rawDescGZIP(), []int{15}
}

func (x *JustEatTimeV3) GetDaysOfTheWeek() []string {
	if x != nil {
		return x.DaysOfTheWeek
	}
	return nil
}

func (x *JustEatTimeV3) GetFromDateTime() string {
	if x != nil {
		return x.FromDateTime
	}
	return ""
}

func (x *JustEatTimeV3) GetToDateTime() string {
	if x != nil {
		return x.ToDateTime
	}
	return ""
}

type JustEatNumberOfServingsV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min int32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max int32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *JustEatNumberOfServingsV3) Reset() {
	*x = JustEatNumberOfServingsV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_v3_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JustEatNumberOfServingsV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JustEatNumberOfServingsV3) ProtoMessage() {}

func (x *JustEatNumberOfServingsV3) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_v3_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JustEatNumberOfServingsV3.ProtoReflect.Descriptor instead.
func (*JustEatNumberOfServingsV3) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_v3_proto_rawDescGZIP(), []int{16}
}

func (x *JustEatNumberOfServingsV3) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *JustEatNumberOfServingsV3) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type JustEatNutritionV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnergyContent   []*JustEatNutritionalRangeItemV3 `protobuf:"bytes,1,rep,name=energy_content,json=energyContent,proto3" json:"energy_content,omitempty"`
	Allergens       *JustEatAllergenInformation      `protobuf:"bytes,2,opt,name=allergens,proto3" json:"allergens,omitempty"`
	AlcoholByVolume float32                          `protobuf:"fixed32,3,opt,name=alcohol_by_volume,json=alcoholByVolume,proto3" json:"alcohol_by_volume,omitempty"`
	NutritionTable  []*NutritionItem                 `protobuf:"bytes,4,rep,name=nutrition_table,json=nutritionTable,proto3" json:"nutrition_table,omitempty"`
}

func (x *JustEatNutritionV3) Reset() {
	*x = JustEatNutritionV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_v3_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JustEatNutritionV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JustEatNutritionV3) ProtoMessage() {}

func (x *JustEatNutritionV3) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_v3_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JustEatNutritionV3.ProtoReflect.Descriptor instead.
func (*JustEatNutritionV3) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_v3_proto_rawDescGZIP(), []int{17}
}

func (x *JustEatNutritionV3) GetEnergyContent() []*JustEatNutritionalRangeItemV3 {
	if x != nil {
		return x.EnergyContent
	}
	return nil
}

func (x *JustEatNutritionV3) GetAllergens() *JustEatAllergenInformation {
	if x != nil {
		return x.Allergens
	}
	return nil
}

func (x *JustEatNutritionV3) GetAlcoholByVolume() float32 {
	if x != nil {
		return x.AlcoholByVolume
	}
	return 0
}

func (x *JustEatNutritionV3) GetNutritionTable() []*NutritionItem {
	if x != nil {
		return x.NutritionTable
	}
	return nil
}

type NutritionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description         string               `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	NutritionProperties []*NutritionProperty `protobuf:"bytes,2,rep,name=nutrition_properties,json=nutritionProperties,proto3" json:"nutrition_properties,omitempty"`
}

func (x *NutritionItem) Reset() {
	*x = NutritionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_v3_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NutritionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionItem) ProtoMessage() {}

func (x *NutritionItem) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_v3_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionItem.ProtoReflect.Descriptor instead.
func (*NutritionItem) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_v3_proto_rawDescGZIP(), []int{18}
}

func (x *NutritionItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NutritionItem) GetNutritionProperties() []*NutritionProperty {
	if x != nil {
		return x.NutritionProperties
	}
	return nil
}

type NutritionProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Unit     string    `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
	Quantity *Quantity `protobuf:"bytes,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *NutritionProperty) Reset() {
	*x = NutritionProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_v3_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NutritionProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionProperty) ProtoMessage() {}

func (x *NutritionProperty) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_v3_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionProperty.ProtoReflect.Descriptor instead.
func (*NutritionProperty) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_v3_proto_rawDescGZIP(), []int{19}
}

func (x *NutritionProperty) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NutritionProperty) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *NutritionProperty) GetQuantity() *Quantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

type Quantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float32 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Quantity) Reset() {
	*x = Quantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_v3_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quantity) ProtoMessage() {}

func (x *Quantity) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_v3_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quantity.ProtoReflect.Descriptor instead.
func (*Quantity) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_v3_proto_rawDescGZIP(), []int{20}
}

func (x *Quantity) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type JustEatAllergenInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSource          string       `protobuf:"bytes,1,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"`
	Validated           bool         `protobuf:"varint,2,opt,name=validated,proto3" json:"validated,omitempty"`
	AllergenSet         []*Allergens `protobuf:"bytes,3,rep,name=allergen_set,json=allergenSet,proto3" json:"allergen_set,omitempty"`
	ContainsNoAllergens bool         `protobuf:"varint,4,opt,name=contains_no_allergens,json=containsNoAllergens,proto3" json:"contains_no_allergens,omitempty"`
}

func (x *JustEatAllergenInformation) Reset() {
	*x = JustEatAllergenInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_v3_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JustEatAllergenInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JustEatAllergenInformation) ProtoMessage() {}

func (x *JustEatAllergenInformation) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_v3_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JustEatAllergenInformation.ProtoReflect.Descriptor instead.
func (*JustEatAllergenInformation) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_v3_proto_rawDescGZIP(), []int{21}
}

func (x *JustEatAllergenInformation) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

func (x *JustEatAllergenInformation) GetValidated() bool {
	if x != nil {
		return x.Validated
	}
	return false
}

func (x *JustEatAllergenInformation) GetAllergenSet() []*Allergens {
	if x != nil {
		return x.AllergenSet
	}
	return nil
}

func (x *JustEatAllergenInformation) GetContainsNoAllergens() bool {
	if x != nil {
		return x.ContainsNoAllergens
	}
	return false
}

type Allergens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Level string `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *Allergens) Reset() {
	*x = Allergens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_v3_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Allergens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Allergens) ProtoMessage() {}

func (x *Allergens) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_v3_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Allergens.ProtoReflect.Descriptor instead.
func (*Allergens) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_v3_proto_rawDescGZIP(), []int{22}
}

func (x *Allergens) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Allergens) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

type JustEatNutritionalRangeItemV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min  int32  `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max  int32  `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	Unit string `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *JustEatNutritionalRangeItemV3) Reset() {
	*x = JustEatNutritionalRangeItemV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_justeat_menutype_v3_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JustEatNutritionalRangeItemV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JustEatNutritionalRangeItemV3) ProtoMessage() {}

func (x *JustEatNutritionalRangeItemV3) ProtoReflect() protoreflect.Message {
	mi := &file_justeat_menutype_v3_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JustEatNutritionalRangeItemV3.ProtoReflect.Descriptor instead.
func (*JustEatNutritionalRangeItemV3) Descriptor() ([]byte, []int) {
	return file_justeat_menutype_v3_proto_rawDescGZIP(), []int{23}
}

func (x *JustEatNutritionalRangeItemV3) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *JustEatNutritionalRangeItemV3) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *JustEatNutritionalRangeItemV3) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

var File_justeat_menutype_v3_proto protoreflect.FileDescriptor

var file_justeat_menutype_v3_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2f, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x79,
	0x70, 0x65, 0x2d, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6a, 0x75, 0x73,
	0x74, 0x65, 0x61, 0x74, 0x22, 0xa0, 0x02, 0x0a, 0x0d, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61, 0x74,
	0x4d, 0x65, 0x6e, 0x75, 0x56, 0x33, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x75,
	0x72, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x46, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x61, 0x74, 0x2e, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x56, 0x33, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x56, 0x33, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x4a,
	0x75, 0x73, 0x74, 0x45, 0x61, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x33,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xef, 0x03, 0x0a, 0x11, 0x4a, 0x75, 0x73, 0x74,
	0x45, 0x61, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x33, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x61, 0x74, 0x2e, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33, 0x52, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x75,
	0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61, 0x74, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x33, 0x52, 0x0e, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x3c, 0x0a, 0x0b,
	0x64, 0x65, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x4a, 0x75, 0x73, 0x74,
	0x45, 0x61, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x33, 0x52, 0x0a,
	0x64, 0x65, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61,
	0x74, 0x2e, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x33,
	0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x11, 0x4a, 0x75, 0x73,
	0x74, 0x45, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x56, 0x33, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x22,
	0x5b, 0x0a, 0x0e, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x56,
	0x33, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x72, 0x6c,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x75, 0x72, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0xce, 0x05, 0x0a,
	0x12, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x33, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x65, 0x61, 0x6c, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x69, 0x74, 0x63,
	0x68, 0x65, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65,
	0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x49,
	0x64, 0x73, 0x12, 0x50, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x73,
	0x56, 0x33, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x6e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61,
	0x74, 0x2e, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61, 0x74, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x33, 0x52, 0x09, 0x6e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x55, 0x0a, 0x13, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61, 0x74, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x56, 0x33, 0x52, 0x12, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65,
	0x61, 0x74, 0x2e, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e,
	0x67, 0x56, 0x33, 0x52, 0x07, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x16,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x74, 0x69, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x67, 0x74, 0x69, 0x6e, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xd7, 0x01,
	0x0a, 0x1b, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x56, 0x33, 0x12, 0x40, 0x0a,
	0x0c, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x4a, 0x75,
	0x73, 0x74, 0x45, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x56, 0x33, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x3a, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x4a, 0x75,
	0x73, 0x74, 0x45, 0x61, 0x74, 0x4e, 0x65, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x56, 0x33,
	0x52, 0x09, 0x6e, 0x65, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x6e,
	0x65, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61,
	0x74, 0x4e, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x56, 0x33, 0x52, 0x09, 0x6e, 0x65,
	0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x14, 0x4a, 0x75, 0x73, 0x74, 0x45,
	0x61, 0x74, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x56, 0x33, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3e, 0x0a, 0x12, 0x4a, 0x75, 0x73,
	0x74, 0x45, 0x61, 0x74, 0x4e, 0x65, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x56, 0x33, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3e, 0x0a, 0x12, 0x4a, 0x75, 0x73,
	0x74, 0x45, 0x61, 0x74, 0x4e, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x56, 0x33, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x39, 0x0a, 0x10, 0x4a, 0x75, 0x73,
	0x74, 0x45, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x56, 0x33, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61, 0x74,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x33, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65,
	0x61, 0x74, 0x2e, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x56, 0x33, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22,
	0xa4, 0x03, 0x0a, 0x11, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x56, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6d, 0x69, 0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x78, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x50, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67,
	0x73, 0x56, 0x33, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x6e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65,
	0x61, 0x74, 0x2e, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61, 0x74, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x33, 0x52, 0x09, 0x6e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0xba, 0x01, 0x0a, 0x12, 0x4a, 0x75, 0x73, 0x74, 0x45,
	0x61, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x33, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x54, 0x0a,
	0x14, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x75,
	0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61, 0x74, 0x44, 0x65, 0x61,
	0x6c, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33, 0x52,
	0x12, 0x64, 0x65, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x19, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61, 0x74, 0x44,
	0x65, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x33, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x64, 0x65, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x69, 0x6e,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61,
	0x78, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x27, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0xb0, 0x01, 0x0a, 0x15, 0x4a, 0x75, 0x73, 0x74,
	0x45, 0x61, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x56,
	0x33, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6a, 0x75,
	0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x56, 0x33, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x0d, 0x4a,
	0x75, 0x73, 0x74, 0x45, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x33, 0x12, 0x27, 0x0a, 0x10,
	0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x77, 0x65, 0x65, 0x6b,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x54, 0x68,
	0x65, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74,
	0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3f, 0x0a,
	0x19, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x56, 0x33, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0x93,
	0x02, 0x0a, 0x12, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61, 0x74, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x33, 0x12, 0x4d, 0x0a, 0x0e, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61, 0x74, 0x4e,
	0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x56, 0x33, 0x52, 0x0d, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x65, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61,
	0x74, 0x2e, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61, 0x74, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x65,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x63, 0x6f, 0x68,
	0x6f, 0x6c, 0x5f, 0x62, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0f, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x42, 0x79, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x6e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6a,
	0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x2e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x6e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x0d, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x14, 0x6e, 0x75, 0x74, 0x72,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74,
	0x2e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x52, 0x13, 0x6e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x6a, 0x0a, 0x11, 0x4e, 0x75, 0x74, 0x72, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74,
	0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x22, 0x20, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x1a, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61,
	0x74, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x5f,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x61, 0x74, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x73, 0x52, 0x0b, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67,
	0x65, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x4e, 0x6f, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x73, 0x22, 0x35,
	0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x57, 0x0a, 0x1d, 0x4a, 0x75, 0x73, 0x74, 0x45, 0x61, 0x74,
	0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x56, 0x33, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x80,
	0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x42, 0x0f,
	0x4d, 0x65, 0x6e, 0x75, 0x74, 0x79, 0x70, 0x65, 0x56, 0x33, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c,
	0x79, 0x70, 0x61, 0x79, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x6a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0xa2, 0x02, 0x03, 0x4a, 0x58, 0x58, 0xaa, 0x02, 0x07,
	0x4a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0xca, 0x02, 0x07, 0x4a, 0x75, 0x73, 0x74, 0x65, 0x61,
	0x74, 0xe2, 0x02, 0x13, 0x4a, 0x75, 0x73, 0x74, 0x65, 0x61, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x07, 0x4a, 0x75, 0x73, 0x74, 0x65, 0x61,
	0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_justeat_menutype_v3_proto_rawDescOnce sync.Once
	file_justeat_menutype_v3_proto_rawDescData = file_justeat_menutype_v3_proto_rawDesc
)

func file_justeat_menutype_v3_proto_rawDescGZIP() []byte {
	file_justeat_menutype_v3_proto_rawDescOnce.Do(func() {
		file_justeat_menutype_v3_proto_rawDescData = protoimpl.X.CompressGZIP(file_justeat_menutype_v3_proto_rawDescData)
	})
	return file_justeat_menutype_v3_proto_rawDescData
}

var file_justeat_menutype_v3_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_justeat_menutype_v3_proto_goTypes = []interface{}{
	(*JustEatMenuV3)(nil),                 // 0: justeat.JustEatMenuV3
	(*JustEatMenuItemV3)(nil),             // 1: justeat.JustEatMenuItemV3
	(*JustEatCategoryV3)(nil),             // 2: justeat.JustEatCategoryV3
	(*JustEatImageV3)(nil),                // 3: justeat.JustEatImageV3
	(*JustEatVariationV3)(nil),            // 4: justeat.JustEatVariationV3
	(*JustEatPhysicalPropertiesV3)(nil),   // 5: justeat.JustEatPhysicalPropertiesV3
	(*JustEatGrossWeightV3)(nil),          // 6: justeat.JustEatGrossWeightV3
	(*JustEatNetWeightV3)(nil),            // 7: justeat.JustEatNetWeightV3
	(*JustEatNetVolumeV3)(nil),            // 8: justeat.JustEatNetVolumeV3
	(*JustEatPricingV3)(nil),              // 9: justeat.JustEatPricingV3
	(*JustEatModifierGroupV3)(nil),        // 10: justeat.JustEatModifierGroupV3
	(*JustEatModifierV3)(nil),             // 11: justeat.JustEatModifierV3
	(*JustEatDealGroupV3)(nil),            // 12: justeat.JustEatDealGroupV3
	(*JustEatDealItemVarationV3)(nil),     // 13: justeat.JustEatDealItemVarationV3
	(*JustEatAvailabilityV3)(nil),         // 14: justeat.JustEatAvailabilityV3
	(*JustEatTimeV3)(nil),                 // 15: justeat.JustEatTimeV3
	(*JustEatNumberOfServingsV3)(nil),     // 16: justeat.JustEatNumberOfServingsV3
	(*JustEatNutritionV3)(nil),            // 17: justeat.JustEatNutritionV3
	(*NutritionItem)(nil),                 // 18: justeat.NutritionItem
	(*NutritionProperty)(nil),             // 19: justeat.NutritionProperty
	(*Quantity)(nil),                      // 20: justeat.Quantity
	(*JustEatAllergenInformation)(nil),    // 21: justeat.JustEatAllergenInformation
	(*Allergens)(nil),                     // 22: justeat.Allergens
	(*JustEatNutritionalRangeItemV3)(nil), // 23: justeat.JustEatNutritionalRangeItemV3
}
var file_justeat_menutype_v3_proto_depIdxs = []int32{
	14, // 0: justeat.JustEatMenuV3.availabilities:type_name -> justeat.JustEatAvailabilityV3
	2,  // 1: justeat.JustEatMenuV3.categories:type_name -> justeat.JustEatCategoryV3
	1,  // 2: justeat.JustEatMenuV3.items:type_name -> justeat.JustEatMenuItemV3
	4,  // 3: justeat.JustEatMenuItemV3.variations:type_name -> justeat.JustEatVariationV3
	10, // 4: justeat.JustEatMenuItemV3.modifier_groups:type_name -> justeat.JustEatModifierGroupV3
	12, // 5: justeat.JustEatMenuItemV3.deal_groups:type_name -> justeat.JustEatDealGroupV3
	3,  // 6: justeat.JustEatMenuItemV3.images:type_name -> justeat.JustEatImageV3
	16, // 7: justeat.JustEatVariationV3.number_of_servings:type_name -> justeat.JustEatNumberOfServingsV3
	17, // 8: justeat.JustEatVariationV3.nutrition:type_name -> justeat.JustEatNutritionV3
	5,  // 9: justeat.JustEatVariationV3.physical_properties:type_name -> justeat.JustEatPhysicalPropertiesV3
	9,  // 10: justeat.JustEatVariationV3.pricing:type_name -> justeat.JustEatPricingV3
	6,  // 11: justeat.JustEatPhysicalPropertiesV3.gross_weight:type_name -> justeat.JustEatGrossWeightV3
	7,  // 12: justeat.JustEatPhysicalPropertiesV3.net_weight:type_name -> justeat.JustEatNetWeightV3
	8,  // 13: justeat.JustEatPhysicalPropertiesV3.net_volume:type_name -> justeat.JustEatNetVolumeV3
	11, // 14: justeat.JustEatModifierGroupV3.modifiers:type_name -> justeat.JustEatModifierV3
	16, // 15: justeat.JustEatModifierV3.number_of_servings:type_name -> justeat.JustEatNumberOfServingsV3
	17, // 16: justeat.JustEatModifierV3.nutrition:type_name -> justeat.JustEatNutritionV3
	13, // 17: justeat.JustEatDealGroupV3.deal_item_variations:type_name -> justeat.JustEatDealItemVarationV3
	15, // 18: justeat.JustEatAvailabilityV3.times:type_name -> justeat.JustEatTimeV3
	23, // 19: justeat.JustEatNutritionV3.energy_content:type_name -> justeat.JustEatNutritionalRangeItemV3
	21, // 20: justeat.JustEatNutritionV3.allergens:type_name -> justeat.JustEatAllergenInformation
	18, // 21: justeat.JustEatNutritionV3.nutrition_table:type_name -> justeat.NutritionItem
	19, // 22: justeat.NutritionItem.nutrition_properties:type_name -> justeat.NutritionProperty
	20, // 23: justeat.NutritionProperty.quantity:type_name -> justeat.Quantity
	22, // 24: justeat.JustEatAllergenInformation.allergen_set:type_name -> justeat.Allergens
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_justeat_menutype_v3_proto_init() }
func file_justeat_menutype_v3_proto_init() {
	if File_justeat_menutype_v3_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_justeat_menutype_v3_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JustEatMenuV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_v3_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JustEatMenuItemV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_v3_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JustEatCategoryV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_v3_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JustEatImageV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_v3_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JustEatVariationV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_v3_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JustEatPhysicalPropertiesV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_v3_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JustEatGrossWeightV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_v3_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JustEatNetWeightV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_v3_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JustEatNetVolumeV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_v3_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JustEatPricingV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_v3_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JustEatModifierGroupV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_v3_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JustEatModifierV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_v3_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JustEatDealGroupV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_v3_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JustEatDealItemVarationV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_v3_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JustEatAvailabilityV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_v3_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JustEatTimeV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_v3_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JustEatNumberOfServingsV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_v3_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JustEatNutritionV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_v3_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NutritionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_v3_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NutritionProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_v3_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_v3_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JustEatAllergenInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_v3_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Allergens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_justeat_menutype_v3_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JustEatNutritionalRangeItemV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_justeat_menutype_v3_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_justeat_menutype_v3_proto_goTypes,
		DependencyIndexes: file_justeat_menutype_v3_proto_depIdxs,
		MessageInfos:      file_justeat_menutype_v3_proto_msgTypes,
	}.Build()
	File_justeat_menutype_v3_proto = out.File
	file_justeat_menutype_v3_proto_rawDesc = nil
	file_justeat_menutype_v3_proto_goTypes = nil
	file_justeat_menutype_v3_proto_depIdxs = nil
}
