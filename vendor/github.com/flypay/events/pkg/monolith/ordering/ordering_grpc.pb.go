// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ordering

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderSenderClient is the client API for OrderSender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderSenderClient interface {
	SendCollectionOrder(ctx context.Context, in *CollectionOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	// Deprecated: Do not use.
	AmendCollectionOrder(ctx context.Context, in *CollectionOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	FinalCollectionOrder(ctx context.Context, in *CollectionOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	SendDeliveryByOperatorOrder(ctx context.Context, in *DeliveryByOperatorOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	// Deprecated: Do not use.
	AmendDeliveryByOperatorOrder(ctx context.Context, in *DeliveryByOperatorOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	FinalDeliveryByOperatorOrder(ctx context.Context, in *DeliveryByOperatorOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	SendDeliveryByPartnerOrder(ctx context.Context, in *DeliveryByDeliveryPartnerOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	// Deprecated: Do not use.
	AmendDeliveryByPartnerOrder(ctx context.Context, in *DeliveryByDeliveryPartnerOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	FinalDeliveryByPartnerOrder(ctx context.Context, in *DeliveryByDeliveryPartnerOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	OrderingHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	// This method is optional, the response will default to error NOT_SUPPORTED
	CalculateTaxAndTotal(ctx context.Context, in *CalculateRequest, opts ...grpc.CallOption) (*CalculateResponse, error)
}

type orderSenderClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderSenderClient(cc grpc.ClientConnInterface) OrderSenderClient {
	return &orderSenderClient{cc}
}

func (c *orderSenderClient) SendCollectionOrder(ctx context.Context, in *CollectionOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/ordering.OrderSender/SendCollectionOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *orderSenderClient) AmendCollectionOrder(ctx context.Context, in *CollectionOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/ordering.OrderSender/AmendCollectionOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSenderClient) FinalCollectionOrder(ctx context.Context, in *CollectionOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/ordering.OrderSender/FinalCollectionOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSenderClient) SendDeliveryByOperatorOrder(ctx context.Context, in *DeliveryByOperatorOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/ordering.OrderSender/SendDeliveryByOperatorOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *orderSenderClient) AmendDeliveryByOperatorOrder(ctx context.Context, in *DeliveryByOperatorOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/ordering.OrderSender/AmendDeliveryByOperatorOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSenderClient) FinalDeliveryByOperatorOrder(ctx context.Context, in *DeliveryByOperatorOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/ordering.OrderSender/FinalDeliveryByOperatorOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSenderClient) SendDeliveryByPartnerOrder(ctx context.Context, in *DeliveryByDeliveryPartnerOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/ordering.OrderSender/SendDeliveryByPartnerOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *orderSenderClient) AmendDeliveryByPartnerOrder(ctx context.Context, in *DeliveryByDeliveryPartnerOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/ordering.OrderSender/AmendDeliveryByPartnerOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSenderClient) FinalDeliveryByPartnerOrder(ctx context.Context, in *DeliveryByDeliveryPartnerOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/ordering.OrderSender/FinalDeliveryByPartnerOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSenderClient) OrderingHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/ordering.OrderSender/OrderingHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSenderClient) CalculateTaxAndTotal(ctx context.Context, in *CalculateRequest, opts ...grpc.CallOption) (*CalculateResponse, error) {
	out := new(CalculateResponse)
	err := c.cc.Invoke(ctx, "/ordering.OrderSender/CalculateTaxAndTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderSenderServer is the server API for OrderSender service.
// All implementations should embed UnimplementedOrderSenderServer
// for forward compatibility
type OrderSenderServer interface {
	SendCollectionOrder(context.Context, *CollectionOrderRequest) (*OrderResponse, error)
	// Deprecated: Do not use.
	AmendCollectionOrder(context.Context, *CollectionOrderRequest) (*OrderResponse, error)
	FinalCollectionOrder(context.Context, *CollectionOrderRequest) (*OrderResponse, error)
	SendDeliveryByOperatorOrder(context.Context, *DeliveryByOperatorOrderRequest) (*OrderResponse, error)
	// Deprecated: Do not use.
	AmendDeliveryByOperatorOrder(context.Context, *DeliveryByOperatorOrderRequest) (*OrderResponse, error)
	FinalDeliveryByOperatorOrder(context.Context, *DeliveryByOperatorOrderRequest) (*OrderResponse, error)
	SendDeliveryByPartnerOrder(context.Context, *DeliveryByDeliveryPartnerOrderRequest) (*OrderResponse, error)
	// Deprecated: Do not use.
	AmendDeliveryByPartnerOrder(context.Context, *DeliveryByDeliveryPartnerOrderRequest) (*OrderResponse, error)
	FinalDeliveryByPartnerOrder(context.Context, *DeliveryByDeliveryPartnerOrderRequest) (*OrderResponse, error)
	OrderingHealth(context.Context, *HealthRequest) (*HealthResponse, error)
	// This method is optional, the response will default to error NOT_SUPPORTED
	CalculateTaxAndTotal(context.Context, *CalculateRequest) (*CalculateResponse, error)
}

// UnimplementedOrderSenderServer should be embedded to have forward compatible implementations.
type UnimplementedOrderSenderServer struct {
}

func (UnimplementedOrderSenderServer) SendCollectionOrder(context.Context, *CollectionOrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCollectionOrder not implemented")
}
func (UnimplementedOrderSenderServer) AmendCollectionOrder(context.Context, *CollectionOrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AmendCollectionOrder not implemented")
}
func (UnimplementedOrderSenderServer) FinalCollectionOrder(context.Context, *CollectionOrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalCollectionOrder not implemented")
}
func (UnimplementedOrderSenderServer) SendDeliveryByOperatorOrder(context.Context, *DeliveryByOperatorOrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDeliveryByOperatorOrder not implemented")
}
func (UnimplementedOrderSenderServer) AmendDeliveryByOperatorOrder(context.Context, *DeliveryByOperatorOrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AmendDeliveryByOperatorOrder not implemented")
}
func (UnimplementedOrderSenderServer) FinalDeliveryByOperatorOrder(context.Context, *DeliveryByOperatorOrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalDeliveryByOperatorOrder not implemented")
}
func (UnimplementedOrderSenderServer) SendDeliveryByPartnerOrder(context.Context, *DeliveryByDeliveryPartnerOrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDeliveryByPartnerOrder not implemented")
}
func (UnimplementedOrderSenderServer) AmendDeliveryByPartnerOrder(context.Context, *DeliveryByDeliveryPartnerOrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AmendDeliveryByPartnerOrder not implemented")
}
func (UnimplementedOrderSenderServer) FinalDeliveryByPartnerOrder(context.Context, *DeliveryByDeliveryPartnerOrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalDeliveryByPartnerOrder not implemented")
}
func (UnimplementedOrderSenderServer) OrderingHealth(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderingHealth not implemented")
}
func (UnimplementedOrderSenderServer) CalculateTaxAndTotal(context.Context, *CalculateRequest) (*CalculateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateTaxAndTotal not implemented")
}

// UnsafeOrderSenderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderSenderServer will
// result in compilation errors.
type UnsafeOrderSenderServer interface {
	mustEmbedUnimplementedOrderSenderServer()
}

func RegisterOrderSenderServer(s grpc.ServiceRegistrar, srv OrderSenderServer) {
	s.RegisterService(&OrderSender_ServiceDesc, srv)
}

func _OrderSender_SendCollectionOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSenderServer).SendCollectionOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.OrderSender/SendCollectionOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSenderServer).SendCollectionOrder(ctx, req.(*CollectionOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSender_AmendCollectionOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSenderServer).AmendCollectionOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.OrderSender/AmendCollectionOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSenderServer).AmendCollectionOrder(ctx, req.(*CollectionOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSender_FinalCollectionOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSenderServer).FinalCollectionOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.OrderSender/FinalCollectionOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSenderServer).FinalCollectionOrder(ctx, req.(*CollectionOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSender_SendDeliveryByOperatorOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryByOperatorOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSenderServer).SendDeliveryByOperatorOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.OrderSender/SendDeliveryByOperatorOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSenderServer).SendDeliveryByOperatorOrder(ctx, req.(*DeliveryByOperatorOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSender_AmendDeliveryByOperatorOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryByOperatorOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSenderServer).AmendDeliveryByOperatorOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.OrderSender/AmendDeliveryByOperatorOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSenderServer).AmendDeliveryByOperatorOrder(ctx, req.(*DeliveryByOperatorOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSender_FinalDeliveryByOperatorOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryByOperatorOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSenderServer).FinalDeliveryByOperatorOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.OrderSender/FinalDeliveryByOperatorOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSenderServer).FinalDeliveryByOperatorOrder(ctx, req.(*DeliveryByOperatorOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSender_SendDeliveryByPartnerOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryByDeliveryPartnerOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSenderServer).SendDeliveryByPartnerOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.OrderSender/SendDeliveryByPartnerOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSenderServer).SendDeliveryByPartnerOrder(ctx, req.(*DeliveryByDeliveryPartnerOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSender_AmendDeliveryByPartnerOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryByDeliveryPartnerOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSenderServer).AmendDeliveryByPartnerOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.OrderSender/AmendDeliveryByPartnerOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSenderServer).AmendDeliveryByPartnerOrder(ctx, req.(*DeliveryByDeliveryPartnerOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSender_FinalDeliveryByPartnerOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryByDeliveryPartnerOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSenderServer).FinalDeliveryByPartnerOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.OrderSender/FinalDeliveryByPartnerOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSenderServer).FinalDeliveryByPartnerOrder(ctx, req.(*DeliveryByDeliveryPartnerOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSender_OrderingHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSenderServer).OrderingHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.OrderSender/OrderingHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSenderServer).OrderingHealth(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSender_CalculateTaxAndTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSenderServer).CalculateTaxAndTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.OrderSender/CalculateTaxAndTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSenderServer).CalculateTaxAndTotal(ctx, req.(*CalculateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderSender_ServiceDesc is the grpc.ServiceDesc for OrderSender service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderSender_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ordering.OrderSender",
	HandlerType: (*OrderSenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCollectionOrder",
			Handler:    _OrderSender_SendCollectionOrder_Handler,
		},
		{
			MethodName: "AmendCollectionOrder",
			Handler:    _OrderSender_AmendCollectionOrder_Handler,
		},
		{
			MethodName: "FinalCollectionOrder",
			Handler:    _OrderSender_FinalCollectionOrder_Handler,
		},
		{
			MethodName: "SendDeliveryByOperatorOrder",
			Handler:    _OrderSender_SendDeliveryByOperatorOrder_Handler,
		},
		{
			MethodName: "AmendDeliveryByOperatorOrder",
			Handler:    _OrderSender_AmendDeliveryByOperatorOrder_Handler,
		},
		{
			MethodName: "FinalDeliveryByOperatorOrder",
			Handler:    _OrderSender_FinalDeliveryByOperatorOrder_Handler,
		},
		{
			MethodName: "SendDeliveryByPartnerOrder",
			Handler:    _OrderSender_SendDeliveryByPartnerOrder_Handler,
		},
		{
			MethodName: "AmendDeliveryByPartnerOrder",
			Handler:    _OrderSender_AmendDeliveryByPartnerOrder_Handler,
		},
		{
			MethodName: "FinalDeliveryByPartnerOrder",
			Handler:    _OrderSender_FinalDeliveryByPartnerOrder_Handler,
		},
		{
			MethodName: "OrderingHealth",
			Handler:    _OrderSender_OrderingHealth_Handler,
		},
		{
			MethodName: "CalculateTaxAndTotal",
			Handler:    _OrderSender_CalculateTaxAndTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "monolith/ordering/ordering.proto",
}

// ReleaseOrderSenderClient is the client API for ReleaseOrderSender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReleaseOrderSenderClient interface {
	SendReleaseOrder(ctx context.Context, in *ReleaseOrderRequest, opts ...grpc.CallOption) (*ReleaseOrderResponse, error)
}

type releaseOrderSenderClient struct {
	cc grpc.ClientConnInterface
}

func NewReleaseOrderSenderClient(cc grpc.ClientConnInterface) ReleaseOrderSenderClient {
	return &releaseOrderSenderClient{cc}
}

func (c *releaseOrderSenderClient) SendReleaseOrder(ctx context.Context, in *ReleaseOrderRequest, opts ...grpc.CallOption) (*ReleaseOrderResponse, error) {
	out := new(ReleaseOrderResponse)
	err := c.cc.Invoke(ctx, "/ordering.ReleaseOrderSender/SendReleaseOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReleaseOrderSenderServer is the server API for ReleaseOrderSender service.
// All implementations should embed UnimplementedReleaseOrderSenderServer
// for forward compatibility
type ReleaseOrderSenderServer interface {
	SendReleaseOrder(context.Context, *ReleaseOrderRequest) (*ReleaseOrderResponse, error)
}

// UnimplementedReleaseOrderSenderServer should be embedded to have forward compatible implementations.
type UnimplementedReleaseOrderSenderServer struct {
}

func (UnimplementedReleaseOrderSenderServer) SendReleaseOrder(context.Context, *ReleaseOrderRequest) (*ReleaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendReleaseOrder not implemented")
}

// UnsafeReleaseOrderSenderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReleaseOrderSenderServer will
// result in compilation errors.
type UnsafeReleaseOrderSenderServer interface {
	mustEmbedUnimplementedReleaseOrderSenderServer()
}

func RegisterReleaseOrderSenderServer(s grpc.ServiceRegistrar, srv ReleaseOrderSenderServer) {
	s.RegisterService(&ReleaseOrderSender_ServiceDesc, srv)
}

func _ReleaseOrderSender_SendReleaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseOrderSenderServer).SendReleaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.ReleaseOrderSender/SendReleaseOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseOrderSenderServer).SendReleaseOrder(ctx, req.(*ReleaseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReleaseOrderSender_ServiceDesc is the grpc.ServiceDesc for ReleaseOrderSender service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReleaseOrderSender_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ordering.ReleaseOrderSender",
	HandlerType: (*ReleaseOrderSenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendReleaseOrder",
			Handler:    _ReleaseOrderSender_SendReleaseOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "monolith/ordering/ordering.proto",
}
